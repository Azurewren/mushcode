@@ DEPENDENCIES - CORE

@switch/inline isdbref(u(kls))=0,{@tel create(Key Lock System <KLS>)=config(master_room)}
&kls u(coi)=locate(config(master_room),Key Lock System <KLS>,TXxi)
@parent u(kls)=u(coi)
@set u(kls)=WIZARD !NO_COMMAND

@switch/inline isdbref(u(kdb))=0,{@switch/inline isdbref(u(kls))=1,{@tel create(Key Database <KDB>)=u(kls)}}
&kdb u(coi)=locate(u(kls),Key Database <KDB>,TXxi)
@parent u(kdb)=u(coi)
@set u(kdb)=WIZARD

&CMD`+KEY u(kls)=$^(?s)(?\:\+)?(key)(?\:/(\S+))?(?\: +(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%2,setunion(get(u(kls)/VAR`%1`PLAYFLAGS),if(isadmin(%#),get(u(kls)/VAR`%1`ADMINFLAGS)),|,|),|,KEY,switch,switch;@include u(kls)/INC`%1`[strfirstof(%q<switch>,MAIN)]=%3,%4
@set u(kls)/CMD`+KEY=regexp

&CMD`+LOCK u(kls)=$^(?s)(?\:\+)?(lock)(?\:/(\S+))?(?\: +(.+?))?(?\:=(.*))?$:@include u(kls)/INC`LOCK=%3,%4,strfirstof(%2,basic)
@set u(kls)/CMD`+LOCK=regexp

&VAR`KEY`PLAYFLAGS u(kls)=ADD|REM|MAKE|DESTROY|AUTH|REVOKE|CHOWN|CONFIG
&VAR`KEY`ADMINFLAGS u(kls)=

&VAR`LOCKTYPES u(kls)=Basic|Enter|Teleport|use|page|zone|parent|link|open|mail|speech|listen|command|leave|drop|dropin|give|from|pay|receive|follow|examine|chzone|forward|filter|infilter|control|dropto|destroy|interact|take|mailforward|chanjoinlock|chanspeaklock|chanseelock|chanhidelock|chanmodlock

&INC`KEY`MAIN u(kls)=@assert words(setr(locks,u(u(kls)/FUN`LISTLOCKS,1)))=@nspemit %#=announce(KEY) ERROR: There are no Keys!;@switch/inline strlen(%0)=0,{@nspemit %#=header(mudname() Keys);@dolist/inline/delimit | [setunion(iter(lattr(u(kdb)/LOCK`*`CATEGORY),capnames(get(u(kdb)/%i0)),%B,|),,|,i,|)]={@nspemit %#=subheader(%i0 Key Types);@nspemit %#=table(iter(iter(grepi(u(kdb),LOCK`*`CATEGORY,%i0),elements(%i0,2,`),%B,|),\[[if(elock(u(kdb)/%i0,%#),ansi(hg,O),ansi(hr,X))]\] %i0,|,|),25,78,|)};@nspemit %#=subheader(Unset Key Types);@nspemit %#=table(iter(iter(filterbool(#lambda/not(hasattrval(u(kdb)/\%0`CATEGORY)),lattr(u(kdb)/LOCK`*)),elements(%i0,2,`),%B,|),\[[if(elock(u(kdb)/%i0,%#),ansi(hg,O),ansi(hr,X))]\] %i0,|,|),25,78,|);@nspemit %#=header(+key <name> to see specific Key Type!)},{@include u(kls)/INC`KEYNAME=%0;@assert match(%q<locks>,%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@nspemit %#=header(mudname() Key: %q<key>);@nspemit %#=[align(50 25,ansi(h,%q<key>) - You [if(elock(u(kdb)/%q<key>,%#),ansi(hg,Pass),ansi(hr,Fail))] this Key's lock!%R[ljust(rjust(OWNER:,10),10)] [name(get(u(kdb)/LOCK`%q<key>`OWNER))]%R[ljust(rjust(HANDLERS:,10),10)] [itemize(iter(filterbool(#lambda/isobjid(\%0),get(u(kdb)/LOCK`%q<key>`HANDLERS)),name(%i0),%B,|),|,and,\,)]%R[ljust(rjust(HOLDERS:,10),10)] [itemize(iter(filterbool(#lambda/isobjid(\%0),get(u(kdb)/LOCK`%q<key>`HOLDERS)),name(%i0),%B,|),|,and,\,)],[ljust(rjust(APPROVED:,10),10)] [if(t(get(u(kdb)/LOCK`%q<key>`APPROVED),0),Yes,No)]%R[ljust(rjust(BUILDER:,10),10)] [if(t(get(u(kdb)/LOCK`%q<key>`BUILDER),0),Yes,No)]%R[ljust(rjust(SPLAT:,10),10)] [get(u(kdb)/LOCK`%q<key>`SPLAT)]%R[ljust(rjust(SPHERE:,10),10)] [get(u(kdb)/LOCK`%q<key>`SPHERE)]%R[ljust(rjust(GROUP:,10),10)] [itemize(iter(get(u(kdb)/LOCK`%q<key>`GROUP),,%b,|),|,and,\,)]%R[ljust(rjust(KEY:,10),10)] [itemize(iter(get(u(kdb)/LOCK`%q<key>`KEY),,%b,|),|,and,\,)])];@nspemit %#=header()}

&INC`KEYNAME u(kls)=@assert strlen(setr(key,ucstr(%0)))=@nspemit %#=announce(KEYS) ERROR: Key Type Name field empty.;@break match(v(VAR`LOCKTYPES),%0,|)=@nspemit %#=announce(KEY) ERROR: Key Type names may not conflict with hardcoded @lock types.;@assert eq(words(%0),1)=@nspemit %#=announce(KEY) ERROR: A Key Type must be a single word.;@break strmatch(%0,*-*)=@nspemit %#=announce(KEY) ERROR: A Key may not contain the - character.;@assert regmatchi(%0,^(\\w+)$)=@nspemit %#=announce(KEY) ERROR: Key Types must be simple words without special characters.;@assert valid(attrname,LOCK`%0`FUN)=@nspemit %#=announce(KEY) ERROR: Hardcode doesn't like that name. Pick something without complicated characters.;@assert eq(3,words(LOCK`%0`FUN,`))=@nspemit %#=announce(KEY) ERROR: The backtick (`) is not allowed.

&INC`KEY`MAKE u(kls)=@assert or(isadmin(%#),and(v(VAR`PLAYERMAKE),approved(%#)))=@nspemit %#=announce(KEY) ERROR: Players may not make Key Types.;@include u(kls)/INC`KEYNAME=%0;@@ @break match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>,|)=@nspemit %#=announce(KEY) ERROR: That Key Type already exists!;@lock/user:%q<key>-OWNER u(kdb)=LOCK`%q<key>`FUN`OWNER/1;@lset u(kdb)/%q<key>-OWNER=v;@cpattr u(kls)/FUN`LOCKPROTO`OWNER=u(kdb)/LOCK`%q<key>`FUN`OWNER;@lock/user:%q<key>-HANDLER u(kdb)=LOCK`%q<key>`FUN`HANDLER/1;@lset u(kdb)/%q<key>-HANDLER=v;@cpattr u(kls)/FUN`LOCKPROTO`HANDLER=u(kdb)/LOCK`%q<key>`FUN`HANDLER;@lock/user:%q<key> u(kdb)=LOCK`%q<key>`FUN/1;@lset u(kdb)/%q<key>=v;@cpattr u(kls)/FUN`LOCKPROTO=u(kdb)/LOCK`%q<key>`FUN;&LOCK`%q<key>`OWNER u(kdb)=%:;@nspemit %#=announce(KEY) You have created the %q<key> Key Type!;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) has created a new Key Type: %q<key>}

&INC`KEY`DESTROY u(kls)=@include u(kls)/INC`KEYNAME=%0;@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-OWNER,%#)=@nspemit %#=announce(KEY) ERROR: Players may not destroy Key Types they do not own.;@include u(ccs)/INC`VERIFY={WARNING: This will Destroy the Key Type %q<key>. The key list will be deleted. Are you sure? Enter the same command again in ten seconds to verify.},LOCK DELETE %q<key>;@unlock/user:%q<key>-OWNER u(kdb);@unlock/user:%q<key>-HANDLER;@unlock/user:%q<key> u(kdb);@wipe u(kdb)/LOCK`%q<key>;@nspemit %#=announce(KEY) You have destroyed the Key Type %q<key>!;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) has destroyed a Key Type: %q<key>}

&INC`KEY`CHOWN u(kls)=@include u(kls)/INC`KEYNAME=%0;@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-OWNER,%#)=@nspemit %#=announce(KEY) ERROR: Players may not reassign Key Types they do not own.;@include u(ccs)/INC`CHECKPC=%1,1,KEY;@include u(ccs)/INC`VERIFY={WARNING: This will REASSIGN OWNERS for  the Key Type %q<key>. Are you sure? Enter the same command again in ten seconds to verify.},LOCK CHOWN %q<key> %q<t1>;&LOCK`%q<key>`OWNER u(kdb)=%q<t1objid>;@nspemit %#=announce(KEY) You have reassigned ownership of Key Type %q<key> to %q<t1name>!;@nspemit %q<t1>=announce(KEY) %n reassigned ownership of Key Type %q<key> to you!;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) reassigned Key Type %q<key> to %q<t1name>}

&INC`KEY`AUTH u(kls)=@include u(kls)/INC`KEYNAME=%0;@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-OWNER,%#)=@nspemit %#=announce(KEY) ERROR: Players may not authorize Key Type handlers for Key Types they do not own.;@include u(ccs)/INC`CHECKPC=%1,1,KEY;@break match(get(u(kdb)/LOCK`%q<key>`HANDLERS),%q<t1objid>)=@nspemit %#=announce(KEY) ERROR: %q<t1name> is already authorized for that Key Type.;&LOCK`%q<key>`HANDLERS u(kdb)=filterbool(#lambda/isobjid(\%0),setunion(get(u(kdb)/LOCK`%q<key>`HANDLERS),%q<t1objid>));@nspemit %#=announce(KEY) You authorized %q<t1name> to handle Key Type %q<key>.;@nspemit %q<t1>=announce(KEY) %n authorized you to handle Key Type %q<key>!;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) authorized %q<t1name> to handle Key Type %q<key>.}

&INC`KEY`REVOKE u(kls)=@include u(kls)/INC`KEYNAME=%0;@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-OWNER,%#)=@nspemit %#=announce(KEY) ERROR: Players may not revoke Key Type handlers for Key Types they do not own.;@include u(ccs)/INC`CHECKPC=%1,1,KEY;@assert match(get(u(kdb)/LOCK`%q<key>`HANDLERS),%q<t1objid>)=@nspemit %#=announce(KEY) ERROR: %q<t1name> is not au thorized for that Key Type.;&LOCK`%q<key>`HANDLERS u(kdb)=filterbool(#lambda/isobjid(\%0),setdiff(get(u(kdb)/LOCK`%q<key>`HANDLERS),%q<t1objid>));@nspemit %#=announce(KEY) You revoked %q<t1name>'s authority to handle Key Type %q<key>.;@nspemit %q<t1>=announce(KEY) %n revoked your authority to handle Key Type %q<key>.;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) revoked %q<t1name>'s authority to handle Key Type %q<key>.}

&INC`KEY`ADD u(kls)=@include u(kls)/INC`KEYNAME=%0;@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-HANDLER,%#)=@nspemit %#=announce(KEY) ERROR: You are not authorized to handle that Key!;@include u(ccs)/INC`CHECKPC=%1,1,KEY;@break match(get(u(kdb)/LOCK`%q<key>`HOLDERS),%q<t1objid>)=@nspemit %#=announce(KEY) ERROR: %q<t1name> already has that Key.;&LOCK`%q<key>`HOLDERS u(kdb)=filterbool(#lambda/isobjid(\%0),setunion(get(u(kdb)/LOCK`%q<key>`HOLDERS),%q<t1objid>));@nspemit %#=announce(KEY) You give %q<t1name> a %q<key> Key.;@nspemit %q<t1>=announce(KEY) %n gave you a %q<key> Key!;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) gave %q<t1name> a %q<key> Key.}

&INC`KEY`REM u(kls)=@include u(kls)/INC`KEYNAME=%0;@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-HANDLER,%#)=@nspemit %#=announce(KEY) ERROR: You are not authorized to handle that Key!;@include u(ccs)/INC`CHECKPC=%1,1,KEY;@assert match(get(u(kdb)/LOCK`%q<key>`HOLDERS),%q<t1objid>)=@nspemit %#=announce(KEY) ERROR: %q<t1name> does not have that Key.;&LOCK`%q<key>`HOLDERS u(kdb)=filterbool(#lambda/isobjid(\%0),setdiff(get(u(kdb)/LOCK`%q<key>`HOLDERS),%q<t1objid>));@nspemit %#=announce(KEY) You revoke %q<t1name>'s %q<key> Key.;@nspemit %q<t1>=announce(KEY) %n revoked your %q<key> Key!;@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) revoked %q<t1name>'s %q<key> Key.}

&INC`KEY`CONFIG u(kls)=@include u(kls)/INC`KEYNAME=before(%0,/);@assert match(u(u(kls)/FUN`LISTLOCKS,1),%q<key>)=@nspemit %#=announce(KEY) ERROR: That Key Type doesn't exist!;@assert elock(u(kdb)/%q<key>-OWNER,%#)=@nspemit %#=announce(KEY) ERROR: Players may not configure Key Types they do not own.;@include u(ccs)/INC`PARTIAL=after(%0,/),CATEGORY|BUILDER|APPROVED|NOAPPROVED|GROUP|SPLAT|SPHERE|KEY,|,KEY,parameter,parameter;@switch/inline strlen(%1)=0,{&LOCK`%q<key>`%q<parameter> u(kdb);@nspemit %#=announce(KEY) You cleared Key Type %q<key>'s %q<paramter> Setting.},{@include u(kls)/INC`KEY`CONFIG`%q<parameter>;&LOCK`%q<key>`%q<parameter> u(kdb)=%q<entry>;@nspemit %#=announce(KEY) You set Key Type %q<key>'s %q<parameter> Setting to: %q<entry>}

&INC`KEY`CONFIG`CATEGORY u(kls)=th setq(entry,%1)
&INC`KEY`CONFIG`BUILDER u(kls)=th setq(entry,t(%1))
&INC`KEY`CONFIG`APPROVED u(kls)=th setq(entry,t(%1))
&INC`KEY`CONFIG`NOAPPROVED u(kls)=th setq(entry,t(%1))
&INC`KEY`CONFIG`GROUP u(kls)=@assert lmath(min,setr(entry,iter(%1,u(u(gso)/FUN`FINDGROUP,%i0))))=@nspemit %#=announce(KEY) ERROR: One or more Groups was not found. Groups are separated by spaces so use their IDs or ALIASes!
&INC`KEY`CONFIG`SPLAT u(kls)=@assert lmath(min,iter(setr(entry,sort(ucstr(%1))),match(get(u(ex-cdo)/VAR`SPLATS),%i0,|)))=@nspemit %#=announce(KEY) ERROR: One or more Splats was not found. Splats are separated by spaces.
&INC`KEY`CONFIG`SPHERE u(kls)=@assert lmath(min,iter(setr(entry,sort(ucstr(%1))),match(get(u(ncdo)/VAR`SPHERES),%i0,|)))=@nspemit %#=announce(KEY) ERROR: One or more Spheres was not found. Spheres are separated by spaces.
&INC`KEY`CONFIG`KEY u(kls)=@assert eq(words(setr(choices,setdiff(setr(entry,%1),u(u(kls)/FUN`LISTLOCKS)))),0)=@nspemit %#=announce(KEY) ERROR: Following lock types not found: [itemize(%q<choices>,|,and,\,)]

&INC`LOCK u(kls)=@assert strlen(%0)=@nspemit %#=announce(KEY) ERROR: No Target entered to lock.;@assert isdbref(setr(target,locate(%#,%0,N)))=@nspemit %#=announce(KEY) ERROR: %0 does not match anything.;@assert controls(%#,%q<target>)=@nspemit %#=announce(KEY) ERROR: Permission denied.;@assert or(match(v(VAR`LOCKTYPES),%2,|),regmatchi(%2,^(user:\[\\w+\])$))=@nspemit %#=announce(LOCK) ERROR: Must match a proper locktype or be a user: lock.;@switch/inline gt(strlen(%1),0)=1,{@assert eq(words(setr(choices,setdiff(%1,u(u(kls)/FUN`LISTLOCKS,1)))),0)=@nspemit %#=announce(KEY) ERROR: Following lock types not found: [itemize(%q<choices>,|,and,\,)];@lock/%2 %q<target>=\(\([iter(%1,@[u(kdb)]/%i0,%B,|)]|DBREFLIST^LOCK`[if(strmatch(%2,user:*),after(%2,:),%2)]`EXCEPTIONS\)&!DBREFLIST^LOCK`[if(strmatch(%2,user:*),after(%2,:),%2)]`BANNED\);@nspemit %#=announce(KEY) You have changed the '[lcstr(%2)]' Lock on (%q<target> - [type(%q<target>)]) to: [itemize(capnames(%1),%b,and,\,)];@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) set the '[lcstr(%2)]' Lock on (%q<target> - [type(%q<target>)]) to: [itemize(capnames(%1),%b,and,\,)]}},0,{@unlock/%2 %q<target>;@nspemit %#=announce(KEY) You have removed the '[lcstr(%2)]' Lock on (%q<target> - [type(%q<target>)]);@switch/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy v(VAR`ALERTSCHANNEL)=ansi(h,%n) removed the '[lcstr(%2)]' Lock on [name(%q<target>)] (%q<target> - [type(%q<target>)])}}

&VAR`ALERTMODE u(kls)=1
&VAR`ALERTSCHANNEL u(kls)=Staff Reports
&FUN`LISTLOCKS u(kls)=setunion(if(%0,iter(filterbool(#lambda/regmatchi(\%0,^USER:\\\\w+$),llocks(u(kdb))),after(%i0,USER:)),iter(filterbool(#lambda/strmatch(\%0,USER:*),llocks(u(kdb))),after(%i0,USER:))),)

&FUN`LOCKPROTO u(kls)=u(u(kls)/FUN`LOCKCHECK,%:,%!,elements(after(%=,/),2,`))
&FUN`LOCKPROTO`OWNER u(kls)=u(u(kls)/FUN`LOCKCHECK`OWNER,%:,%!,elements(after(%=,/),2,`))
&FUN`LOCKPROTO`HANDLER u(kls)=u(u(kls)/FUN`LOCKCHECK`HANDLER,%:,%!,elements(after(%=,/),2,`))

&FUN`LOCKCHECK u(kls)=or(u(FUN`LOCKCHECK`OWNER,%0,%1,%2),u(FUN`LOCKCHECK`HANDLER,%0,%1,%2),if(hasattr(u(kdb)/LOCK`%2`FUN`OVERRIDE),u(u(kdb)/LOCK`%2`FUN`OVERRIDE,%0,%1,%2),if(default(u(kdb)/LOCK`%2`APPROVED,0),if(approved(%0),u(FUN`LOCKCHECK`OR,%0,%1,%2),0),u(FUN`LOCKCHECK`OR,%0,%1,%2))))
&FUN`LOCKCHECK`OWNER u(kls)=or(match(get(u(kdb)/LOCK`%2`OWNER),%0),isadmin(%0))
&FUN`LOCKCHECK`HANDLER u(kls)=or(u(FUN`LOCKCHECK`OWNER,%0,%1,%2),match(get(u(kdb)/LOCK`%2`HANDLERS),%0),isadmin(%0))

&FUN`LOCKCHECK`OR u(kls)=lmath(max,iter(lattr(u(kls)/FUN`LOCKCHECK`OR`*),u(%i0,%0,%1,%2)))
&FUN`LOCKCHECK`OR`ADMIN u(kls)=isadmin(%0)
&FUN`LOCKCHECK`OR`NOAPPROVED u(kls)=if(default(u(kdb)/LOCK`%2`NOAPPROVED,0),not(approved(%0)))
&FUN`LOCKCHECK`OR`HOLDERS u(kls)=match(get(u(kdb)/LOCK`%2`HOLDERS),%0)
&FUN`LOCKCHECK`OR`BUILDER u(kls)=if(default(u(kdb)/LOCK`%2`BUILDER,0),haspower(%0,BUILDER),0)
&FUN`LOCKCHECK`OR`SPLAT u(kls)=if(strlen(get(u(kdb)/LOCK`%2`SPLAT)),match(get(u(kdb)/LOCK`%2`SPLAT),getstat(%0/D`INFO,Splat)),0)
&FUN`LOCKCHECK`OR`SPHERE u(kls)=if(strlen(get(u(kdb)/LOCK`%2`SPHERE)),match(get(u(kdb)/LOCK`%2`SPHERE),getsphere(%0)),0)
&FUN`LOCKCHECK`OR`GROUP u(kls)=if(strlen(get(u(kdb)/LOCK`%2`GROUP)),lmath(max,iter(get(u(kdb)/LOCK`%2`GROUP),u(u(gso)/FUN`GRPAUTH,%0,%i0,LOCK))),0)

@@ %0 - objid of enactor, %1 - executor dbref, %2 - lock name