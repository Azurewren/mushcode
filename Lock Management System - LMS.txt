@@ DEPENDENCIES - CORE

th u(NEWCOBJ,Lock Management System <LMS>,lms,,,,WIZARD SAFE !NO_COMMAND,INHERIT SIDEFX SAFE)
th u(NEWCOBJ,Key Object Parent <KOP>,kop,u(cobj,lms),,,WIZARD SAFE,INHERIT SIDEFX SAFE)

&FUN`ISADMIN [u(cobj,kop)]=u(isadmin,%#)
&FUN`AUTHCHECK`MODERATE [u(cobj,kop)]=[cor(match(v(MODERATORS),u(objid,%#)),match(v(OWNERS),u(objid,%#)))]
&FUN`AUTHCHECK`MEMBER [u(cobj,kop)]=[cor(match(v(MEMBERS),u(objid,%#)),u(FUN`AUTHCHECK`MODERATE),u(FUN`AUTHCHECK,u(objid,%#)))]

@@ Member Lock
@lock/basic [u(cobj,kop)]=FUN`AUTHCHECK`MEMBER/1
@lset [u(cobj,kop)]/basic=visual
@lset [u(cobj,kop)]/basic=!no_inherit

@select/inline v(game)=PennMUSH,{@lock/user:MEMBER u(cobj,kop)=FUN`AUTHCHECK`MEMBER/1;@lset u(cobj,kop)/member=visual;@lset u(cobj,kop)/member=!no_inherit}

@@ Moderate lock.
@lock/enter [u(cobj,kop)]=FUN`AUTHCHECK`MODERATE/1
@lset [u(cobj,kop)]/enter=visual
@lset [u(cobj,kop)]/enter=!no_inherit

@select/inline v(game)=PennMUSH,{@lock/user:MODERATE u(cobj,kop)=FUN`AUTHCHECK`MODERATE/1;@lset u(cobj,kop)/moderate=visual;@lset u(cobj,kop)/moderate=!no_inherit}

&FUN`AUTHCHECK [u(cobj,kop)]=if(v(CONF`APPROVED),if(u(isapproved,%0),u(FUN`AUTHCHECK`OR,%0)),u(FUN`AUTHCHECK`OR,%0))
&FUN`AUTHCHECK`OR [u(cobj,kop)]=u(lmax,iter(u(lattrp,%!/FUN`AUTHCHECK`OR`*),u(%i0,%0)))
&FUN`AUTHCHECK`OR`BUILDER [u(cobj,kop)]=if(default(CONF`BUILDER,0),haspower(%0,BUILDER),0)
&FUN`AUTHCHECK`OR`NOAPPROVED [u(cobj,kop)]=if(v(CONF`NOAPPROVED),u(isapproved,%0))
&FUN`AUTHCHECK`OR`CLASS [u(cobj,kop)]=if(strlen(v(CONF`CLASS)),match(v(CONF`CLASS),getclass(%0)),0)
&FUN`AUTHCHECK`OR`ADMIN [u(cobj,kop)]=if(v(CONF`NOSTAFFCHECK),,u(isadmin,%0))
&FUN`AUTHCHECK`OR`NOFACTION [u(cobj,kop)]=if(v(CONF`NOFACTION),not(words(u(getproperty,%0,majordbs))))

&CMD`+KEY`PENNMUSH [u(cobj,lms)]=$^(?s)(?\:\+)?(key)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+KEY`MAIN
@set [u(cobj,lms)]/CMD`+KEY`PENNMUSH=regexp
&CMD`+KEY`RHOSTMUSH [u(cobj,lms)]=$^(?s)(?\:\+)?(key)(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+KEY`MAIN
@set [u(cobj,lms)]/CMD`+KEY`RHOSTMUSH=regexp
&CMD`+KEY`MAIN [u(cobj,lms)]=@attach %!/INC`GETSWITCH=%2;@include %!/INC`[u(strfirstof,%q<switch>,MAIN)]=%3,%4
@set [u(cobj,lms)]/CMD`+KEY`[switch(v(game),PennMUSH,RHOSTMUSH,RhostMUSH,PENNMUSH)]=no_command

&CMD`+LOCK`PENNMUSH [u(cobj,lms)]=$^(?s)(?\:\+)?(lock)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+LOCK`MAIN
@set [u(cobj,lms)]/CMD`+LOCK`PENNMUSH=regexp
&CMD`+LOCK`RHOSTMUSH [u(cobj,lms)]=$^(?s)(?\:\+)?(lock)(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+LOCK`MAIN
@set [u(cobj,lms)]/CMD`+LOCK`RHOSTMUSH=regexp
&CMD`+LOCK`MAIN [u(cobj,lms)]=@include %!/INC`LOCK=%3,%4,u(strfirstof,%2,basic)
@set [u(cobj,lms)]/CMD`+LOCK`[switch(v(game),PennMUSH,RHOSTMUSH,RhostMUSH,PENNMUSH)]=no_command

&SWITCHES`PLAYER [u(cobj,lms)]=ADD|REMOVE|MAKE|DESTROY|AUTH|REVOKE|CHOWN|CONFIG
&SWITCHES`ADMIN [u(cobj,lms)]=
&SYSTEM`NAME [u(cobj,lms)]=LOCKS

&LOCKTYPES`PENNMUSH [u(cobj,lms)]=Basic|Enter|Teleport|use|page|zone|parent|link|open|mail|speech|listen|command|leave|drop|dropin|give|from|pay|receive|follow|examine|chzone|forward|filter|infilter|control|dropto|destroy|interact|take|mailforward|chanjoinlock|chanspeaklock|chanseelock|chanhidelock|chanmodlock

&LOCKTYPES`RHOSTMUSH [u(cobj,lms)]=Basic|DefaultLock|EnterLock|GiveLock|LeaveLock|LinkLock|PageLock|ParentLock|ReceiveLock|DropLock|SpeechLock|TeloutLock|TportLock|UseLock|UserLock|TwinkLock|ZoneWizLock|ZoneToLock|DarkLock|OpenLock|DropToLock|GiveToLock|GetFromLock|ChownLock

&INC`MAIN [u(cobj,lms)]=@check or(words(u(setr,keys,u(FUN`LISTKEYS))),words(u(setr,groups,if(isdbref(u(cobj,gms)),u(u(cobj,gms)/FUN`LISTGROUPS)))))=@attach %!/INC`MSG=ERROR: There are no Keys or Groups!;@switch/first/inline strlen(%0)=0,{@pemit %#=header(mudname() Keys);@pemit %#=ansi(u(color,%#,LOCKS,COLUMN_NAMES),align(-3 6 30,*,Dbref,Name));@dolist/inline/delimit | [setunion(iter(%q<keys>,u(capnames,default(##/CONF`CATEGORY,Unset)),%B,|),,|,i,|)]={@pemit %#=u(separator,## Master Keys);@pemit %#=u(FUN`DISPLAY,u(filter,KEYMATCH,%q<keys>,%b,%b,##),%#)};@select/inline isdbref(u(cobj,gms))=1,{@pemit %#=u(header,mudname() Groups);@select/inline t(words(u(setr,major,u(filter,MAJORGROUPS,%q<groups>))))=1,{@pemit %#=u(separator,Major Groups);@pemit %#=u(FUN`DISPLAY,%q<major>,%#)};@select/inline t(words(u(setr,minor,u(filter,MINORGROUPS,%q<groups>))))=1,{@pemit %#=u(separator,Minor Groups);@pemit %#=u(FUN`DISPLAY,%q<minor>,%#)}};@pemit %#=u(header,+key <name> to see specific Master Key!)},{@attach %!/INC`KEYFIND=%0;@check cor(elock(%q<key>/Basic,%#),u(isadmin,%#))=@attach %!/INC`MSG=ERROR: Cannot check the status of a Key you do not pass!;@pemit %#=u(header,mudname() Key: [name(%q<key>)]);@pemit %#=[align(50 25,ansi(h,%q<key>) - You [if(elock(%q<key>,%#),ansi(hg,Pass),ansi(hr,Fail))] this Key's lock!%R[ljust(rjust(OWNER:,11),11)] [u(itemize,iter(u(filter,ISOBJID,get(%q<key>/OWNERS)),u(moniker,%i0),%b,|),|,and,\,)] %R[ljust(rjust(MODERATORS:,11),11)] [u(itemize,iter(u(filter,ISOBJID,get(%q<key>/MODERATORS)),u(moniker,%i0),%b,|),|,and,\,)]%R[ljust(rjust(MEMBERS:,11),11)] [u(itemize,iter(u(filter,ISOBJID,get(%q<key>/MEMBERS)),u(moniker,%i0),%b,|),|,and,\,)],iter(setunion(v(CONFCATS),v(CONFCATS`EXTRA),|,|),ljust(rjust(%i0:,10),10)%B[u(FUN`GET`%i0,%q<key>)],|,%R))];@pemit %#=u(header)}

&FIL`KEYMATCH [u(cobj,lms)]=strmatch(u(capnames,default(%0/CONF`CATEGORY,Unset)),%1)
&FIL`MAJORGROUPS [u(cobj,lms)]=u(u(cobj,gms)/FUN`GETSET,%0,MAJOR)
&FIL`MINORGROUPS [u(cobj,lms)]=eq(u(u(cobj,gms)/FUN`GETSET,%0,MAJOR),0)

&FUN`DISPLAY [u(cobj,lms)]=iter(%0,align(3 6 30,%[[if(elock(%i0,%1),ansi(hg,O),ansi(hr,X))]%],u(pueblize,%i0,if(strmatch(parent(%i0),u(cobj,kop)),+key,+group) %i0),u(moniker,%i0)),%b,%r)

&VAR`LISTCONF [u(cobj,lms)]=APPROVED|BUILDER|CLASS|GROUP|KEY
&FUN`GET`APPROVED [u(cobj,lms)]=if(get(%0/CONF`APPROVED),Yes,No)
&FUN`GET`BUILDER [u(cobj,lms)]=if(get(%0/CONF`BUILDER),Yes,No)
&FUN`GET`CLASS [u(cobj,lms)]=get(%0/CONF`CLASS)
&FUN`GET`GROUP [u(cobj,lms)]=u(itemize,iter(get(%0/CONF`GROUP),%i0,%b,|),|,and,\,)
&FUN`GET`KEY [u(cobj,lms)]=u(itemize,iter(get(%0/CONF`KEY),%i0,%b,|),|,and,\,)

&INC`KEYNAME [u(cobj,lms)]=@check strlen(%0)=@attach %!/INC`MSG=ERROR: Master Key Name field empty.;@check valid(name,%0)=@attach %!/INC`MSG=ERROR: An object can't have that name. Try without special characters? Or shorter?;@stop isdbref(u(find_in,u(cobj,kop),%0))=@attach %!/INC`MSG=ERROR: A Key named that already exists.

&FUN`FINDKEY [u(cobj,lms)]=u(namegrab,u(FUN`LISTKEYS),%0)

&INC`KEYFIND [u(cobj,lms)]=@check strlen(%0)=@attach %!/INC`MSG=ERROR: Key field empty.;@check isdbref(u(setr,key,u(FUN`FINDKEY,%0)))=@attach %!/INC`MSG=ERROR: Key '%0' not found!

&INC`MAKE [u(cobj,lms)]=@check cor(u(isadmin,%#),cand(u(game_config,KEY,PLAYER_MAKE),approved(%#)))=@attach %!/INC`MSG=ERROR: Players may not make Master Keys.;@attach %!/INC`KEYNAME=%0;@tel [u(setr,key,create(%0))]=[u(cobj,kop)];@parent %q<key>=u(cobj,kop);@set %q<key>=WIZARD SAFE;@attach %!/INC`MSG=You have created the %0 Master Key!;@attach %!/INC`MSG`CHAN=Created a new Master Key: %q<key> - %0

&INC`DESTROY [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),u(game_config,KEY,PLAYER_DESTROY))=@attach %!/INC`MSG=ERROR: Players may not destroy Master Keys.;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not destroy Master Keys they do not own.;@attach %!/INC`VERIFY={WARNING: This will Destroy the Master Key [name(%q<key>)]. The key list will be deleted. Are you sure? Enter the same command again in ten seconds to verify.},LOCK DELETE %q<key>;@attach %!/INC`MSG=You have destroyed the Master Key [name(%q<key>)]!;@attach %!/INC`MSG`CHAN=Destroyed a Master Key: %q<key> - [name(%q<key>)];@attach %!/DELETE=%q<key>

&INC`CHOWN [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not reassign Master Keys they do not own.;@attach %!/INC`CHECKPC=%1,1;@attach %!/INC`VERIFY={WARNING: This will REASSIGN OWNERS for the Master Key [name(%q<key>)]. Are you sure? Enter the same command again in ten seconds to verify.},LOCK CHOWN %q<key> %q<t1>;&OWNERS %q<key>=%q<t1objid>;@attach %!/INC`MSG=You have reassigned ownership of Master Key [name(%q<key>)] to %q<t1name>!;@attach %!/INC`MSG`NOTICE=Ownership of Master Key [name(%q<key>)] has been assigned to you!,%q<t1>;@attach %!/INC`MSG`CHAN=Reassigned Master Key [name(%q<key>)] to %q<t1name>

&INC`AUTH [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not authorize Master Key Moderators for Master Keys they do not own.;@attach %!/INC`CHECKPC=%1,1;@stop match(get(%q<key>/MODERATORS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> is already authorized for that Master Key.;&MODERATORS %q<key>=u(filter,ISOBJID,setunion(get(%q<key>/MODERATORS),%q<t1objid>));@attach %!/INC`MSG=You authorized %q<t1name> to Moderate Master Key [name(%q<key>)].;@attach %!/INC`MSG`NOTICE=You are now authorized to Moderate Master Key [name(%q<key>)],%q<t1>;@attach %!/INC`MSG`CHAN=Authorized %q<t1name> to Moderate Master Key [name(%q<key>)].

&INC`REVOKE [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not revoke Master Key handlers for Master Keys they do not own.;@attach %!/INC`CHECKPC=%1,1;@check match(get(%q<key>/MODERATORS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> is not authorized for that Master Key.;&MODERATORS %q<key>=u(filter,ISOBJID,setdiff(get(%q<key>/MODERATORS),%q<t1objid>));@attach %!/INC`MSG=You revoked %q<t1name>'s authority to Moderate Master Key [name(%q<key>)].;@attach %!/INC`MSG`NOTICE=You are no longer authorized to Moderate Master Key [name(%q<key>)],%q<t1>;@attach %!/INC`MSG`CHAN=Revoked %q<t1name>'s authority to Moderate Master Key [name(%q<key>)]

&INC`ADD [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(elock(%q<key>/MODERATE,%#),u(isadmin,%#))=@attach %!/INC`MSG=ERROR: You are not authorized to moderate that Key!;@attach %!/INC`CHECKPC=%1,1,KEY;@stop match(get(%q<key>/MEMBERS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> already has that Key.;&MEMBERS %q<key>=u(filter,ISOBJID,setunion(get(%q<key>/MEMBERS),%q<t1objid>));@attach %!/INC`MSG=You give %q<t1name> a [name(%q<key>)] Key.;@attach %!/INC`MSG`NOTICE=You were given a [name(%q<key>)] Key.,%q<t1>;@attach %!/INC`MSG`CHAN=Gave %q<t1name> a [name(%q<key>)] Key.

&INC`REMOVE [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(elock(%q<key>/MODERATE,%#),u(isadmin,%#))=@attach %!/INC`MSG=ERROR: You are not authorized to moderate that Key!;@attach %!/INC`CHECKPC=%1,1,KEY;@check match(get(%q<key>/MEMBERS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> does not have that Key.;&MEMBERS %q<key>=u(filter,ISOBJID,setdiff(get(%q<key>/MEMBERS),%q<t1objid>));@attach %!/INC`MSG=You revoke %q<t1name>'s [name(%q<key>)] Key.;@pemit %q<t1>=u(MSGHEAD,KEY) %n revoked your [name(%q<key>)] Key!;@switch/first/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy u(VAR`ALERTSCHANNEL)=ansi(h,%n) revoked %q<t1name>'s [name(%q<key>)] Key.}

&INC`CONFIG [u(cobj,lms)]=@attach %!/INC`KEYFIND=before(%0,/);@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not configure Master Keys they do not own.;@check strlen(after(%0,/))=@attach %!/INC`MSG=ERROR: Parameter empty.;@attach %!/INC`PARTIAL=after(%0,/),setunion(v(CONFCATS),v(CONFCATS`EXTRA),|,|),|,parameter,parameter;@select/inline strlen(%1)=0,{&CONF`%q<parameter> %q<key>;@attach %!/INC`MSG=You cleared Master Key [name(%q<key>)]'s %q<parameter> Setting.},{@attach %!/INC`CONFIG`%q<parameter>;&CONF`%q<parameter> %q<key>=%q<entry>;@attach %!/INC`MSG=You set Master Key [name(%q<key>)]'s %q<parameter> Setting to: %q<entry>}

&CONFCATS [u(cobj,lms)]=CATEGORY|BUILDER|APPROVED|NOAPPROVED|GROUP|CLASS|KEY|NOSTAFFCHECK|NOFACTION

&INC`CONFIG`NOFACTION [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`CONFIG`CATEGORY [u(cobj,lms)]=th u(setq,entry,%1)
&INC`CONFIG`BUILDER [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`CONFIG`APPROVED [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`CONFIG`NOAPPROVED [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`CONFIG`NOSTAFFCHECK [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`CONFIG`GROUP [u(cobj,lms)]=@check lmath(min,u(setr,entry,iter(%1,u(u(gso)/FUN`FINDGROUP,%i0))))=@attach %!/INC`MSG=ERROR: One or more Groups was not found. Groups are separated by spaces so use their IDs or ALIASes!
&INC`CONFIG`CLASS [u(cobj,lms)]=@check u(lmin,iter(u(setr,entry,sort(ucstr(%1))),match(u(game_config,STORYTELLER,CLASSES),%i0,|)))=@attach %!/INC`MSG=ERROR: One or more Classes was not found. Classes are separated by spaces.
&INC`CONFIG`KEY [u(cobj,lms)]=@check eq(words(u(setr,choices,setdiff(u(setr,entry,%1),u(%!/FUN`LISTLOCKS)))),0)=@attach %!/INC`MSG=ERROR: Following lock types not found: [u(itemize,%q<choices>,|,and,\,)]

&INC`LOCK [u(cobj,lms)]=@check strlen(%0)=@attach %!/INC`MSG=ERROR: No Target entered to lock.;@check isdbref(u(setr,target,locate(%#,%0,N)))=@attach %!/INC`MSG=ERROR: %0 does not match anything.;@check controls(%#,%q<target>)=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`DOLOCK=%q<target>,%2,%1,LOCK

&INC`DOLOCK [u(cobj,lms)]=@check cor(match(get(u(cobj,lms)/LOCKTYPES`[v(game)]),%1,|),if(strmatch(v(game),PennMUSH),strmatch(%1,user:?*)),not(strlen(%1)))=@attach %!/INC`MSG=ERROR: Must match a proper locktype[if(strmatch(v(game),PennMUSH),%bor be a user: lock.,.)];@select/inline gt(strlen(%2),0)=1,{th u(setq,keydbs,setunion(u(u(cobj,lms)/FUN`LISTKEYS),if(isdbref(u(cobj,gms)),u(u(cobj,gms)/FUN`LISTGROUPS))));@stop words(u(setr,choices,u(filter,KEYCHOICES,%2,%b,%b,%q<keydbs>)))=@attach %!/INC`MSG=ERROR: Following Master Keys not found: [u(itemize,%q<choices>,|,and,\,)];@dolist/inline %2={@check isdbref(u(setr,grab,u(namegrab,%q<keydbs>,before(##,/))))=@attach %!/INC`MSG=ERROR: Master Key Not Found: [before(##,/)];@check match(u(u(cobj,lms)/FUN`LISTLOCKS,%q<grab>),u(strfirstof,after(##,/),BASIC),|)=@attach %!/INC`MSG=ERROR: Lock Type for [before(##,/)] Not Found: [after(##,/)]};@select/inline strlen(%1)=>0,{@force [u(cobj,lms)]=@lock/%1 %0=[iter(%2,@[u(namegrab,%q<keydbs>,before(%i0,/))][if(cand(strlen(after(%i0,/)),strmatch(v(game),PennMUSH)),/[after(%i0,/)],switch(v(game),RhostMUSH,,/Basic))],%B,|)]},{@lock %0=[iter(%2,@[u(namegrab,%q<keydbs>,before(%i0,/))][if(cand(strlen(after(%i0,/)),strmatch(v(game),PennMUSH)),/[after(%i0,/)])],%B,|)]};@select/inline t(%3)=1,{@lset %0[if(strlen(%1),/%1)]=!no_inherit};@attach %!/INC`MSG=You have changed the [u(setr,msg,'[if(strlen(%1),u(capnames,%1),Basic)]' Lock on [type(%0)] %0 ([name(%0)]) to: [u(itemize,u(capnames,%2),%b,and,\,)])];@attach %!/INC`MSG`CHAN=Set the %q<msg>},0,{@unlock[if(strlen(%1),/%1)] %0;@attach %!/INC`MSG=You have removed the [u(setr,msg,'[if(strlen(%1),u(capnames,%1),Basic)]' Lock on [type(%0)] %0 ([name(%0)]))];@attach %!/INC`MSG`CHAN=Removed the %q<msg>}
@@ - %0, target. %1 - lock type, %2 - lock string. %3 - set !no_inherit

&FIL`KEYCHOICES [u(cobj,mco)]=not(isdbref(u(namegrab,%1,before(%0,/))))

&INC`GENLOCK [u(cobj,lms)]=th u(setq,keydbs,setunion(u(u(cobj,lms)/FUN`LISTKEYS),if(isdbref(u(cobj,gms)),u(u(cobj,gms)/FUN`LISTGROUPS))));@stop words(u(setr,choices,u(filter,KEYCHOICES,%0,%b,%b,%q<keydbs>)))=@attach %!/INC`MSG=ERROR: Following Master Keys not found: [u(itemize,%q<choices>,|,and,\,)];@dolist/inline %0={@check isdbref(u(setr,grab,u(namegrab,%q<keydbs>,before(##,/))))=@attach %!/INC`MSG=ERROR: Master Key Not Found: [before(##,/)];@check match(u(u(cobj,lms)/FUN`LISTLOCKS,%q<grab>),u(strfirstof,after(##,/),BASIC),|)=@attach %!/INC`MSG=ERROR: Lock Type for [before(##,/)] Not Found: [after(##,/)]};th u(setq,value,iter(%0,@[u(namegrab,%q<keydbs>,before(%i0,/))][if(cand(strlen(after(%i0,/)),strmatch(v(game),PennMUSH)),/[after(%i0,/)])],%B,|))

&DEFAULT`LOCKS [u(cobj,config)]=@@ Empty attr for Rhost.
&DEFAULT`LOCKS`PLAYER_MAKE [u(cobj,config)]=0
&DESC`LOCKS`PLAYER_MAKE [u(cobj,config)]=Can players make Master Keys?
&TYPE`LOCKS`PLAYER_MAKE [u(cobj,config)]=BOOL

&DEFAULT`LOCKS`PLAYER_DESTROY [u(cobj,config)]=0
&DESC`LOCKS`PLAYER_DESTROY [u(cobj,config)]=Can players destroy Master Keys they own?
&TYPE`LOCKS`PLAYER_DESTROY [u(cobj,config)]=BOOL

&FUN`LISTLOCKS [u(cobj,lms)]=Basic|Enter
&FUN`LISTKEYS [u(cobj,lms)]=u(sortname,children(u(cobj,kop)))

+help/add +key=[u(cobj,lms)]/HLP`+KEY
+help/category +key=Technical
+Help/metatags +key=locks keys restriction
&HLP`+KEY [u(cobj,lms)]=The [ansi(hc,+key)] System builds on built-in @locks by creating 'Key Types' - simple names that can represent groups of people, or specified circumstances \(such as races, approval status, group membership, etc\) in which someone would pass a lock. Note: Staff 'pass' all Key Types and can do whatever they need with them (they are considered owners, handlers, etc.).%R[ansi(hc,See Also:)] [pueblize(help @lock)], [u(pueblize,switch(v(game),PennMUSH,help locktypes,RhostMUSH,help @lock locks))]%R%R[ansi(hc,Concepts)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,Key Types)] - Master Types\, referred to as <keys> in the help below\, must be short words such as WIZARD or VAMPIRE or UNION. Each can have many options set to determine who can use and administrate it.%R[ansi(h,Owner)] - The OWNER of a Key Type has full control over its configuration.%R[ansi(h,Handler)] - Handlers are players approved to assign Holdership of a Key. They also pass the Key themselves.%R[ansi(h,Holders)] - Key Holders are individuals approved to 'pass' a key. This is in ADDITION to anyone who passes config options.)]%R%REach Key Type is a THING with two @locks set on it: The Basic lock representing passing it and Enter for Holders.%R%R[ansi(hc,Viewing Key Types)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,+key)] - List all Key Types.%R[ansi(h,+key <key>)] - Show info about a Key Type.)]%R%R[ansi(hc,Managing Key Types)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,+key/make <name>)] - Creates a new Key Type owned by you.%R[ansi(h,+key/chown <key type>=<player>)] - Changes ownership of a Key Type. Owner only.%R[ansi(h,+key/auth <key>=<player>)] - Authorize a player to control key holders. Owner only.%R[ansi(h,+key/revoke <key>=<name>)] - Revokes authorization for controlling key holders. Owner only.%R[ansi(h,+key/add <key>=<name>)] - Add player to the Holders list. Handler/Owner only.%R[ansi(h,+key/rem <key>=<name>)] - Remove player from Holders list. Handler/Owner only.)]%R%R[ansi(hc,Locks)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,+lock\[/<locktype>\] <target>=<list of key names>)] - Sets a Lock via @lock on <target> to use the specified Key types. See built-in helpfilse for more information. [if(strmatch(v(game),PennMUSH),User: locks are acceptable.%B)]If a <locktype> is not specified it will set a Basic lock. As an example: +lock Exit=WEREWOLF VAMPIRE MAGE would make the exit passable by anyone with a WEREWOLF\, VAMPIRE\, or MAGE key. Locks set to nothing are unlocked.)]

+help/add +key/Config=[u(cobj,lms)]/HLP`+KEY`CONFIG
&HLP`+KEY`CONFIG [u(cobj,lms)]=[ansi(hc,Configuring Keys)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,+key/config <key>/<option>=<value>)] - Changes an option for a Key Type. Owner Only. Blank values clear the option. Options include:)]%R[align(10 67,,[ansi(h,builder)] - Set to 1 means Builders always pass this lock.%R[ansi(h,approved)] - Set to 1 means you must be approved to MAYBE pass the lock \(you must still pass one of the other checks.\) Note: Admin and Builders are always considered 'approved for play'.%R[ansi(h,CLASS)] - Set this to a list of Class names \(nWoD/Exalted games only\) and anyone who is one of them will pass the lock.%R[ansi(h,GROUP)] - Set to a list of group names \(entered by a space seperated list of group aliases\) and anyone who's a member of any group and passes their LOCK auth will pass the lock.%R[ansi(h,KEY)] - Set to a list of other key names\, anyone who passes one will pass the lock.%R[ansi(h,CATEGORY)] - Set to a simple category name to group the Key under for display purposes.)]

&MIGRATE`LOCKS [u(cobj,migrate)]=@dolist/inline u(filter,isdbref,children(u(coi,kop)))={@parent ##=u(cobj,kop);@tel ##=u(cobj,kop)}

&CONFLICT`LOCKS [u(cobj,migrate)]=@set u(coi,kls)=HALT NO_COMMAND;@tel u(coi,kls)=u(cobj,oldbox)
