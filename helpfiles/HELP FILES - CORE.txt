@@ COMMUNICATIONS - CHANNELS

+help/addmain Communications/Channels=[u(help)]/HLP`CHANNELS
&HLP`CHANNELS u(help)=PennMUSH has a rich built-in channel system. Channels are 'global' - anything said on them is heard by anyone else on the channel, no matter where they are. This game uses a softcoded add-on called +channel so some commands are hardcoded, others are softcoded. Hardcoded begin with @%R[ansi(hc,See Also:)] [pueblize(help @channel,help @channel)], [pueblize(help @chat,help @chat)]%R[ansi(hc,+Channel Aliases:)] chan, +chan, channel%R%R[ansi(hc,Managing Channels)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+channel)] - List visible channels. Simpler version of [ansi(h,@chan/list)]%R[ansi(h,+channel <channel>)] - Shows info about a channel.%R[ansi(h,@chan/on <channel>)] - Join a channel.%R[ansi(h,@chan/off <channel>)] - leave a channel.%R[ansi(h,@chan/gag \[<channel>\])] - mute a channel. You won't hear messages. This resets on logoff. Leaving <channel> unspecified will mute ALL channels.%R[ansi(h,@chan/ungag \[<channel>\])] - Undoes a gag. Leaving <channel> unspecified unmutes all gagged channels.%R[ansi(h,@chan/who <name>)] - Show who's listening to a channel. Use +channel <name> for channels that use CODENAMES instead.%R[ansi(h,@chan/title <channel>=<title>)] - Puts a title before your name when using a channel. Set to nothing to clear it.%R[ansi(h,+channel/codename <channel>=<codename>)] - Sets your codename on <channel> for those that use it. Shows in place of name. Compatible with @chan/title})]%R%R[ansi(hc,Channel Messages)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+<name> <text>)] - speak on a channel. <name> supports partial matches! As an example: [ansi(h,+p Hi everyone!)] would send to the Public channel.%R[ansi(h,@chat <channel>=<message>)] - Alternate way to send messages to a channel.%R[ansi(h,@chan/recall <name>=<#>)] - Show a channel's recent messages. # is number of lines. If # is 0 you'll see ALL remembered lines - VERY SPAMMY!%R[ansi(h,+chan/recall <channel>)] - Shows messages on <channel> since your last logout, as far back as the system records.})]

+help/addsub Channels/Locks=[u(help)]/HLP`CHANNELS`LOCKS
&HLP`CHANNELS`LOCKS u(help)=The [ansi(hc,+clock)] command handles channel locks.%R[ansi(hc,See Also:)] [pueblize(+help +key,+help +key)], [pueblize(help @clock,help @clock)]%R[ansi(hc,Aliases:)] +chanlock, clock, chanlock%R%R[ansi(hc,Locktypes)]%RLocktypes are covered in [pueblize(help @clock,help @clock)] but for simplicity:%R[align(5 [sub(width(%#),6)],,{[ansi(h,SEE)] - Who can see the channel.%R[ansi(h,JOIN)] - Who can join the channel.%R[ansi(h,SPEAK)] - Who can speak on the channel.%R[ansi(h,HIDE)] - Who can hide from a channel's @chan/who.%R[ansi(h,MOD)] - Who can modify the channel, though not delete it.%R[ansi(h,MUZZLE)] - Special for use with +clock, who can use +muzzle on the channel.})]%R%R[ansi(hc,General Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+clock)] - Shows locks for visible channels.})]%R%R[ansi(hc,Staff Commands)]%RThese commands may only be used by Staff or appointed moderators.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+clock\[/<locktype>\] <channel>\[=<Key Types>\])] - Sets <channel>'s <locktype> to <Key Types> using the +key system. Setting to nothing unlocks.%RLocktype can be SEE, SPEAK, JOIN, HIDE, MOD, or the special MUZZLE. Leaving <locktype> blank sets the SEE, SPEAK, and JOIN locks. Leaving <Key Types> blank unlocks the locktypes.})]

+help/addsub Channels/Moderators=[u(help)]/HLP`CHANNELS`MODERATORS
&HLP`CHANNELS`MODERATORS u(help)=[ansi(hc,See Also:)] [pueblize(help ansi(),help ansi())], [pueblize(help @channel admin,help @channel admin)]%R%R[ansi(hc,Moderator Commands)]%RThese commands may only used by Storytellers or appointed channel moderators.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+muzzle <player>/<channel>=<duration>)] - Restrict <player> from speaking on <channel> for <duration>. Duration uses stringsecs() ([pueblize(help stringsecs(),help stringsecs())]) - Example duration: 5h 30m or 10d 2h.%R[ansi(hw,+muzzle)] - Show active Muzzles on channels you moderate.%R[ansi(h,+unmuzzle <player>/<channel>)] - Releases a Muzzle before it's expired.%RUse the /account switch to muzzle/unmuzzle the player's account, affecting all alts.})]%R%R[ansi(hc,Configuration Commands)]%RThese commands can only be used by Storytellers or appointed channel moderators.%R[align(5 [sub(width(%#),6)],,{[ansi(h,@chan/desc <channel>=<text>)] - Sets a channel's description.%R[ansi(h,+channel/config <channel>/<option>=<value>)] - Changes an option for a Channel. Blank values clear the option. Options include:})][align(10 67,,{[ansi(h,codename)] - Set to 1 means channels will use Codename instead of names and require an /codename to be set to use it.})]

+shelp/addmain Communications/Channels=[u(help)]/SHLP`CHANNELS
&SHLP`CHANNELS u(help)=[ansi(hc,Staff Commands)]%RThese commands may only be used by Staff.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+channel/add <name>\[=<color>\])] - Creates a channel.%R[ansi(h,+channel/del <channel>)] - Deletes a channel.%R[ansi(h,+channel/rename <channel>=<newname>)] - Renames a channel. Change color by renaming to itself. Must color manually, however.%R[ansi(h,+channel/init <channel>)] - Initializes a channel to default settings and creates a mogrifier for it if one does not exist. If an object of a matching name exists in the channel database, links to that instead. This is only necessary for channels not made using +channel/add.%R[ansi(h,+channel/stafftag <channel>)] - Enable your \[Staff\] tag for a channel.})]%R%R[ansi(hc,Mogrifier Commands)]%RThese commands may only be used by Staff, and are for advanced users.%RFor more information, please see [pueblize(help mogrify,help mogrify)]%RThe MOGCONF system uses an individual modifier for each channel, created with /init and placed in the Channel Database object. Each is parented to the channel database object. These commands depend on this arrangement. New mogrifier features can be added by a coder very easily.%R%R[align(5 [sub(width(%#),6)],,{[ansi(h,+channel/mogconf <channel>)] - Displays the mogrifier options for a channel.%R[ansi(h,+channel/mogconf <channel>/<mogrifier>=<list>)] - change the list of mogrifiers in use by the channel.%R[ansi(h,+channel/mogconf <channel>/<mogrifier>/<option>=<value>)] - Changes a Mogrifier option for a Channel. Blank values clear the option.})]


@@ COMMUNICATIONS - BBS

+help/addmain Communications/BBS=[u(help)]/HLP`BBS
&HLP`BBS u(help)=The BBS is a global, multi-threaded board with a rich set of features that grew from a rewrite of Myrddin's classical BBS. It shares almost identical command syntax and appearance.%R%R[ansi(hc,Reading Posts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbread)] - Show all message boards.%R[ansi(h,+bbread <board>)] - Shows a board's messages. <board> can be its name (supports partial matches) or number.%R[ansi(h,+bbread <board>/<list>)] - Read a message. <list> is comma-seperated. Entries can be single numbers, number ranges (ie. 1-6), and u (for 'all unread'), in any combination or order - duplicates will not be shown.%R[ansi(h,+bbnext)] - shows first available unread message.%R[ansi(h,+bbnew)] - Same as +bbnext.%R[ansi(h,+bbcatchup <board>)] - Mark all messages on a board read. +bbcatchup ALL sets ALL boards 'read.'%R[ansi(h,+bbscan)] - Lists unread messages.%R[ansi(h,+bbcheck)] - Enable or disable automatic board checking at connect.})]%R%R[ansi(hc,Writing Posts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbpost <board>/<title>)] - Begins writing a post.%R[ansi(h,+bbwrite <text>)] - Writes to post in progress. [ansi(h,+bb <text>)] also works.%R[ansi(h,+bbproof)] - Show post in progress.%R[ansi(h,+bbedit <type>=<search>/<replace>)] - Edits post in progress. <type> must be TEXT or TITLE. Any text matching <search> will be replaced with <replace>.%R[ansi(h,+bbtoss)] - Erases a post in progress.%R[ansi(h,+bbpost)] - Submits finalized post.%R[ansi(h,+bbpost <board>/<title>=<text>)] - Quick posts to a board.%R[ansi(h,+bbedit <board>/<#>=<search>/<replace>)] - Edits a post on the board. Must be original poster or staff.%R[ansi(h,+bbmove <board>/<#>=<board>)] - Relocates a post. Must be original poster or staff.%R[ansi(h,+bbremove <board>/<list>)] - Removes a list of posts. <list> works like with +bbread. Must be original poster or staff.})]%R%R[ansi(hc,Board Membership)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bblist)] - Shows all visible boards.%R[ansi(h,+bbleave <board>)] - Leave a board. You won't hear notices from it.%R[ansi(h,+bbjoin <board>)] - Re-join a board you've left.})]%R%R[ansi(hc,Misc)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbsearch <board>=<player>)] - Search for posts by a specific person.})]

+help/addsub BBS/Timeouts=[u(help)]/HLP`BBS`TIMEOUTS
&HLP`BBS`TIMEOUTS u(help)=The BBS supports timeouts by global scale, board scale, and individual post scale.%R%R[ansi(hc,Duration Entries)]%R[align(5 [sub(width(%#),6)],,{Anything that requires a <duration> lets you use a stringsecs compatible ([pueblize(help stringsecs,help stringsecs)]) entry. Example: 7w 5m (for 7 weeks, 5 minutes) or 30d (30 days).})]%R%R[ansi(hc,Global Timeouts)]%RThese commands are staff only.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbconfig autotimeout=<boolean>)] - If set 0, timeouts are not processed. If set 1, they are.%R[ansi(h,+bbconfig interval=<duration>)] - How often timeouts are checked for removal. Recommended: 1d or 12h%R[ansi(h,+bbconfig timeout=<duration>)] - Default timeout of all boards if they aren't set individually.})]%R%R[ansi(hc,Board Timeouts)]%RThese commands are staff only.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbconfig <board>/timeout=<duration>)] - Default timeout for posts on <board>. Set 0 for no timeout. Set null to use global default.})]%R%R[ansi(hc,Post Timeouts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbtimeout <board>/<list>=<duration>)] - Change timeout for a list of posts. Players can only change for their own posts, and only less than board's timeout. Admin may change any post's timeout, and set a post static by setting it to 0.})]

+shelp/addmain Communications/BBS=[u(help)]/SHLP`BBS
&SHLP`BBS u(help)=These commands are staff only.%R%R[ansi(hc,Managing Boards)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbnewgroup <name>)] - Creates a new board.%R[ansi(h,+bbcleargroup <board>)] - Deletes a board and all posts.%R[ansi(h,+bborder <new order>)] - Reorders board display order. Must use all board numbers in new order. Example: If you had five boards, and wanted to make the final board the first, you'd use +bborder 5 1 2 3 4%R[ansi(h,+bbconfig)] - Shows values of all Global Config parameters.%R[ansi(h,+bbconfig <parameter>=<value>)] - Set <parameter> to value.%R%R[ansi(h,+bbconfig <board>/<parameter>=<value>)] - Sets a board's <option> to <value>. Entering no <value> clears the option. Available Options:})]%R[align(10 67,,{[ansi(h,anonymous)] - Set to <name> makes all posts appear to be from <name> as long as it's set. Admin still see real poster.%R[ansi(h,timeout)] - See [pueblize(+help BBS/Timeouts,+help BBS/Timeouts)]})]%R%R[ansi(hc,Importing from Myrddin)]%RWIZARD ONLY! These commands could seriously damage the boards if misused or problems occur. It's recommended you make a backup of the game before using these! These commands were designed and tested solely for Myrddin's BBS version 4.0.6 with the yearly patch from MUSHcode.com. Any mods to how posts are STORED (but not displayed) could cause this to fail. You're on your own with these commands.%R%RThese commands will attempt to locate a bbpocket using lsearch(). If a game has multiple bbpockets, set a BBPOCKET attribute on yourself containing its dbref via &BBPOCKET me=<dbref>.%R%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bbimport <oldboard#>)] - Converts a single old Board object's messages and reposts them in order on a new board.%R[ansi(h,+bbtransfer <oldboard#>=<board>)] - Copy messages from an old board to a specific board in order of posting.%R[ansi(h,+bbconvert)] - Converts an entire Myrddin's BBS. Boards are created in order and added to existing list, all posts converted. Note that board locks and settings are NOT converted in the process, and you might end up with boards of the same name when it's done depending on how you started.})]

+shelp/addsub BBS/Locks=[u(help)]/SHLP`BBS`LOCKS
&SHLP`BBS`LOCKS u(help)=BBS boards can be locked so that only certain people may see or post to them. A board set for only ADMIN to write but anyone may read could serve as public announcements. A board set to only one group able to WRITE and READ is a private board. The BBS locks rely on the Key Types made with +key! Only Admin may use these commands!%R[ansi(hc,See Also:)] [pueblize(+help +key,+help +key)]%R%R[ansi(hc,Locktypes)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,write)] - Controls who may post to a board.%R[ansi(h,read)] - Controls who can see a board and read its posts. Boards you cannot see will not be displayed on +bbread!})]%R%R[ansi(hc,Managing BBLocks)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+bblock <board>/<locktype>=<Key Types>)] - Locks Board. <lock> can be READ or WRITE. Examples: +bblock 4/WRITE=ADMIN%R[ansi(h,+bbunlock <board>/<locktype>)] - Unlocks a board.})]

@@ COMMUNICATIONS - @MAIL
+help/addmain Communications/@mail=[u(help)]/HLP`@MAIL
&HLP`@MAIL u(help)=@mail invokes PennMUSH's hardcoded mail system. It's kind of like email but far simpler.%R[ansi(hc,See Also:)] [pueblize(help @mail,help @mail)]%R%R[ansi(hc,Reading Mail)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,@mail)] - list your Inbox.%R[ansi(h,@mail <#>)] - Show a message.})]%R%R[ansi(hc,Sending Mail)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,@mail <recipient>=<subject>/<message>)] - Sends <recipient> a message.%R[ansi(h,@mail/fwd <#>=<recipient>)] - Forward a message to <recipient>})]%R%R[ansi(hc,Deleting Mail)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,@mail/clear <#>)] - Marks a message for deletion. Will be processed on disconnect.%R[ansi(h,@mail/unclear <#>)] - Unmarks a message mistakenly marked for deletion.%R[ansi(h,@mail/purge)] - Force delection of cleared mail NOW instead of at logout.})]%R%RPennMUSH supports a great many features with its @mail system, such as sending to many recipients simultaneously or mass-reading/deleting many messages at once. Check its related hardcoded helpfile at [pueblize(ansi(h,help @mail),help @mail)] for more information!



@@ COMMUNICATIONS - BASIC
+help/addmain Communications/Basic=These are basic communications methods that show only to the local room.%R%R[ansi(hc,Concepts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,speech)] - <speech> is always text. By default, it's considered. 'spoken.' Also note that Speech beginning with a " will always be interpreted as 'spoken,' speech beginning with a : is 'posed' and will show as '<yourname> <speech>', and speech beginning with a ; is 'semiposed' and will show as '<yourname><speech>'. use \%R to make a LINEBREAK and \%T to do a TAB/INDENT.%R[ansi(h,IC)] - In-character. Part of roleplay. The actions of your character.%R[ansi(h,OOC)] - Out of character. Not part of the game's story or actions of your character.})]%R%R[ansi(hc,Basic Commands)]%RThese are IC in most rooms!%R[align(5 [sub(width(%#),6)],,{[ansi(h,say <text>)] - Sends a message to the local room.%R[ansi(h,:<text>)] - Poses/emotes to the room.%R[ansi(h,;<text>)] - Semiposes to the room.%R[ansi(h,@emit <text>)] - Emits text to the room without a beginning name. Mostly used for roleplay.})]%R%R[ansi(hc,OOC Commands)]%RThese are ALWAYS considered Out-of-character communications.%R[align(5 [sub(width(%#),6)],,{[ansi(h,osay <speech>)] - Equivalent to say.%R[ansi(h,ooc <speech>)] - alias of osay%R[ansi(h,+ooc <speech>)] - Alias of Osay.%R[ansi(h,think <text>)] - Only you see this text. A personal 'echo.' Useful for testing formatting and colors, etc.})]%R%RInterested in coloring your text? Check out [pueblize(ansi(h,help ansi\(\)),help ansi\(\))]. You must enclose uses of ansi() in brackets, such as \[ansi()\]. It's also helpful to enclose your actual text in curly braces \{\} if you're going to include commas in it. An example: \[ansi(hr,\{behold, this text is red\})\] results in [ansi(hr,{behold, this text is red})]%R%RLooking for more advanced formatting tricks? You might be interested in [pueblize(ansi(h,help center()),help center())], [pueblize(ansi(h,help ljust()),help ljust())], [pueblize(ansi(h,help rjust()),help rjust())], [pueblize(ansi(h,help space()),help space())], and [pueblize(ansi(h,help repeat()),help repeat())]

@@ COMMUNICATIONS - PAGE
+help/addmain Communications/Page=[u(help)]/HLP`PAGE
&HLP`PAGE u(help)=Page is Penn's built-in private message system.%R[ansi(hc,See Also:)] [pueblize(help page,help page)]%R%R[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,page)] - Show who you last paged.%R[ansi(h,page <recipients>=<speech>)] - Sends a message to <recipients.> Recipients is a space-seperated list of names. Enclose multi-word names in quotations such as "Firstname Lastname".%R[ansi(h,page <speech>)] - Sends a message to the last people you paged. Note that if you include a = it will consider everything before it to be <recipients> like the above command, so you can't use = with this style of paging.[if(isdbref(u(page)),%R[u(u(page)/HLP`REPLY)])]})]

@@ CHARACTER - +ACCOUNT
+help/addmain Character/+account=[u(help)]/HLP`+ACCOUNT
&HLP`+ACCOUNT u(help)=The account system tracks players (and their alts) and their current status in the game (unapproved, approved, builder, admin, etc.).%R%R[ansi(hc,Player Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+account)] - Shows your account if you have one.%R[ansi(h,+account/email <email>)] - Sets your account's email.%R[ansi(h,+account/new)] - For new players. Enter this to start a new account on our game.%R[ansi(h,@password <old>=<new>)] - Change your password. If you forget your password, staff will send a new one to your <email> on request - or if your Guest IP matches your previous logins.%R[ansi(h,+ip)] - Shows your recent logins. Please report any suspicious login attempts to staff immediately!})]

+shelp/addmain Character/+account=[u(help)]/SHLP`+ACCOUNT
&SHLP`+ACCOUNT u(help)=[ansi(hc,Staff Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+account)] - Shows all accounts in the system.%R[ansi(h,+account <#>)] - Shows a specific account. <#> can also be a player if they have an account.%R[ansi(h,+account/bind <player>=<#>)] - Binds <player> to an account, removing them from any other account they're in. <#> can be the name of an character (if they have an account), the word NEW (makes a new account), or the number of an existing account.%R[ansi(h,+account/unbind <player>)] - Removes a player from any account they're in.%R[ansi(h,+account/unbound)] - Displays all unbound characters. Some are best left that way.%R[ansi(h,@newpass *<name>=<newpassword>)] - Set a new password for <name>. Note the asterisk, this is necessary! This command is WIZARD only.%R[ansi(h,+ip <player>)] - Checks a player's logins and anyone with matching IPs.%R[ansi(h,+ip/guests <player>)] - Includes Guests in the IP lookup.%R[ansi(h,+ip/ip <ip>)] - Checks an IP for any matching players. Note that ::ffff: must be prepended to any IPv4 addresses if they're showing up in normal uses of +ip!})]

@@ CHARACTER - +ALTS
+help/addmain Character/+alts=[u(help)]/HLP`+ALTS
&HLP`+ALTS u(help)=The Alts system allows you to specify what characters of yours other players can associate with you.%R%R[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+alts <target>)] - Check someone's alts. Alts are any characters with the same ALT ID. Without a target it will use yourself, showing you what others would see.%R[ansi(h,+alts/list <#>)] or [ansi(h,+alts/list <alt>=<#>)] - Set your current character or an alt of yours to use a specific ALT ID. Characters with the same ALT ID are linked on +alts displays. Alt IDs are numbers.%R%RAll Alts begin with Alt ID 0, which is special. Characters with Alt ID 0 have no alts period.})]

@@ CHARACTER - DESC
+help/addmain Character/+desc=[u(help)]/HLP`@DESC
&HLP`@DESC u(help)=Your character's DESCRIPTION (or @desc) is what others will see when they [ansi(h,look)] at you. These commands are used to manage your DESCRIPTION.%R%R[ansi(hc,See Also:)] [pueblize(help @desc,help @desc)], [pueblize(help look,help look)]%R%R[ansi(hc,Basic Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,@desc me=<text>)] - Sets your current description. Use \%R for linebreaks and \%T for indents.%R[ansi(h,&short-desc me=<text>)] - Sets your short-desc shown in the room display.})]%R%R[ansi(hc,Multidescer Commands)]%RThe Multidescer stores your Descriptions for later retrieval. Handy for maintaining a versatile 'wardrobe' of appearances!%R[ansi(hc,Aliases:)] desc%R[align(5 [sub(width(%#),6)],,{[ansi(h,+desc)] - Shows all your saved descriptions.%R[ansi(h,+desc <name>)] - Sets your desc to a stored one.%R[ansi(h,+desc/noisy <name>)] - Like above but emits to the room. Useful for dramatics!%R[ansi(h,+desc/save <name>)] - Saves your currently worn description to a <name>.%R[ansi(h,+desc/save <name>=<text>)] - Creates a new saved desc with specified text.%R[ansi(h,+desc/rename <name>=<newname>)] - Renames a saved desc.%R[ansi(h,+desc/view <name>)] - Shows you a saved desc.})]

@@ CHARACTEr - @SEX
+help/addmain Character/@sex=[ansi(h,@sex me=<gender>)]%R%RThis command is used to set your gender. Applicable genders are: male, female, plural (some form of hermaphrodite, please be sane with this), and none (if you have no gender).

@@ SHELP - CHARACTER - APPROVAL
+shelp/addmain Character/+approve=[u(help)]/SHLP`+APPROVE
&SHLP`+APPROVE u(help)=[ansi(h,+approve <name>)]%RThis will approve <name>%R%R[ansi(h,+unapprove <name>)]%RThis will unapprove <name>%R%RStaff are always considered 'approved' but may need to have the UNREGISTERED flag removed with @set if they intend to use @powers.

@@ SHELP - ADMINISTRATION
+shelp/addmain Administration/+staff=[u(help)]/SHLP`+STAFF
&SHLP`+STAFF u(help)=[ansi(hc,Concepts)]%RStaff are characters able to use Admin commands.%R%RAnyone whose dbref returns 1 via the isadmin() global function gains staff benefits in softcode - but not necessarily hardcode.%R%RPennMUSH has FOUR Staff tiers.%R%R1. The [ansi(hr,GOD)] (#1) character is a special WIZARD character that nothing can touch or command but itself. It's the only character able to use @config/save and several VERY dangerous features. Additionally, it's the only character able to set or remove the WIZARD flag on other Player Characters. Most game runners use #1's STARTUP to initialize game-specific settings and leave it sitting somewhere safe until needed.%R%R2. [ansi(h,WIZARD)] flagged characters can see and manipulate virtually anything in the game and use many dangerous commands such as @shutdown and @hook and @config/set. Wizards can see and manipulate virtually anything and everything. See [pueblize(help WIZARD,help WIZARD)]%R%R3. [ansi(hy,ROYALTY)] characters have are 'see but not touch' compared to WIZARDS - they enjoy several conveniences in getting around and solving problems but can't impact the game's structure or hardcode. See [pueblize(help ROYALTY,help ROYALTY)]%R%R4. The [ansi(hy,JUDGE)] Flag confers no special PennMUSH powers, but this game's softcode recognizes it as Staff.%R%RLastly, anyone who is on the Staff list can use Staff softcoded commands to edit characters, view sheets, see jobs, and etc. Look into powers ([pueblize(help @power,help @power)]) for giving them special powers without a ROY bit etc.%R%R[ansi(hc,Staff Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+staff)] - By itself, lists staff. Identical to wizlist.%R[ansi(h,+staff/add <name>\[=<order>\])] and [ansi(h,+Staff/rem <name>)] - Adds or Removes people from the Staff list. Note that this does NOT grant or revoke WIZARD, ROYAL, JUDGE, @powers, etc. An optional Order is a number in which the staff member will be listed (see below.)%R[ansi(h,+staff/order <name>=<order>)] - Changes the display order of players on the Staff list. Lower numbers show first. Equal order numbers sort by DBREF.})]%R%R[ansi(hc,Staff List Display)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+staff/on)] - Go 'On duty'%R[ansi(h,+staff/off)] - Go 'off duty'%R[ansi(h,+staff/vac)] - Go 'on vacation.' Use again to come off it.%R[ansi(h,&position me=<text>)] - to set position.%R[ansi(h,&status me=<text>)] - sets Status display.})]

+shelp/addmain Administration/Player Management=[u(help)]/SHLP`PMANAGE
&SHLP`PMANAGE u(help)=WIZARDS have a great deal of hardcoded control over players for security and management. Most of these commands can only be used by them.%R%R[align(5 [sub(width(%#),6)],,{[ansi(h,@pcreate <name>=<password>)] - Creates a player.%R%R[ansi(h,@newpass *<name>=<newpassword>)] - Changes a password. the * is necessary for hardcoded command lookups.%R%R[ansi(h,@sitelock/ban/player <name>)] - Bans a player. Be very careful with this! Check [pueblize(ansi(h,help @sitelock),help @sitelock)] for more info.%R%R[ansi(h,@nuke *<name>)] - Deletes a character AND EVERYTHING THEY OWN, which by default includes EVERYTHING THEY MADE. use [ansi(h,@search *<name>)] to see what that would be before you @nuke! use [ansi(h,@chown <dbref>=me)] to save objects.})]

@@ COMMUNITY - +STAFF

+help/addmain Community/+staff=[u(help)]/HLP`+STAFF
&HLP`+STAFF u(help)=+staff lists the game's administrators and their current status.%R[ansi(hc,See Also:)] [pueblize(help JUDGE,help JUDGE)], [pueblize(help ROYALTY,help ROYALTY)], [pueblize(help WIZARD,help WIZARD)]%R[ansi(hc,Aliases:)] staff, wizlist, +wizlist, admin, +admin%R%R[align(5 [sub(width(%#),6)],,{[ansi(h,+staff)] - Show game's staff members.})]

@@ SHELP - BUILDING
+shelp/addmain Building/+builder=[u(help)]/SHLP`+BUILDER
&SHLP`+BUILDER u(help)=Builder Characters are special characters used to enlarge the grid. They may use @dig, @open, @link, and similar commands freely.%R%R[ansi(hc,Builder Powers)]%RThese are granted to a builder by the +builder command:%R[align(5 [sub(width(%#),6)],,{[ansi(h,builder)] - enables the @dig, @open, @link, and similar commands.%R[ansi(h,link_anywhere\, open_anywhere)] - allows builders to manage exit destinations and link them to the grid.%R[ansi(h,no_quota)] - Builders may create unlimited objects.%R[ansi(h,no_pay)] - Builders can create objects without needing the hardcoded CPU currency.%R[ansi(h,pick_dbref)] - Builders may recycle old DBREF numbers for new objects.})]%R%RWIZARDS enjoy these powers automatically except for no_pay which is rarely needed except for code-heavy projects.%R%R[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+builder)] - Lists all current Builder characters by DBREF, name, granted powers, and number of objects owned.%R[ansi(h,+builder <player>)] - Shows everything <player> has made - whether they are or are not a Builder.%R[ansi(h,+builder/add <name>)] - Promotes a PC to Builder status.%R[ansi(h,+builder/rem <name>)] - Revokes a Builder's priveleges.})]%R%RNote that rooms, exits, objects, and other things created by (owned by) a character are DESTROYED if that character is deleted. For this reason it is best to simply @newpass unused builders, or alternatively @chown their objects to a buildstaffer character or similar 'safe' location. @chowning can be done easily and conveniently using the following method from a WIZARD character meant to hold the code:%R%R[ansi(h,lit(@dolist lsearch(*buildername)=@chown/preserve %i0=me))]%R%RIf the player is suspected of shenanigans, use the following instead:%R[ansi(h,lit(@dolist lsearch(*buildername)={@halt %i0;@chown %i0=me;@wipe %i0=STARTUP;@wipe %i0=ACONNECT;@set %i0=NO_COMMAND;@restart %i0}))]

+shelp/addmain Building/Room Features=[u(help)]/SHLP`ROOMFEATURES
&SHLP`ROOMFEATURES u(help)=Exits with an alias that consists of part of its name will have that part displayed in colored <>. For example, making an exit named North with the alias n will result in a <N>orth. The alias shortcut color is stored in the attribute VAR`ALIASCOLOR on the ancestor room. Setting one on a local room overrides it.%R%RExits sort and display alphabetically. They can have an 'ORDER' attribute that has a number in it which overrides this sorting based on the number, however if ANY Exit in the room has such an attribute then ALL must have it.

@@ COMMUNITY - GROUPS
+help/addmain Community/Groups=[u(help)]/HLP`GROUPS
&HLP`GROUPS u(help)=The Group System provides organization for players, usually for IC factions, etc. Think of it like an MMORPG Guild system. Staff are considered members of all groups and can use any group resource.%R%R[ansi(hc,Concepts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,rank)] - Rank 1 is a group leader, with all numerically higher values being progressively lower in rank. This way the rank structure can extend as far as a group leader wishes. Many commands can be restricted by rank. Staff are considered Rank 0 for code purposes.%R[ansi(h,titles)] - titles represent codenames, aliases, etc, or humorous notations, and display on the group's +gwho and channels.%R[ansi(h,focus)] - While you can be in many groups at once, group commands can only affect one at a time. The group you are FOCUSED on is which one they will affect.})]%R%R[ansi(hc,Basic Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+groups)] - List all groups in the game.%R[ansi(h,+group <group>)] - Show info about a group. <group> can be its name or alias. Also changes FOCUS if you're a group member.%R[ansi(h,+gwho \[<group>\])] - Check online players of the focused group, or a targeted group. Doesn't change FOCUS.%R[ansi(h,+gfocus <group>)] - Changes group focus if a member.})]

+shelp/addmain Community/Groups=[u(help)]/SHLP`GROUPS
&SHLP`GROUPS u(help)=[ansi(hc,Staff Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gcreate <groupname>\[=<player>\])] - This command creates a new Group. If a given player exists, they will be made Group Leader (rank 1.) If they are not found, the group will still be created.%R[ansi(h,+grename <newname>)] - Renames a Group.%R[ansi(h,+gdesc <description)] - Set a group's description.%R[ansi(h,+gadd <name>)] - Adds a player to the group, skipping the invite process. Can be granted to players via the special ADD Permission.%R[ansi(h,+gadd <player>=<group>)] - Like above, but adds to specific group without changing focus.%R[ansi(h,+gdisband <groupname>)] - Must be focused to the group AND typing its name. Only a WIZ can disband Major groups.})]%R%RAs a failsafe, disbanded groups are not deleted, only renamed and their link to the Group Parent object via @parent broken. A WIZ must finalize the deletion. Player settings will not be lost unless the group object is deleted. Disbanding can be undone by fixing the @name and @parent'ing the group object back to [u(gop)].

+help/addsub Groups/Membership=[u(help)]/HLP`GROUPS`MEMBERSHIP
&HLP`GROUPS`MEMBERSHIP u(help)=[ansi(hc,Inviting Members)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+ginvite)] - Show all extended invitations.%R[ansi(h,+ginvite <player>)] - Send an invite.%R[ansi(h,+guninvite <player>)] - Revoke a pending invitation.})]%R%R[ansi(hc,Joining Groups)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+ginvites)] - Shows all groups who've invited you to join.%R[ansi(h,+gjoin <group>)] - Accepts an offered invite.%R[ansi(h,+grefuse <group>)] - Rejects an offered invite.})]%R%R[ansi(hc,Removing Members)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gleave)] - Leaves a group.%R[ansi(h,+gkick <player>)] - Removes <player> from group. Requires MANAGE permission.})]

+help/addsub Groups/Administration=[u(help)]/HLP`GROUPS`ADMINISTRATION
&HLP`GROUPS`ADMINISTRATION u(help)=[ansi(hc,Leader Commands)]%ROnly the group leader is allowed to alter the rank structure and associated permissions.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gaddrank <#>=<rankname>)] - Create a new rank.%R[ansi(h,+gdelrank <#>)] - Remove a rank, if no players in it.%R[ansi(h,+grenrank <#>=<newname>)] - Renames a rank.%R[ansi(h,+gaddperm <#>=<perm list>)] - Adds <perm list> to a rank's Permissions. ALL may be targeted too!%R[ansi(h,+gdelperm <#>=<perm list>)] - Removes <perm list> from a rank's permissions.%R[ansi(h,+gaddpriv <player>=<perm list>)] - Extend a Permission to a specific player.%R[ansi(h,+gdelpriv <player>=<perm list>)] - Revoke a Permission granted to a player.%R[ansi(h,+gprivlist)] - View all priveleges granted to specific group members.})]%R%R[ansi(hc,Priveleged Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+grank <player>=<#>)] - Alter a player's rank to <#>. Can only be used on subordinates, and not to your own rank or better.%R[ansi(h,+gtitle <player>=<title>)] - Set a player's title. Setting to nothing clears it. Can only re-title subordinates.%R[ansi(h,+glog <#>)] - Looks back <#> amount of events and displays related logs.})]%R%R[ansi(hc,Member Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+grank)] - Display rank structure and permissions granted.})]%R%R[ansi(hc,Permissions)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,moderate)] - Passes the group's /moderate lock for use with +key. May use +gmuzzle and edit board posts on the +gbs.%R[ansi(h,manage)] - may manage invites, kick players, and alter player rank. Also grants divisional alteration powers and access to +glog.%R[ansi(h,gbadmin)] - may use +gb admin commands such as +gbnewgroup, +gblock, and +gbcleargroup.%R[ansi(h,gemit)] - May use +gemit.%R[ansi(h,ic)] and [ansi(h,ooc)] - grants access to the IC and OOC group channels. Also determines who passes the /ic and /ooc locks for +key.%R[ansi(h,titleself)] - May use +gtitle... but only on yourself.})]

+help/addsub Groups/Divisions=[u(help)]/HLP`GROUPS`DIVISIONS
&HLP`GROUPS`DIVISIONS u(help)=Divisions are groups within a group. Codedly they are simply extra labels to help with organizing members. Divisions have no extra permissions, and ranks are completely for show.%R%R[ansi(hc,Administrating Divisions)]%RThis requires the Manage permission.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+dcreate <name>)] - Creates a new division.%R[ansi(h,+ddisband <division name or #>)] - Delete a division.%R[ansi(h,+daddrank <#>=<name>)] - Adds a new rank to a Division.%R[ansi(h,+ddelrank <#>)] - Removes a rank if unused.%R[ansi(h,+drenrank <#>=<newname>)] - Renames a division rank.%R[ansi(h,+dassign <player>=<division name or #>)] - Add a player to <Division.>%R[ansi(h,+dkick <player>=<division name or #>)] - Remove a player from <division.>%R[ansi(h,+drank <division>/<player>=<#>)] - Sets a player's rank in <division.>})]%R%R[ansi(hc,Member Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+divisions)] - Show all Divisions.%R[ansi(h,+drank <division>)] - Display Rank information for <division>.})]

+help/addsub Groups/Settings=[u(help)]/HLP`GROUPS`SETTINGS
&HLP`GROUPS`SETTINGS u(help)=[ansi(hc,Group Settings)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,Channelrank)] - <bool> - Display rank tags in group channels.%R[ansi(h,Color)] - <colorcode> - What color the group channels and group name will be, unless personally overriden.%R[ansi(h,Command)] - <rank> - The tier at which Divisional display Type will consider someone part of the command staff.%R[ansi(h,IC)] - <bool> - enable or disable the IC/RADIO channel.%R[ansi(h,OOC)] - <bool> - enable or disable the OOC channel.%R[ansi(h,Major)] - <bool> - display group in the Major category in +groups.%R[ansi(h,Type)] - <typeword> - The group display uses special rules governed by <typeword>. If set to nothing, or an invalid typeword, uses default display. See further on.%R[ansi(h,Startrank)] - <rank> - the Rank at which a newly added player begins. Defaults to 4 if this is ever rendered invalid.%R[ansi(h,Sysalert)] - <rank> - Anyone at or above this rank will receive group system alerts regarding major events.%R%ROnly the group leader may alter these using:%R[ansi(h,+gset <setting>=<value>)]%R'bool' refers to a true false value. 0 = false, 1 = true.%RTYPE and MAJOR may only be changed by staff.})]%R%R[ansi(hc,Display Types)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,FACTION)] - Alters display for large and officialized factions. +group <name> and +gwho will use a variable width roster showing only name, rank number, and the first found of either <title> or <rankname>, such as 1-Field Marshal (or if a title was set, 1-Grand Poobah).%R[ansi(h,DIVISIONAL)] - For well-organized groups that make use of divisions a lot. +group <name> and +gwho become a fusion of traditional +groups display and +divisions, showing first anyone who is at or over COMMAND rank, followed by every division, then anyone who isn't in a division. The R# column is <grouprank>-<divrank>.})]

+help/addsub Groups/Options=[u(help)]/HLP`GROUPS`OPTIONS
&HLP`GROUPS`OPTIONS u(help)=[ansi(hc,Personal Options)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,ALLIC)] - <bool> - Disable ALL IC channels. You will not hear any group messages.%R[ansi(h,ALLOOC)] - <bool> - Disable ALL group OOC channels. You will not hear any group messages.%R[ansi(h,ALLGB)] - <bool> - Disable ALL group board checking with +bbscan.%R[ansi(h,IC)] - <bool> - Reception of the IC/RADIO channels.%R[ansi(h,OOC)] - <bool> - Reception of the OOC radio channels and SYS alerts.%R[ansi(h,GB)] - <bool> - Whether you will see the group's boards show up on +bbscan.%RColor of a group channel may be changed via +color. +help +color%R%RTo change an option:%R[ansi(h,+goption <option>=<value>)]%R'bool' refers to a true false value. 0 = false, 1 = true.})]

+help/addsub Groups/Channels=[u(help)]/HLP`GROUPS`CHANNELS
&HLP`GROUPS`CHANNELS u(help)=Groups have both IC and OOC softcoded channels that work much like normal @channels.%R%RNote: +gradio is an alias for +gic%R%R[ansi(hc,Basic Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gic/on)] - Joins the group's IC channel.%R[ansi(h,+gic/off)] - Leaves group's IC channel.%R[ansi(h,+gooc/on)] - Joins the group's OOC channel.%R[ansi(h,+gooc/off)] - Leaves the group's OOC channel.%R[ansi(h,+gic/gag)] - Stop receiving a group's messages. Resets on logout. Reversed with /ungag%R[ansi(h,+gooc/gag)] - Like above.})]%R%R[ansi(hc,Moderator Commands)]%RMuzzled players cannot use a group's channels for a set duration.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gmuzzle)] - Show all muzzled players.%R[ansi(h,+gmuzzle <player>/<ic/ooc>=<duration>)] - Muzzles a player from group channels. <duration> must be in stringsecs() compatible format - [pueblize(help stringsecs(),help stringsecs())]%R[ansi(h,+gunmuzzle <player>/<ic/ooc>)] - Removes an existing muzzle.})]%R%R[ansi(hc,Sending Messages)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gemit <ic/ooc>=<message>)] - Send a sourceless message on the channel. GEMIT permission required.%R[ansi(h,+gooc <speech>)] - speaks over the group's OOC channel.%R[ansi(h,+gic <speech>)] - Speaks over the group's IC channel.%R[ansi(h,+gradio <speech>)] - Alternate for +gic%R%R[ansi(h,=<group> <speech>)] - Shortcut for a specific group's OOC channels.%R[ansi(h,-<group> <speech>)] - Shortcut for a group's IC channels.%R%R<group> must be a single word in this usage. The command performs partial matching based on what groups you are a member of and haven't disabled reception for. You may also use the /gag, /ungag, /on, and /off switches with it. Extra filtering is not performed if using a switch!%R%R[ansi(h,+grecall <ic/ooc>=<#>)] - recall a number of lines of previous chat, similar to @chan/recall.})]

+help/addsub Groups/Boards=[u(help)]/HLP`GROUPS`BOARDS
&HLP`GROUPS`BOARDS u(help)=Each Group has its own set of Boards that use much of the same conventions as the Global BBS. The commands and features are completely identical, with one difference: they all begin with [ansi(h,+gb)] instead of [ansi(h,+bb)]!%R[ansi(hc,See Also:)] [pueblize(+help BBS,+help BBS)]%R%R[ansi(hc,Reading Boards)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gbread <#>\[/<#>\])] - In group mode, takes an optional =<groupname> to specify which group. otherwise, uses current focus.%R[ansi(h,+gbscan <groupname>)] - Like +bbscan, but can be pointed at a specific group. otherwise, uses focus.})]%R%R[ansi(hc,Managing Boards)]%RYou must have the GBADMIN Permission to use these commands. Anyone with it passes all group board locks and can use +gbremove, +gbedit, etc on any post.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gbnewgroup <name>)] - Creates a new board.%R[ansi(h,+gbcleargroup <board>)] - Deletes a board and all posts.%R[ansi(h,+gborder <new order>)] - Reorders board display order. Must use all board numbers in new order. Example: If you had five boards, and wanted to make the final board the first, you'd use +gborder 5 1 2 3 4%R[ansi(h,+gbconfig <board>/<parameter>=<value>)] - Sets a board's <option> to <value>. Entering no <value> clears the option. Available Options:})]%R[align(10 67,,{[ansi(h,anonymous)] - Set to <name> makes all posts appear to be from <name> as long as it's set. GBADMIN still see real poster.%R[ansi(h,timeout)] - See [pueblize(+help BBS/Timeouts,+help BBS/Timeouts)]})]%R%R[ansi(hc,Securing Boards)]%RGroup Boards can be locked so that only certain people of a certain rank or better may see or post to them.%R%R[ansi(hc,Locktypes)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,write)] - Controls who may post to a board.%R[ansi(h,read)] - Controls who can see a board and read its posts. Boards you cannot see will not be displayed on +gbread!})]%R%R[ansi(hc,Managing GBLocks)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+gblock <board>/<locktype>=<rank>)] - Locks Board. Examples: +gblock 4/WRITE=1%R[ansi(h,+gbunlock <board>/<locktype>)] - Unlocks a board.})]

@@ CODE OBJECT INDEX - COI
+shelp/addmain Administration/Softcode=[u(help)]/SHLP`SOFTCODE
&SHLP`SOFTCODE u(help)=*** CODE INDEXING ***%RAll Code Objects are stored in the master room. (help master room)%R%RMost works off of the Code Object Indexer, or COI. This object uses the locate() function to find the other code objects. Almost all other code objects such as that handling accounts and the help system have it as a parent (help @parent) so they can reference and pull code from one another.%R%R*** GOD PLAYER ***%RThe #1 object (God) is also parented to the COI, and is responsible for searching every object referenced on the COI for attributes matching the GFN`* pattern. These are global functions which will always be added!%R%R*** ATTRIBUTE NAMING CONVENTIONS ***%RVAR - Variable. Often used for options like changing settings.%R%RPOT - used exclusively by the Pose Order Tracker to store poses and settings on rooms.%R%RFUN - local functions to be used with u() or similar.%R%RCMD - Softcoded command attributes.%R%RINC - Extensions of softcoded command used for doing most of the code legwork, grabbed using @include.%R%RTRG - Code sections meant to be used with @trigger. Most often these are for automated cleanups started by an object's STARTUP, or similar.%R%R*** EVENT HANDLER ***%RThe Event Handler (help event handler) hunts down all attribute leafs of that type of event and @triggers them, using the list of objects on the COI. For instance, it discovers the attribute PLAYER`CONNECT`WATCH on the Watch System Object <WSO> and triggers it, and the SOCKET`LOGINFAIL`IPLOG attribute on the Account System Object.%R%R*** DATA STORAGE ***%RAll code uses the D attribute - marked WIZARD and MORTAL_DARK - to store player data such as INFO files and stats.

@@ NAVIGATION - +RECALL
+help/addmain Navigation/Grid=[u(help)]/HLP`GRID
&HLP`GRID u(help)=The Grid system is a series of commands that make it easy to navigate the IC rooms, or 'Grid.'%R%R[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,ooc)] - head to the OOC meeting grounds.%r[ansi(h,ic)] - Return to your last IC location, or the IC nexus if that fails.%R[ansi(h,+nexus)] - Teleport to the IC Nexus.%R[ansi(h,+roomlist)] - List all IC rooms in the game that you can +port to.%R[ansi(h,+roomlist <search>)] - List all IC rooms partially matching the entered text.%R[ansi(h,+port <name or dbref>)] - Teleport to a room.%R[ansi(h,+sethome)] - Set the current location as your 'home.'%R[ansi(h,+gohome)] or [ansi(h,home)] - Teleport to your home.})]

@@ TECHNICAL - +COLOR
+help/addmain Technical/+color=[u(help)]/HLP`+COLOR
&HLP`+COLOR u(help)=The [ansi(hc,+color)] system allows players to set their own private color scheme for many features on this game, such as the BBS display or custom colors that they see in place of defaults for many things.%R[ansi(hc,See Also:)] [pueblize(help ansi(),help ansi())]%R%R[ansi(hc,Manging Color Schemes)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+color)] - List all Available scheme categories.%R[ansi(h,+color <category>)] - List all options within a category and your current settings. Options in parentheses are inherited from account. +color ALL lists EVERYTHING.%R[ansi(h,+color <category>/<option>=<code>)] - Set a new color setting. Use /account switch to set to your account instead.%R[ansi(h,+color <category>/<option>=)] - Clear a color option, restoring defaults. Accepts the /account switch!%R[ansi(h,+color/group <group>/<option>=<color>)] - Fine control of group channel colors. Works just like normal +color. Use /gaccount switch to account set, and set <color> empty to clear.%R[ansi(h,+color/off <category>)] - disable custom colors for a category. reverse with /on.%R[ansi(h,+color/names <options>)] - Toggle use of coloring names in a code system. Options: [itemize(get(u(cco)/VAR`NAMES),|,and,\,)]})]%R%R[ansi(hc,Miscellaneous)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+color/inherit)] - Toggle whether your character inherits color options from your account or not.%R[ansi(h,+colordemo)] - Shows all color names for 256-bit ANSI features. The /long switch is spammy but has more options. Also responds to colors.%R[ansi(h,+color/reset)] - Restores all of your Color settings to default.%r[ansi(h,+color/accreset)] - Resets the color settings on your account.})]%R%RIn order to see Colors you must have the ANSI, COLOR, and ideally COLOR256 (also known as XTERM256) flags enabled on your character. Most, but not all clients support 256-bit colors. To set these flags if they are not already set:%R%R[pueblize(@set me=ANSI COLOR COLOR256,@set me=ANSI COLOR COLOR256)]

@@ TECHNICAL - +KEY
+help/addmain Technical/+key=[u(help)]/HLP`+KEY
&HLP`+KEY u(help)=The [ansi(hc,+key)] System builds on PennMUSH's built-in @locks by creating 'Key Types' - simple names that can represent groups of people, or specified circumstances (such as races, approval status, group membership, etc) in which someone would pass a lock. Note: Staff 'pass' all Key Types and can do whatever they need with them (they are considered owners, handlers, etc.).%R[ansi(hc,See Also:)] [pueblize(help @lock,help @lock)], [pueblize(help locktypes,help locktypes)]%R%R[ansi(hc,Concepts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,Key Types)] - Key Types, referred to as <keys> in the help below, must be short words such as WIZARD or VAMPIRE or UNION. Each can have many options set to determine who can use and administrate it.%R[ansi(h,Owner)] - The OWNER of a Key Type has full control over its configuration.%R[ansi(h,Handler)] - Handlers are players approved to assign Holdership of a Key. They also pass the Key themselves.%R[ansi(h,Holders)] - Key Holders are individuals approved to 'pass' a key. This is in ADDITION to anyone who passes config options.})]%R%REach Key Type is actually three separate key names. When you +key/make Whatever, this creates the Whatever group, but when using +lock or similar commands you may also use WHATEVER-HANDLER and WHATEVER-OWNER for finer control. Note that anyone 'higher up' the authority check passes lower ones. OWNERS pass WHATEVER-HANDLER for instance. HANDLERS pass the basic WHATEVER.%R%R[ansi(hc,Viewing Key Types)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+key)] - List all Key Types.%R[ansi(h,+key <key>)] - Show info about a Key Type.})]%R%R[ansi(hc,Managing Key Types)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+key/make <name>)] - Creates a new Key Type owned by you.%R[ansi(h,+key/chown <key type>=<player>)] - Changes ownership of a Key Type. Owner only.%R[ansi(h,+key/auth <key>=<player>)] - Authorize a player to control key holders. Owner only.%R[ansi(h,+key/revoke <key>=<name>)] - Revokes authorization for controlling key holders. Owner only.%R[ansi(h,+key/add <key>=<name>)] - Add player to the Holders list. Handler/Owner only.%R[ansi(h,+key/rem <key>=<name>)] - Remove player from Holders list. Handler/Owner only.})]%R%R[ansi(hc,Locks)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+lock\[/<locktype>\] <target>=<list of key names>)] - Sets a Lock via @lock on <target> to use the specified Key types. See [pueblize(help locktypes,help locktypes)] for more information. User: locks are acceptable. If a <locktype> is not specified it will set a Basic lock. As an example: +lock Exit=WEREWOLF VAMPIRE MAGE would make the exit passable by anyone with a WEREWOLF, VAMPIRE, or MAGE key. Locks set to nothing are unlocked.})]

+help/addsub +key/Config=[u(help)]/HLP`+KEY`CONFIG
&HLP`+KEY`CONFIG u(help)=[ansi(hc,Configuring Keys)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+key/config <key>/<option>=<value>)] - Changes an option for a Key Type. Owner Only. Blank values clear the option. Options include:})]%R[align(10 67,,{[ansi(h,builder)] - Set to 1 means Builders always pass this lock.%R[ansi(h,approved)] - Set to 1 means you must be approved to MAYBE pass the lock (you must still pass one of the other checks.) Note: Admin and Builders are always considered 'approved for play'.%R[ansi(h,SPLAT)] - Set this to a list of Splat names (Exalted games only) and anyone who is one of them will pass the lock.%R[ansi(h,SPHERE)] - Set this to a list of Sphere names (WoD games only) and anyone who is one of them will pass the lock.%R[ansi(h,GROUP)] - Set to a list of group names (entered by a space seperated list of group aliases) and anyone who's a member of any group and passes their LOCK auth will pass the lock.%R[ansi(h,KEY)] - Set to a list of other key names, anyone who passes one will pass the lock.%R[ansi(h,CATEGORY)] - Set to a simple category name to group the Key under for display purposes.})]

@@ TECHNICAL - Extra
+help/addmain Technical/Pueblo=[u(help)]/HLP`PUEBLO
&HLP`PUEBLO u(help)=Pueblo is an extra feature that lets Pueblo-compatible clients support special text features. Namely, clicking on text that shows up on your screen.%R%R[mudname()] is a Pueblo-enhanced world. While it is hardly necessary, it is nevertheless handy.%R%RPueblo-enabled clients are rare, however. For Windows, there is MUSHclient and the old original Pueblo.%R%RMUSHclient enables Pueblo by default. It can be turned off or otherwise modified by going to your client's configuration. In MUSHclient, that's Game > Configure > MXP/Pueblo (also accessible via ctrl+alt+U).%R%RWe highly recommend turning off local echo text and custom link colors as we use our own colors and otherwise all you will see is hyperlink blue.%R%RPueblo is detected and enabled upon connection to the MUSH. If you change whether it is on or off in your client, you will not see the results until you disconnect and reconnect that character.

+help/addmain Technical/Room Objects=[u(help)]/HLP`ROOMOBJ
&HLP`ROOMOBJ u(help)=Players are allowed - and encouraged - to create their own rooms. Most rooms on the game were created using @dig, making them full-fledged Rooms. @dig however, requires admin powers to use, because of how easily it can mess up the game's rooms if misused. However, there is another way to create what are essentially 'rooms.'%R%RPlayers may make Objects, place these in a room, give them a room description and allow others to enter them. They work in almost all ways like a true Room, save that they can be personalized, restricted, and so on. The following is a basic tutorial on how these work.%R%RCONCEPT EXPLANATION: Targeting objects and DBrefs. All things - rooms, players, exits, and so on - have a DBREF, or 'Database Reference.' It is like an ID code. When you use commands such as 'look <name>' PennMUSH checks to see if there is anything of that name in the same location as you. You could, in theory, also use look #800 to look at object #800. Such things are interchangeable for code purposes. Some words can be used to substitute things-- such as 'me' or 'here.' 'me' will always be YOUR dbref, which is why &short-desc me=<your short desc> works. here will refer to your current location. For the purposes of this tutorial, <target> will refer to the object's name or DBREF (if you are outside it or have it in your inventory) or using here (if you are inside it.)%R%R[ansi(h,@create <name>)] - this will make an object and place it in your inventory.%R[ansi(h,@nuke <name or DBREF>)] - this will destroy an object. Using just once will mark it for destruction, which can be undone with [ansi(h,@undestroy <name or dbref>)] if it is typed quickly. Using twice will annihilate object. This cannot be undone.%R%R[ansi(h,@set <target>=ENTER_OK)] - this will set a flag on the object that will allow other people to enter it. Using !ENTER_OK instead will remove the flag. (You may always enter your own objects.)%R%R[ansi(h,inventory)] - this will show what's in your inventory.%R[ansi(h,drop <target>)] - this will remove an object from your inventory and place it in the room.%R[ansi(h,get <target>)] - this will retrieve an object, if you have permission.%R[ansi(h,@lock/Basic <target>=me)] - this will prevent other players from picking up and walking off with your object.%R[ansi(h,\(\IMPORTANT: see +help +key for more advanced tricks!))]%R%R[ansi(h,@desc <target>=<text here>)] - the same as @describe'ing yourself. This will be what others see if they look at or are inside the object. You may also use @idesc for 'internal description,' in which case @desc will be seen by those looking at the object, rather than being both the external description and a room description.%R%R[ansi(h,&IC <target>=1)] - this will enable +pot to work in an object.%R%RYou may only have a few objects in existence at once. If you have lost track of them:%R[ansi(h,@search)] - this will show all objects you own and their DBREFs.%R[ansi(h,@tel <target>=me)] - this will retrieve an object.%R%RUsing them:%R[ansi(h,enter <target>)] - this will enter an object as though it were a room.%R[ansi(h,leave <target>)] - This will leave the object.

+help/addmain Technical/Connection Troubles=[u(help)]/HLP`CONNECTIONTROUBLES
&HLP`CONNECTIONTROUBLES u(help)=Every now and then, someone joins the game who might have problems staying connected. The following advice will help you if that problem matches this symptom: you type nothing for a minute or two, and the game stops sending you text-- when you type something, it suddenly says you're disconnected.%r%rThis is a problem typical of those behind NAT (Network Address Translation)... in other words, routers and large networks.%r%rTo solve this problem:%r%r[ansi(h,@set me=KEEPALIVE)]%rThis will tell the game to work harder to keep the connection to your character open. There is also the option of setting a timer in your client (check your client's Help files for instructions on doing so) that sends IDLE (all capitals! iDLE or idle will not work) to the game every minute or two.%r%rThis will only solve problems related to a lack of activity causing the hardware to invisibly disconnect you. There are some problems it cannot solve.

+help/addmain Technical/+charset=[u(help)]/HLP`+CHARSET
&HLP`+CHARSET u(help)=[ansi(hc,See Also:)] [pueblize(help chr(),help chr())]%R%R[ansi(h,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+charset)] - Display most special characters the game supports.})]

+help/addmain Technical/QUIT=[u(help)]/HLP`QUIT
&HLP`QUIT u(help)=[ansi(hc,Aliases:)] logoff, logout%R%R[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,QUIT)] - Disconnect safely from the game.})]%R%RDon't worry, PennMUSH saves are independent of safe logoffs. This just doesn't leave a ghost connection hanging.

@@ ROLEPLAYING - +flip
+help/addmain Roleplaying/+flip=[u(help)]/HLP`+FLIP
&HLP`+FLIP u(help)=[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+flip)] - Flip a coin!})]

+help/addmain Roleplaying/+summary=Usage: +summary <message>%R%RDisplays <message> in highlights along with your name and a note that it's a summary. This is to summarize long poses for use by both your fellow players as well as your game master (if the scene has a game master), in order to better help have an idea of what's going on. It's use in large scenes is STRONGLY encouraged. It's also used to keep track of who's posed in a given pose round, if a scene is using pose rounds.%R%RNote that <message> is meant to be short and very to the point. It shouldn't be more than two or three lines. The command will refuse to display messages that are over a certain limit.

+help/addmain Roleplaying/+done=Usage: +done%R%RDisplays a highlighted message that you are 'done'. This is usually used to keep track of who's posed in large scenes, for the convenience of the game master (if applicable) as well as other players. This is especially useful when pose rounds are being used.

@@ COMMUNICATIONS - +beep
+help/addmain Communications/+beep=[u(help)]/HLP`+BEEP
&HLP`+BEEP u(help)=[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+beep <player>)] - (Hopefully) makes a noise the other player can hear to try and get their attention. Use with moderation as this can be annoying - beeping someone more than once in a while could be considered harassment. You have been warned!%R%RNot all clients can make beeps though, and some players might disable it.})]