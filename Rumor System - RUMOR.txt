@@ DEPENDENCIES - CORE

@switch/inline isdbref(u(rumor))=0,{@teleport create(Rumor System <RUMOR>)=config(master_room)}
&rumor u(coi)=locate(config(master_room),Rumor System <RUMOR>,TXxi)
@parent u(rumor)=u(coi)
@set u(rumor)=WIZARD SAFE !NO_COMMAND

@switch/inline isdbref(u(rumordb))=0,{@teleport create(Rumor System Database <RUMORDB>)=u(rumor)}
&rumordb u(coi)=locate(u(rumor),Rumor System Database <RUMORDB>,TXxi)
@parent u(rumordb)=u(coi)
@set u(rumordb)=WIZARD SAFE
@lock/user:READ u(rumordb)=#TRUE
@lset u(rumordb)/READ=!no_inherit
@lock/user:POST u(rumordb)=#TRUE
@lset u(rumordb)/POST=!no_inherit
@lock/user:ADMIN u(rumordb)=@[u(sgo)]/Command
@lset u(rumordb)/ADMIN=!no_inherit

&CMD`+RUMOR u(rumor)=$^(?s)(?\:\+)?(?\:rumor|rumour)(?\:/(\S+))?(?\: +(.+?))?(?\:/(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%1,setunion(get(u(rumor)/VAR`PLAYFLAGS),if(isadmin(%#),get(u(rumor)/VAR`ADMINFLAGS)),|,|),|,music,switch,switch;@include u(rumor)/INC`[strfirstof(%q<switch>,MAIN)]=%2,%3,%4
@set u(rumor)/CMD`+RUMOR=regexp

&VAR`ADMINFLAGS u(rumor)=MAKECIRCLE|DELCIRCLE|RENCIRCLE|LOCKCIRCLE|UNLOCKCIRCLE|DESCCIRCLE
&VAR`PLAYFLAGS u(rumor)=NEW|QUASH|PROMOTE|REMRUMOR|CIRCLES

&RFN`HEADER u(RUMOR)=header(%0,,RUMOR`BORDER,RUMOR`BORDERDOT,RUMOR`BORDERTEXT)
&RFN`SUBHEADER u(RUMOR)=subheader(%0,,RUMOR`BORDER,RUMOR`BORDERDOT,RUMOR`BORDERTEXT)
&RFN`SEPARATOR u(RUMOR)=separator(%0,,RUMOR`BORDER,RUMOR`BORDERDOT,RUMOR`BORDERTEXT)
&RFN`MSGHEAD u(RUMOR)=msghead(v(VAR`MSGHEAD))
&RFN`ROOMMSGHEAD u(RUMOR)=msgheadroom(v(VAR`MSGHEAD))
&VAR`MSGHEAD u(RUMOR)=RUMOR

&INC`CIRCLENAMECHECK u(rumor)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) You must enter the new category name!;@assert cand(valid(name,%0),lte(strlen(%0),14))=@nspemit %#=u(RFN`MSGHEAD) '%0' is not a valid category name. Categories must be valid object names and be 14 characters or less.;@break locate(u(rumor),%0,TXxi)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Circle already exists.

&INC`MAKECIRCLE u(rumor)=@assert hasflag(%#,WIZARD)=@nspemit %#=u(RFN`MSGHEAD) Permission Denied: Wizard only.;@include u(rumor)/INC`CIRCLENAMECHECK=%0;@include u(rumor)/INC`CATEXIST=%0;@tel setr(cat,create(%0))=u(rumordb);@set %q<cat>=WIZARD SAFE;@parent %q<cat>=u(rumordb);@nspemit %#=u(RFN`MSGHEAD) Circle '%0' created! Make sure to use +rumor/lockcircle to restrict it!;@include u(ccs)/INC`CMSG=Circle '%0' created!

&INC`DELCIRCLE u(rumor)=@assert hasflag(%#,WIZARD)=@nspemit %#=u(RFN`MSGHEAD) Permission Denied: Wizard only.;@include u(rumor)/INC`FINDCIRCLE=%0;@include u(ccs)/INC`VERIFY={ansi(hr,WARNING:) This will delete Rumor Circle '%q<catname>'. All Rumors in that category will be deleted. Are you sure you want to do this? Enter the same command again within ten seconds to verify!},DELETE %q<cat>,v(VAR`MSGHEAD);@nspemit %#=u(RFN`MSGHEAD) Circle '%0' Deleted!;@include u(rumor)/INC`CMSG={Deleted Rumor Circle '%q<catname>'!};@set %q<cat>=!SAFE;@nuke %q<cat>;@nuke %q<cat>;@dolist/inline iter(wildgrepi(u(rumordb),*`CIRCLE,%q<cat>),first(%i0,`))={@trigger u(rumor)/TRG`DELRUMOR=%i0}

&INC`DESCCIRCLE u(rumor)=@assert hasflag(%#,WIZARD)=@nspemit %#=u(RFN`MSGHEAD) Permission Denied: Wizard only.;@include u(rumor)/INC`FINDCIRCLE=%0;@assert strlen(%2)=@nspemit %#=u(RFn`MSGHEAD) ERROR: No description entered!;@nspemit %#=u(RFN`MSGHEAD) Desc set.;@describe %q<cat>=%2

&INC`CIRCLES u(rumor)=@nspemit %#=u(RFN`HEADER,Rumor Circles);@nspemit %#=align(10 9 57,Name,Perm,Description);@nspemit %#=u(RFN`SEPARATOR);@dolist/inline u(FUN`VALIDCIRCLES,%#,Post)={@nspemit %#=align(10 9 57,name(%i0),strfirstof(if(u(FUN`PERMCHECK,%i0,ADMIN,%#),ADMIN),if(u(FUN`PERMCHECK,%i0,POST,%#),POST),if(u(FUN`PERMCHECK,%i0,READ,%#),READ)),get(%i0/DESCRIBE))};@nspemit %#=u(RFN`HEADER)

&INC`FINDCIRCLE u(rumor)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) No Category Name entered!;@assert words(setr(cats,if(strlen(%1),u(FUN`VALIDCIRCLES,%#,%1),u(FUN`LISTCIRCLES))))=@nspemit %#=u(RFN`MSGHEAD) There are no Categories.;@assert isdbref(setr(cat,objid(namegrab(%q<cats>,%0))))=@nspemit %#=u(RFN`MSGHEAD) Category '%0' not found.;th setq(catname,name(%q<cat>))

&FUN`PERMCHECK u(rumor)=switch(%1,READ,cor(u(FUN`PERMCHECK,%0,POST,%2),elock(%0/%1,%2)),POST,cor(u(FUN`PERMCHECK,%0,Admin,%2),elock(%0/%1,%2)),ADMIN,elock(%0/%1,%2))

&FUN`LISTCIRCLES u(rumor)=iter(setinter(children(u(rumordb)),lthings(u(rumordb)),%b,namei),objid(%i0))
&FUN`LISTCIRCLES`NAMES u(rumor)=iter(strfirstof(%0,u(FUN`LISTCIRCLES)),name(%i0),%b,|)

&FUN`VALIDCIRCLES u(rumor)=filterbool(#lambda/u(FUN`PERMCHECK,\%0,%1,%0),u(FUN`LISTCIRCLES))

&INC`RENCIRCLE u(rumor)=@assert hasflag(%#,WIZARD)=@nspemit %#=u(RFN`MSGHEAD) Permission Denied: Wizard only.;@include u(rumor)/INC`FINDCIRCLE=%0;@include u(rumor)/INC`CIRCLENAMECHECK=%2;@name %q<cat>=%2;@include u(ccs)/INC`CMSG=Renamed Rumor Circle %q<catname> to %2.;@nspemit %#=u(RFN`MSGHEAD) Rename successful.

&INC`LOCKCIRCLE u(rumor)=@include u(rumor)/INC`LOCK;@assert strlen(%2)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No lock string entered. See [pueblize(+help +key)] for more information.;@include u(kls)/INC`DOLOCK=%q<cat>,user:%q<lock>,%2,v(VAR`MSGHEAD)
&INC`UNLOCKCIRCLE u(rumor)=@include u(rumor)/INC`LOCK;@unlock/user:%q<lock> %q<cat>;@nspemit %#=u(RFN`MSGHEAD) You release the %q<lock> lock on %q<catname>;@include u(ccs)/INC`CMSG={Released the %q<lock> Lock on Rumor Circle %q<catname>}

&INC`LOCK u(rumor)=@assert hasflag(%#,WIZARD)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission Denied. This command is Wizard-only.;@include u(rumor)/INC`FINDCIRCLE=%0;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Lock Type field empty.;@include u(ccs)/INC`PARTIAL=%1,READ|POST|ADMIN,|,v(VAR`MSGHEAD),lock,lock

&INC`NEW u(rumor)=@include u(rumor)/INC`FINDCIRCLE=%0,POST;@switch/inline t(strlen(%1))=1,{@assert lmath(min,iter(setr(subjdbs,namelist(%1,FUN`NAMEERROR)),isdbref(%i0)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: One or more names did not resolve, cannot continue.;th setq(subjids,iter(%q<subjdbs>,objid(%i0)))};@assert strlen(%2)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rumor text field is empty.;&[setr(attr,nextslot(u(rumordb)))]`BYDB u(rumordb)=%:;&%q<attr>`BY u(rumordb)=%n;&%q<attr>`ON u(rumordb)=secs();&%q<attr>`SUBJECT u(rumordb)=%q<subjids>;&%q<attr>`CIRCLE u(rumordb)=%q<cat>;&%q<attr>`TEXT u(rumordb)=%2;&%q<attr>`DURATION u(rumordb)=0;&%q<attr>`ID u(rumordb)=setr(newid,baseconv(v(VAR`CURRENT`ID),10,64));&VAR`CURRENT`ID u(rumor)=add(1,v(VAR`CURRENT`ID));&VAR`RUMORIDS u(rumor)=setunion(%q<newid>,u(FUN`GETIDS));&%q<attr>`COMMID u(rumordb)=0;@include u(ccs)/INC`CMSG={Posted new %q<catname> Rumor[if(words(%q<subjids>),%babout [itemize(iter(%q<subjids>,name(%i0),%b,|),|,and,\,)])]: [pueblize(+rumor %q<attr>,+rumor %q<attr>)]};@nspemit %#=u(RFN`MSGHEAD) Rumor posted!;@include u(ccs)/INC`RMSG=v(VAR`MSGHEAD),filterbool(#lambda/u(FUN`PERMCHECK,%q<cat>,READ,\%0),unique(lwho())),{New %q<catname> Rumor Posted[if(words(%q<subjids>),%babout [itemize(iter(%q<subjids>,name(%i0),%b,|),|,and,\,)])]: [pueblize(+rumor %q<attr>,+rumor %q<attr>)]}

&FUN`GETIDS u(rumor)=iter(lattr(u(rumordb)/*`ID),get(u(rumordb)/%i0))

&VAR`CURRENT`ID u(rumor)=0
&VAR`DEFAULT`TIMEOUT u(rumor)=mul(60,60,24,14)
&VAR`FINALCOUNTDOWN u(rumor)=mul(60,60,24,3)
&VAR`TIMEMOD`PROMOTE u(rumor)=mul(60,60,24,-1)
&VAR`TIMEMOD`QUASH u(rumor)=mul(60,60,24)

&INC`QUASH u(rumor)=@include u(rumor)/INC`COMMENT=%0,%1,%2,-
&INC`PROMOTE u(rumor)=@include u(rumor)/INC`COMMENT=%0,%1,%2,+

&INC`COMMENT u(rumor)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No ID entered to check.;@assert valnum(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: IDs must be whole, positive numbers.;@assert match(u(FUN`VALIDRUMORS,%#),%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rumor '%0' not found.;@assert u(FUN`PERMCHECK,get(u(rumordb)/%0`CIRCLE),POST,%#)=@nspemit %#=u(RFN`MSGHEAD) Permission denied.;@break cand(match(get(u(rumordb)/%0`COMMENTERS),%:),not(u(FUN`PERMCHECK,get(u(rumordb)/%0`CIRCLE),ADMIN,%#)))=@nspemit %#=u(RFN`MSGHEAD) You have already influenced this rumor.;@assert strlen(%2)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Nothing entered to [switch(%3,-,quash,promote)] with.;@switch/inline %#=+,{@wipe u(rumordb)/%0`DAYSLEFT};&%0`DURATION u(rumordb)=add(get(u(rumordb)/%0`DURATION),u(VAR`TIMEMOD`[switch(%3,+,PROMOTE,-,QUASH)]));&%0`COMMENTERS u(rumordb)=setunion(%:,get(u(rumordb)/%0`COMMENTERS));@nspemit %#=u(RFN`MSGHEAD) Rumor [switch(%3,+,promoted,-,quashed)]!;&[setr(attr,%0`COMM`[nextslot(u(rumordb),%0`COMM)])] u(rumordb)=%3;&%q<attr>`ON u(rumordb)=secs();&%q<attr>`TEXT u(rumordb)=%2;&%q<attr>`BY u(rumordb)=%n;&%q<attr>`BYDB u(rumordb)=%:;&%q<attr>`ID u(rumordb)=setr(newid,baseconv(get(u(rumordb)/%0`COMMID),10,64));&%0`COMMID u(rumordb)=add(1,get(u(rumordb)/%0`COMMID));&%0`POSTIDS u(rumordb)=setunion(%q<newid>,get(u(rumordb)/%0`POSTIDS));&D`RUMOR`READ`setr(id,get(u(rumordb)/%0`ID))] %#=setunion(get(%#/D`RUMOR`READ`%q<id>),%q<newid>);@include u(ccs)/INC`CMSG={switch(%3,+,Promoted,-,Quashed) [pueblize(name(get(u(rumordb)/%0`CIRCLE)) Rumor %0,+rumor %0)]};@include u(ccs)/INC`RMSG=v(VAR`MSGHEAD),setdiff(filterbool(#lambda/u(FUN`PERMCHECK,%q<cat>,READ,\%0),unique(lwho())),%#),{[pueblize(name(get(u(rumordb)/%0`CIRCLE)) Rumor %0,+rumor %0)] has been [switch(%3,+,promoted,-,quashed)].}

&INC`REMRUMOR u(rumor)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No ID entered to check.;@assert valnum(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: IDs must be whole, positive numbers.;@assert match(u(FUN`VALIDRUMORS,%#),%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rumor '%0' not found.;

&INC`MAIN u(rumor)=@switch/inline t(strlen(%0))=1,{@include u(rumor)/INC`SHOWRUMOR},0,{@include u(rumor)/INC`RUMORLIST}

&INC`SHOWRUMOR u(rumor)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No ID entered to check.;@assert valnum(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: IDs must be whole, positive numbers.;@assert match(u(FUN`VALIDRUMORS,%#),%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rumor '%0' not found.;th setq(admin,u(FUN`PERMCHECK,get(u(rumordb)/%0`CIRCLE),ADMIN,%#));@nspemit %#=u(RFN`HEADER,Rumor %0);@nspemit %#=get(u(rumordb)/%0`TEXT);@switch/inline %q<admin>=1,{@nspemit %#=(By [if(isdbref(get(u(rumordb)/%0`BYDB)),name(get(u(rumordb)/%0`BYDB)),get(u(rumordb)/%0`BY))] on [fancytime(get(u(rumordb)/%0`ON),%#)])};@switch/inline t(nattr(u(rumordb)/%0`COMM`*))=1,{@nspemit %#=u(RFN`SEPARATOR);@dolist/inline sortkey(#lambda/last(\%0,`),lattr(u(rumordb)/%0`COMM`*))={@nspemit %#=align(>5 72,switch(get(u(rumordb)/%i0),+,ansi(hg,+),-,ansi(hr,-)),get(u(rumordb)/%i0`TEXT)[if(%q<admin>,%b(By [if(isdbref(get(u(rumordb)/%i0`BYDB)),name(get(u(rumordb)/%i0`BYDB)),get(u(rumordb)/%i0`BY))] on [fancytime(get(u(rumordb)/%i0`ON),%#)]))])}};@nspemit %#=u(RFN`HEADER);&D`RUMOR`READ %#=setinter(setunion(get(%#/D`RUMOR`READ),setr(id,get(u(rumordb)/%0`ID))),);@cpattr u(rumordb)/%0`POSTIDS=%#/D`RUMOR`READ`%q<id>

&INC`RUMORLIST u(rumor)=@nspemit %#=u(RFN`HEADER,Rumors);@nspemit %#=align(4 6 10 20 10 20,#,Known,Circle,Subject,Rating,Remain);@nspemit %#=u(RFN`SEPARATOR);@dolist/inline u(FUN`VALIDRUMORS,%#)={@nspemit %#=align(4 6 10 20 10 20,pueblize(%i0,+rumor %i0),if(match(get(%#/D`RUMOR`READ),setr(id,get(u(rumordb)/%i0`ID))),if(not(words(setdiff(get(u(rumordb)/%i0`POSTIDS),get(%#/D`RUMOR`READ`%q<id>)))),Yes,Upd),No),if(isobjid(get(u(rumordb)/%i0`CIRCLE)),name(get(u(rumordb)/%i0`CIRCLE)),???),if(words(setr(subj,filterbool(#lambda/isobjid(\%0),get(u(rumordb)/%i0`SUBJECT)))),itemize(iter(%q<subj>,name(%i0),%b,|),|,and,\,),General),sub(setr(prom,words(wildgrepi(u(rumordb),%i0`COMM`*,+))),setr(quash,words(wildgrepi(u(rumordb),%i0`COMM`*,-))))%B(+%q<prom>/-%q<quash>),if(hasattr(u(rumordb)/%i0`DAYSLEFT),ansi(hr,squish(etime(sub(u(VAR`FINALCOUNTDOWN),get(u(rumordb)/%i0`DAYSLEFT)),6))),squish(etime(sub(u(VAR`DEFAULT`TIMEOUT),get(u(rumordb)/%i0`DURATION)),6))))};@nspemit %#=u(RFN`HEADER)

&FUN`VALIDRUMORS u(rumor)=filterbool(#lambda/u(FUN`CANSEE,\%0,%0),sort(reglattr(u(rumordb)/^\\d+$)))

&FUN`CANSEE u(rumor)=localize(if(isobjid(setr(circ,get(u(rumordb)/%0`CIRCLE))),elock(%q<circ>/READ,%1),1))

&STARTUP u(rumor)=@trigger me/TRG`RUMORMILL

&TRG`RUMORMILL u(rumor)=th setq(tick,mul(60,5));th setq(rumors,filterbool(#lambda/not(match(get(u(rumordb)/\%0`FLAGS),FREEZE)),reglattr(u(rumordb)/^\\d+$)));th setq(infinal,filterbool(#lambda/hasattr(u(rumordb)/\%0`DAYSLEFT),%q<rumors>));th setq(normals,setdiff(%q<rumors>,%q<infinal>));@dolist/inline/nobreak %q<infinal>={&%i0`DAYSLEFT u(rumordb)=add(%q<tick>,get(u(rumordb)/%i0`DAYSLEFT));@assert gte(get(u(rumordb)/%i0`DAYSLEFT),u(VAR`FINALCOUNTDOWN));th setq(timedout,setunion(%q<timedout>,%i0))};@dolist/inline/nobreak %q<normals>={&%i0`DURATION u(rumordb)=add(%q<tick>,get(u(rumordb)/%i0`DURATION));@assert gte(get(u(rumordb)/%i0`DURATION),u(VAR`DEFAULT`TIMEOUT));th setq(finals,setunion(%q<finals>,%i0));&%i0`DAYSLEFT u(rumordb)=0};@switch/inline t(words(%q<finals>))=1,{@include u(ccs)/INC`SCMSG={Rumors [itemize(sort(%q<finals>),%b,and,\,)] have been put on Final Countdown.}};@switch/inline t(words(%q<timedout>))=1,{@include u(ccs)/INC`SCMSG={Rumors [itemize(sort(%q<timedout>),%b,and,\,)] have TIMED OUT.}};@dolist/inline %q<timedout>={@trigger u(rumor)/TRG`DELRUMOR=%i0};@wait %q<tick>=@trigger u(rumor)/TRG`RUMORMILL

&TRG`DELRUMOR u(rumor)=th setq(id,get(u(rumordb)/%0`ID));@wipe u(rumordb)/%0;th setq(ids,u(FUN`GETIDS));&VAR`RUMORIDS u(rumor)=%q<ids>;@dolist/inline lsearch(all,type,player)={&D`RUMOR`READ %i0=setinter(get(%i0/D`RUMOR`READ),%q<ids>);@wipe %i0/D`RUMOR`READ`%q<id>}

@@ RUMOR SYSTEM
+help/addmain Communications/+rumor=[u(rumor)]/HLP`+RUMOR
&HLP`+RUMOR u(rumor)=The Rumor system is designed to represent in-character rumors spreading around town - or various social circles. Rumor posters remain anonymous to all but staff members, and rumors can be anonymously promoted or quashed by players - only one or the other per each rumor, so choose wisely. Over time they are removed, but more pervasively supported rumors take longer to time out.%R%R[ansi(hc,Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+rumor)] - Show the list of rumors.%R[ansi(h,+rumor <id>)] - Show a specific rumor's details.%R[ansi(h,+rumor/circles)] - Shows circles available to you and what permissions you hold.%R[ansi(h,+rumor/new <circle>\[/<subject>\]=<text>)] - Create a new rumor. Subject takes a player-name-list the same way that page does (names are separated by spaces, multi-word names are in ""). Subject is optional.%R[ansi(h,+rumor/promote <id>=<text>)] - Adds a promotional anonymous comment to a Rumor. Example would be more details, related events, etc. This keeps the Rumor around longer.%R[ansi(h,+rumor/quash <id>=<text>)] - Like /promote, but is negative. Makes Rumors time out quicker.})]%R%R[ansi(hc,Admin Commands)]%R(listed for players granted Admin priveleges to a Circle)%R[align(5 [sub(width(%#),6)],,{[ansi(h,+rumor/delrumor <id>)] - Deletes a rumor. Dangerous!})]%R%RA NOTE on Rumor timeouts:%R%RWhen a Rumor has been around for the max duration, it will be marked for Final Countdown - a 3 day period. If the Rumor receives a Promote, then the countdown is reset and the Rumor will be pushed back into the normal timeout. Quashes during the Final Countdown have no effect but are still registered.

+shelp/addmain Communications/+rumor=[u(rumor)]/SHLP`+RUMOR
&SHLP`+RUMOR u(rumor)=[ansi(hc,Wizard Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+rumor/makecircle <name>)] - Create a new Circle. They're locked READ:<everyone>, POST:<everyone>, ADMIN:<staff> by default. Name must be something simple and short, like a race name or a topic.%R[ansi(h,+rumor/lockcircle <circle>/<type>=<lockstring>)] - Lock a category using the +key system. <type> must be READ, POST, or ADMIN. READ: who can see the circle's rumors. POST: Who can post. (Very rarely would you want READ: Yes and POST: No. Remember to set both!) ADMIN: Who can see the posters' identities and remove rumors. POST implicitly grants READ. ADMIN implicitly grants ALL permissions.%R[ansi(h,+rumor/unlockcircle <circle>/<type>)] - Clears the lock back to its default.%R[ansi(h,+rumor/rencircle <circle>=<newname>)] - Renames a Circle.%R[ansi(h,+rumor/delcircle <circle>)] - Deletes a Circle. WARNING: DANGEROUS COMMAND.%R[ansi(h,+rumor/desccircle <circle>=<description>)] - Describe a circle for the /circles display.})]%R%RStaff and those with ADMIN can use /quash and /promote without limit for plot flexibility.