@@ DEPENDENCIES - Core

@switch/inline isdbref(u(gso))=0,{@tel create(Group System Object <GSO>)=config(master_room)}
&gso u(coi)=locate(config(master_room),Group System Object <GSO>,TXxi)
@parent u(gso)=u(coi)
@set u(gso)=WIZARD !NO_COMMAND

@switch/inline isdbref(u(gop))=0,{@switch/inline isdbref(u(gso))=1,{@tel create(Group Object Parent <GOP>)=u(gso)}}
&gop u(coi)=locate(u(gso),Group Object Parent <GOP>,TXxi)
@set u(gop)=WIZARD SAFE

@lock/user:member u(gop)=FUN`ISADMIN/1|DBREFLIST^MEMBERS
@lset u(gop)/member=visual
&FUN`ISADMIN u(gop)=isadmin(%#)

@lock/user:invited u(gop)=DBREFLIST^INVITES
@lset u(gop)/invited=visual

@lock/user:ic u(gop)=FUN`ISADMIN/1|FUN`AUTHCHECK`IC/1
@lset u(gop)/ic=visual
&FUN`AUTHCHECK`IC u(gop)=grpperm(%#,num(me),IC)

@lock/user:ooc u(gop)=FUN`ISADMIN/1|FUN`AUTHCHECK`OOC/1
@lset u(gop)/ooc=visual
&FUN`AUTHCHECK`OOC u(gop)=grpperm(%#,num(me),OOC)

@lock/user:moderate u(gop)=FUN`ISADMIN/1|FUN`AUTHCHECK`MODERATE/1
@lset u(gop)/moderate=visual
&FUN`AUTHCHECK`MODERATE u(gop)=grpperm(%#,num(me),MODERATE)

&RANK`1`NAME u(gop)=Leader
&RANK`1`PERM`GROUP u(gop)=TITLE|MODERATE|INVITE|IC|OOC|BBADMIN|BBMODERATE
&RANK`1`PERM`SELF u(gop)=TITLE
&RANK`2`NAME u(gop)=Second in Command
&RANK`2`PERM`GROUP u(gop)=TITLE|MODERATE|INVITE|IC|OOC|BBMODERATE
&RANK`2`PERM`SELF u(gop)=TITLE
&RANK`3`NAME u(gop)=Member
&RANK`3`PERM`GROUP u(gop)=
&RANK`3`PERM`SELF u(gop)=
&RANK`ALL`PERM`SELF u(gop)=
&RANK`ALL`PERM`GROUP u(gop)=IC|OOC
&SET`COLOR u(gop)=n
&SET`STARTRANK u(gop)=3
&SET`IC u(gop)=1
&SET`OOC u(gop)=1
&SET`MAJOR u(gop)=0

&CMD`+GROUP u(gso)=$^(?s)(?\:\+)?g(roups|roup|create|rename|set|option|gag|ungag|title|invite|invites|uninvite|join|refuse|add|leave|kick|perm|rank|addrank|delrank|namerank|disband|ooc|radio|focus|log|recall)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@include u(gso)/INC`CHOOSE=+g,%1,%2,%3,%4
@set u(gso)/CMD`+GROUP=regexp

&INC`CHOOSE u(gso)=@switch/inline 1=strmatch(%0,+g),{@include u(ccs)/INC`PARTIAL=%2,setunion(get(u(gso)/VAR`PLAYFLAGS`G`%1),if(isadmin(%#),get(u(gso)/VAR`ADMINFLAGS`G`%1)),|,|),|,GROUP,switch,switch;@include u(gso)/INC`CHOOSE`G`%1`[strfirstof(%q<switch>,MAIN)]=%3,%4},{@nspemit %#=announce(GROUPS) ERROR: Unknown code error. Please contact staff.}

&INC`CHOOSE`G`CREATE`MAIN u(gso)=@include u(gso)/INC`CODE`CREATE
&INC`CODE`CREATE u(gso)=@assert isadmin(%#)=@nspemit %#=announce(GROUPS) ERROR: Permission denied. Admin-only command.;@assert strlen(%0)=@nspemit %#=announce(GROUPS) ERROR: Group name field empty.;@assert valid(name,%0)=@nspemit %#=announce(GROUPS) ERROR: Bad name for a group!;@break isdbref(locate(u(gop),%0,TXxi))=@nspemit %#=announce(GROUPS) ERROR: A Group already has that name!;@include u(gso)/INC`CODE`DOCREATE=%0,1;@nspemit %#=announce(GROUPS) You have created the [ansi(hw,%q<gname1>)];@switch/inline setr(res,t(strlen(%1))[isdbref(pmatch(%1))])=11,{@include u(ccs)/INC`CHECKPC=%1,1,GROUPS;@include u(gso)/INC`CODE`ADDTOGROUP=%q<gid1>,%q<t1objid>,{announce(GROUPS) %n added you to the %q<gname1> Group!},1;@nspemit %#=announce(GROUPS) You set %q<t1name> as leader of the %q<gname1>!},10,{@nspemit %#=announce(GROUPS) The group was created, but '%1' does not match a player!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Created the Group.[if(gt(%q<res>,0),%B%q<t1name> is its leader.)]};@include u(gso)/INC`CODE`SWITCH=%q<gid1>

&INC`CODE`DOCREATE u(gso)=@assert strlen(%0);th setr(gid%1,create(setr(gname%1,trim(stripansi(%0)))));@assert isdbref(%q<gid%1>)=@nspemit %#=announce(GROUPS) ERROR: Group could not be created.;@tel %q<gid%1>=u(gop);@parent %q<gid%1>=u(gop);@power %q<gid%1>=many_attibs;@set %q<gid%1>=WIZARD SAFE

&FUN`FINDGROUP u(gso)=namegrab(u(u(gso)/FUN`LISTGROUPS),%0)

&FUN`LISTGROUPS u(gso)=sort(filterbool(#lambda/strmatch(parent(\%0),u(gop)),lthings(u(gop))),namei)

&INC`CODE`MAKELOG u(gso)=&[setr(log,LOG`[nextslot(%1,LOG)])] %1=%2;&%q<log>`SUBMITTER %1=%0;&%q<log>`SUBMITTED %1=secs()

&INC`CODE`VALGROUP u(gso)=@assert strlen(%0)=@nspemit %#=announce(GROUPS) ERROR: No group entered to check.;@assert valnum(%1)=@nspemit %#=announce(GROUPS) ERROR: Code error, contact staff.;@assert isdbref(setr(gid%1,u(u(gso)/FUN`FINDGROUP,%0)))=@nspemit %#=announce(GROUPS) ERROR: Group not found.;th setq(gname%1,name(%q<gid%1>))

&INC`CHOOSE`G`RENAME`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RENAME
&INC`CODE`RENAME u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,RENAME)=@nspemit %#=announce(GROUPS) ERROR: Permission Denied.;@assert strlen(%0)=@nspemit %#=announce(GROUPS) ERROR: Name field empty.;@break isdbref(locate(u(gop),%0,TXxi))=@nspemit %#=announce(GROUPS) ERROR: A Group already has that name.;@name %q<gid1>=%0;@include u(gso)/INC`CODE`MAKELOG=%:,q<gid1>,{Group renamed to: %0};@include u(gso)/INC`CODE`CHAT={%n Renamed the Group to %0},OOC,1

&GFN`ISGROUPMEMBER u(gso)=if(isdbref(%1),elock(%1/MEMBER,%0),if(isdbref(setr(isgroup,u(u(gso)/FUN`FINDGROUP,%1))),elock(%q<isgroup>/MEMBER,%0),0))

&INC`CHOOSE`G`DISBAND`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DISBAND
&INC`CODE`DISBAND u(gso)=@assert isadmin(%#)=@nspemit %#=announce(GROUPS) ERROR: Only Staff may Disband Groups.;@include u(ccs)/INC`VERIFY={WARNING: This will completely disband %q<gname1>. Are you sure you want to continue? Enter the same command again within 10 seconds to Verify!},FAC DELETE %q<gid1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n has Disbanded the Group!},OOC,1;@dolist lsearch(all,eplayer,\[hasattr(##/D`GROUP`%q<gid1>)\])={@wipe %i0/D`GROUP`%q<gid1>};@dolist get(%q<gid1>/BOARDS)={@set %i0=!SAFE;@nuke %i0};@set %q<gid1>=!SAFE;@parent %q<gid1>;@nuke %q<gid1>

@@ GROUP LISTING

&INC`CHOOSE`G`ROUP`MAIN u(gso)=@switch/inline gt(strlen(%0),0)=1,{@include u(gso)/INC`CODE`SWITCH},0,{@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`WHO}

&INC`CHOOSE`G`WHO`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`WHO

&INC`CHOOSE`G`FOCUS`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=%0,1;@nspemit %#=announce(GROUPS) You are now managing: [ansi(hw,%q<gname1>)];th setstat(%#/D`GROUP,Group,%q<gid1>)

&INC`CODE`SWITCH u(gso)=@include u(gso)/INC`CODE`VALGROUP=%0,1;@include u(gso)/INC`CODE`WHO=0,1;@switch/inline cand(isgroupmember(%:,%q<gid1>),not(strmatch(getstat(%#/D`GROUP,Group),%q<gid1>)))=1,{@nspemit %#=announce(GROUPS) You are now managing: [ansi(hw,%q<gname1>)];th setstat(%#/D`GROUP,Group,%q<gid1>)}

&INC`CODE`WHO u(gso)=@nspemit %#=header(MEMBERS: %q<gname1>);@switch/inline cand(gt(strlen(setr(type,u(u(gso)/FUN`GETSET,%q<gid1>,TYPE))),0),hasattr(u(gso)/INC`CODE`WHO`%q<type>))=1,{@include u(gso)/INC`CODE`WHO`%q<type>},0,{@nspemit %#=align(24 21 20 10,Name,Rank,Title,Last/Idle)%R[subheader()];@dolist/inline sortkey(#lambda/u(u(gso)/FUN`GETRANK,%q<gid1>,\%0),sort(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),namei))={@nspemit %#=align(24 21 19 >10,pueblize(color(%#,name(%i0),GROUP`GWHONAME,n),+finger [name(%i0)]),get(%q<gid1>/RANK`[getstat(%q<gid1>/RANK,%i0)]`NAME),getstat(%i0/D`GROUP`%q<gid1>,TITLE),lastidle(%i0,%#))}};@nspemit %#=header()

&INC`CHOOSE`G`ROUPS`MAIN u(gso)=@include u(gso)/INC`CODE`GROUPLIST

&FUN`GETSET u(gso)=get(%0/SET`%1)

&FUN`LISTRANKNAMES u(gso)=itemize(strfirstof(iter(graball(get(%0/RANK),*~%1,|,|),name(before(%i0,~)),|,|),None),|,and,\,)

&INC`CODE`GROUPLIST u(gso)=@nspemit %#=header(Major Groups)%R[align(27 20 20 7,Name,Leader,Second,Members)];@dolist/inline filterbool(#lambda/u(u(gso)/FUN`GETSET,\%0,MAJOR),u(u(gso)/FUN`LISTGROUPS))={@nspemit %#=align(27 20 20 7,pueblize(ansi(strfirstof(u(u(gso)/FUN`GETSET,%i0,COLOR),n),name(%i0)),+group [name(%i0)]),u(u(gso)/FUN`LISTRANKNAMES,%i0,1),u(u(gso)/FUN`LISTRANKNAMES,%i0,2),rjust(words(setinter(lwho(%#),setr(members,get(%i0/MEMBERS)))),2,0)/[rjust(words(%q<members>),2,0)])};@nspemit %#=header(Minor Groups)%R[align(27 20 20 7,Name,Leader,Second,Members)];@dolist/inline filterbool(#lambda/not(u(u(gso)/FUN`GETSET,\%0,MAJOR)),u(u(gso)/FUN`LISTGROUPS))={@nspemit %#=align(27 20 20 7,pueblize(ansi(strfirstof(u(u(gso)/FUN`GETSET,%i0,COLOR),n),name(%i0)),+group [name(%i0)]),u(u(gso)/FUN`LISTRANKNAMES,%i0,1),u(u(gso)/FUN`LISTRANKNAMES,%i0,2),rjust(words(setinter(lwho(%#),setr(members,get(%i0/MEMBERS)))),2,0)/[rjust(words(%q<members>),2,0)])};@nspemit %#=header()

@@ MEMBERSHIP CONTROL
&INC`CODE`ADDTOGROUP u(gso)=&MEMBERS %0=setunion(get(%0/MEMBERS),objid(%1));@nspemit %1=%2;th setstat(%0/RANK,objid(%1),strfirstof(%3,u(u(gso)/FUN`GETSET,%0,STARTRANK)));&INVITES %0=setdiff(get(%0/INVITES),objid(%1))

&INC`CODE`REMFROMGROUP u(gso)=&MEMBERS %0=setdiff(get(%0/MEMBERS),objid(%1));@nspemit %1=%2;th delstat(%0/RANK,objid(%1));@wipe %1/D`GROUP`%1

&INC`CHOOSE`G`ADD`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADD
&INC`CODE`ADD u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,ADD)=@nspemit %#=announce(GROUPS) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@break match(get(u(gop)/%q<gid1>`MEMBERS),%q<t1objid>)=@nspemit %#=announce(GROUPS) ERROR: They are already a member of the Group.;@include u(gso)/INC`CODE`ADDTOGROUP=%q<gid1>,%q<t1objid>,announce(GROUPS) %n added you to the %q<gname1> Group!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Added %q<t1name>.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n added %q<t1name> to the Group!},OOC,1

&INC`CHOOSE`G`LEAVE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`LEAVE
&INC`CODE`LEAVE u(gso)=@assert match(get(%q<gid1>/MEMBERS),%:)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@break eq(1,u(u(gso)/FUN`GETRANK,%:,%q<gid1>))=@nspemit %#=announce(GROUPS) ERROR: Leaders may not leave their groups. Please contact staff.;@include u(gso)/INC`CODE`REMFROMGROUP u(gso)=%q<gid1>,%q<t1objid>,{announce(GROUPS) You left the %q<gname1> Group!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>{%q<t1name> left the group.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n left the Group},OOC,1

&INC`CHOOSE`G`KICK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`KICK
&INC`CODE`KICK u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,KICK)=@nspemit %#=announce(GROUPS) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert match(get(%q<gid1>/MEMBERS),%q<t1objid>)=@nspemit %#=announce(GROUPS) ERROR: They are not a member of the Group.;@assert lte(u(u(gso)/FUN`GETRANK,%:,%q<gid1>),u(u(gso)/FUN`GETRANK,%q<t1objid>,%q<gid1>))=@nspemit %#=announce(GROUPS) ERROR: Cannot kick those of higher rank.;@include u(gso)/INC`CODE`REMFROMGROUP=%q<gid1>,%q<t1objid>,{announce(GROUPS) %n removed you from the %q<gname1> Group!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>{%q<t1name> was kicked.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n removed %q<t1name> from the Group},OOC,1

&INC`CHOOSE`G`INVITE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`INVITE
&INC`CODE`INVITE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,INVITE)=@nspemit %#=announce(GROUPS) ERROR: You do not have permission to do that.;@switch/inline gt(strlen(%0),0)=1,{@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@break isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: They are already a member of the Group.;@break match(get(%q<gid1>/INVITES),%q<t1objid>)=@nspemit %#=announce(GROUPS) ERROR: %q<t1name> has already been invited to %q<gname1>.;&INVITES %q<gid1>=setunion(get(%q<gid1>/INVITES),%q<t1objid>);@nspemit %q<t1>=%n has invited you to join the %q<gname1>! To accept, type [pueblize(ansi(h,+gjoin %q<gname1>),+gjoin %q<gname1>)] or Refuse using [pueblize(ansi(h,+grefuse %q<gname1>),+grefuse %q<gname1>)].;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Invite sent to %q<t1name>.};@nspemit %#=announce(GROUPS) You have invited %q<t1name> to the %q<gname1>},0,{@include u(gso)/INC`MAIN`SHOWINVITES}

&INC`CHOOSE`G`UNINVITE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`UNINVITE
&INC`CODE`UNINVITE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,INV)=@nspemit %#=announce(GROUPS) ERROR: You do not have permission to do that.;@switch/inline gt(strlen(%0),0)=1,{@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@break isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: They're already a member of the group.;@break match(get(%q<gid1>/INVITES),%q<t1objid>)=@nspemit %#=announce(GROUPS) ERROR: %q<t1name> has not been invited to %q<gname1>.;&INVITES %q<gid1>=setdiff(get(%q<gid1>/INVITES),%q<t1objid>);@nspemit %q<t1>=announce(GROUPS) %n withdrew your invitation to join the %q<gname1>!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Invite withdrawn from %q<t1name>.}},0,{@include u(gso)/INC`MAIN`SHOWINVITES}

&INC`MAIN`SHOWINVITES u(gso)=@nspemit %#=header(%q<gname1>'s Pending Invites);@nspemit %#=itemize(iter(setr(invites,filterbool(#lambda/isobjid(\%0),get(u(gop)/%q<gid1>`INVITES))),name(%i0),%b,|),|,and,\,);@nspemit %#=header();&INVITES %q<gid1>=%q<invites>

&INC`CHOOSE`G`JOIN`MAIN u(gso)=@switch/inline gt(strlen(%1),0)=1,{@include u(gso)/INC`CODE`VALGROUP=%1,1;@include u(gso)/INC`CODE`JOIN=%1,%2,%3},0,{@include u(gso)/INC`CODE`MYINVITES}
&INC`CODE`JOIN u(gso)=@break match(get(u(gop)/%q<gid1>`MEMBERS),%:)=@nspemit %#=announce(GROUPS) ERROR: You are already a member of the Group.;@assert elock(%q<gid1>/invited,%#)=@nspemit %#=announce(GROUPS) ERROR: You have not been invited to join that Group.;@include u(gso)/INC`CODE`ADDTOGROUP=%q<gid1>,%:,{announce(GROUPS) You have joined the %q<gname1> Group!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> joined.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n joined the Group!},OOC,1

&INC`CHOOSE`G`REFUSE`MAIN u(gso)=@switch/inline gt(strlen(%1),0)=1,{@include u(gso)/INC`CODE`VALGROUP=%1,1;@include u(gso)/INC`CODE`REFUSE=%1,%2,%3},0,{@include u(gso)/INC`CODE`MYINVITES}
&INC`CODE`REFUSE u(gso)=@break match(get(u(gop)/%q<gid1>`MEMBERS),%:)=@nspemit %#=announce(GROUPS) ERROR: You are already a member of the Group.;@assert match(get(%q<gid1>/INVITES),%:)=@nspemit %#=announce(GROUPS) ERROR: You have not been invited to join that Group.;&INVITES %q<gid1>=setdiff(get(%q<gid1>/INVITES),%:);@nspemit %#=announce(GROUPS) You have rejected joining the %q<gname1> Group!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> rejected joining.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n rejected [poss(%#)] invitation!},OOC,1

&INC`CODE`MYINVITES u(gso)=@assert setr(groups,filterbool(#lambda/match(get(\%0/INVITES),%:),u(u(gso)/FUN`LISTGROUPS)))=@nspemit %#=announce(GROUPS) You have no pending invites.;@nspemit %#=header(Your Group Invites);@nspemit %#=iter(%q<groups>,pueblize(name(%i0),+gjoin [name(%i0)]),,%R);@nspemit %#=header()

&INC`CHOOSE`G`RANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RANK
&INC`CODE`RANK u(gso)=@switch/inline t(strlen(%0))=1,{@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,PROMOTE,GROUP)=@nspemit %#=announce(GROUPS) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert strlen(%1)=@nspemit %#=announce(GROUPS) ERROR: Rank field empty.;@assert valnum(%1)=@nspemit %#=announce(GROUPS) ERROR: Ranks must be whole numbers.;@assert lt(u(u(gso)/FUN`GETRANK,%:,%q<gid1>),%1)=@nspemit %#=announce(GROUPS) ERROR: New Rank must be less than your own.;@assert cor(isadmin(%#),lt(u(u(gso)/FUN`GETRANK,%:,%q<gid1>),u(u(gso)/FUN`GETRANK,%q<t1objid>,%q<gid1>)))=@nspemit %#=announce(GROUPS) ERROR: Cannot change the rank of superiors.;th setstat(%q<gid1>/RANK,%q<t1objid>,%1);@nspemit %q<t1>=announce(GROUPS) %n has Changed your rank in the %q<gname1> Group to %1!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>{Changed %q<t1name>'s Rank to %1};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n set %q<t1name>'s Rank to %1},OOC,1},{@nspemit %#=header(Ranks: %q<gname1>);@nspemit %#=align(5 28 22 22,Rank,Name,Group,Self);@dolist/inline sortkey(#lambda/last(\%0,`),filterbool(#lambda/isint(last(\%0,`)),lattrp(%q<gid1>/RANK`*)))={@nspemit %#=u(u(gso)/FUN`RANKDISPLAY,%q<gid1>,last(%i0,`));@nspemit %#=subheader()};@nspemit %#=u(u(gso)/FUN`RANKDISPLAY,%q<gid1>,ALL);@nspemit %#=header()}

&FUN`RANKDISPLAY u(gso)=align(5 28 22 22,last(RANK`%1,`),get(%0/RANK`%1`NAME),switch(1,eq(words(setdiff(v(VAR`PERMISSIONS`GROUP),get(%0/RANK`%1`PERM`GROUP),|,|),|),0),all,eq(words(get(%0/RANK`%1`PERM`GROUP),|),0),none,iter(get(%0/RANK`%1`PERM`GROUP),lcstr(%i0),|,%R)),switch(1,eq(words(setdiff(v(VAR`PERMISSIONS`SELF),get(%0/RANK`%1`PERM`SELF),|,|),|),0),all,not(words(get(%0/RANK`%1`PERM`SELF),|)),none,iter(get(%0/RANK`%1`PERM`SELF),lcstr(%i0),|,%R)))

@@ PERMISSIONS AND DISCIPLINE
&FUN`GRPPERM u(gso)=cor(isadmin(%0),t(match(u(u(gso)/FUN`GETPERM,%1,u(u(gso)/FUN`GETRANK,%1,objid(%0)),strfirstof(%3,GROUP)),%2,|)))

&FUN`GETPERM u(gso)=setunion(ucstr(get(%0/RANK`%1`PERM`%2)),ucstr(get(%0/RANK`ALL`PERM`%2)),|,|)

&FUN`GETRANK u(gso)=switch(1,isadmin(%1),0,strfirstof(getstat(%0/RANK,%1),u(u(gso)/FUN`GETSET,%0,STARTRANK)))

&GFN`GRPPERM u(gso)=u(u(gso)/FUN`GRPPERM,%0,%1,%2)

&INC`CHOOSE`G`PERM`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`PERM
&INC`CODE`PERM u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of that group.;@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=announce(GROUPS) ERROR: Permission denied.;@assert strlen(setr(rank,before(%0,/)))=@nspemit %#=announce(GROUPS) ERROR: No Rank entered.;@assert cor(valnum(%q<rank>),strmatch(%q<rank>,ALL))=@nspemit %#=announce(GROUPS) ERROR: Valid ranks are numerical or All.;@switch/inline valnum(%q<rank>)=1,{@assert hasattrp(%q<gid1>/RANK`%q<rank>)=@nspemit %#=announce(GROUPS) ERROR: Group lacks rank %q<rank>.;@break lt(%q<rank>,u(u(gso)/FUN`GETRANK,%q<gid1>,%:))=@nspemit %#=announce(GROUPS) ERROR: Only Admin may edit the permissions of group leaders.};@assert strlen(after(%0,/))=@nspemit %#=announce(GROUPS) ERROR: No Permissions type entered.;@include u(ccs)/INC`PARTIAL=after(%0,/),GROUP|SELF,|,GROUPS,type,type;@assert strlen(%1)=@nspemit %#=announce(GROUPS) ERROR: Permissions field empty.;@dolist/inline/nobreak %1={@select/inline %i0=+all,{&RANK`%q<rank>`PERM`%q<type> %q<gid1>=ucstr(setunion(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),get(u(gso)/VAR`PERMISSIONS`%q<type>),|,|));th setq(changed,1)},-all,{&RANK`%q<rank>`PERM`%q<type> %q<gid1>=ucstr(setdiff(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),get(u(gso)/VAR`PERMISSIONS`%q<type>),|,|));th setq(changed,1)},+*,{@assert strlen(after(%i0,+))=@nspemit %#=announce(GROUPS) ERROR: No permission entered. Continuing...;@include u(ccs)/INC`PARTIAL=ucstr(after(%i0,+)),v(VAR`PERMISSIONS`%q<type>),|,GROUPS,Permission,Permission;&RANK`%q<rank>`PERM`%q<type> %q<gid1>=ucstr(setunion(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),%q<permission>,|,|));th setq(changed,1)},-*,{@assert strlen(after(%i0,-))=@nspemit %#=announce(GROUPS) ERROR: No permission entered. Continuing...;@include u(ccs)/INC`PARTIAL=ucstr(after(%i0,-)),v(VAR`PERMISSIONS`%q<type>),|,GROUPS,Permission,Permission;&RANK`%q<rank>`PERM`%q<type> %q<gid1>=ucstr(setdiff(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),%q<permission>,|,|));th setq(changed,1)},{@nspemit %#=announce(GROUPS) ERROR: '%i0' has no + or - operator.}};@switch/inline t(%q<changed>)=1,{@nspemit %#=announce(GROUPS) Modifications complete. Permissions for [ucstr(%q<rank>)]/[capnames(%q<type>)] are now: [itemize(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),|,and,\,)];@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>{Changed [ucstr(%q<rank>)]/[capnames(%q<type>)] Permissions to: [itemize(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),|,and,\,)]};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n changed [ucstr(%q<rank>)]/[capnames(%q<type>)] Permissions to: [itemize(get(%q<gid1>/RANK`%q<rank>`PERM`%q<type>),|,and,\,)]},OOC,1},{@nspemit %#=announce(GROUPS) ERROR: Modifications invalid. Please check permission entry.}

&VAR`PERMISSIONS`GROUP u(gso)=TITLE|MODERATE|INVITE|IC|OOC|BBADMIN|BBMODERATE
&VAR`PERMISSIONS`SELF u(gso)=TITLE

&INC`CHOOSE`G`GAG u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`GAG=%1,%2,%3
&INC`CODE`GAG u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,GAG)=@nspemit %#=announce(GROUPS) ERROR: You lack permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: Must target a group member.;@assert lt(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>))=@nspemit %#=announce(GROUPS) ERROR: Only subordinates may be gagged.;@break gt(getstat(u(gop)/%q<gid1>`GAG,%q<t1objid>),-2)=@nspemit %#=announce(GROUPS)%B%q<t1name> is already gagged.;th setstat(u(gop)/%q<gid1>`GAG,%q<1objid>,u(u(gso)/FUN`GETRANK,%q<gid1>,%:))

&INC`CHOOSE`G`UNGAG u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`UNGAG=%1,%2,%3
&INC`CODE`UNGAG u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,GAG)=@nspemit %#=announce(GROUPS) ERROR: You lack permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: Must target a group member.;@assert lt(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>))=@nspemit %#=announce(GROUPS) ERROR: Only subordinates may be ungagged.;@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),setr(gagger,getstat(u(gop)/%q<gid1>`GAG,%q<t1objid>)))=@nspemit %#=announce(GROUPS) ERROR: That person was Gagged by Rank: %q<gagger>;th delstat(u(gop)/%q<gid1>`GAG,%q<t1objid>)

&INC`CHOOSE`G`SET`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`SET
&INC`CODE`SET u(gso)=@switch/inline gt(strlen(%0),0)=1,{@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,SET)=@nspemit %#=announce(GROUPS) ERROR: You lack permission to do that.;@assert strlen(%0)=@nspemit %#=announce(GROUPS) ERROR: Setting field empty.;@assert match(setr(choices,COLOR|STARTRANK|IC|OOC[if(isadmin(%#),|MAJOR)]),setr(c,ucstr(trim(first(%0)))),|)=@nspemit %#=announce(GROUPS) ERROR: That is not a valid choice. Your options are: [itemize(%q<choices>,|,and,\,)];@switch/inline t(strlen(%1))=0,{&SET`%qc %q<gid1>;@nspemit %#=announce(GROUP) Option restored to group defaults.},1,{@switch/inline hasattr(u(gso)/INC`CODE`SET`CHECK`%qc)=1,{@include u(gso)/INC`CODE`SET`CHECK`%qc};&SET`%qc %q<gid1>=strfirstof(%q<entry>,%1)};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Setting %qc: %1};@nspemit %#=announce(GROUP) You have changed %q<gname1>'s %qc Setting to: %1;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n changed %qc Setting to: %1},OOC,1},0,{@nspemit %#=header(%q<gname1> - Settings);@dolist/inline lattrp(%q<gid1>/SET`*)={@nspemit %#=rjust(last(%i0,`),10): [get(%q<gid1>/%i0)]};@nspemit %#=header()}

&INC`CODE`SET`CHECK`STARTRANK u(gso)=@assert valnum(%1)=@nspemit %#=announce(GROUP) ERROR: STARTRANK must be a number!;@break lte(%1,2)=@nspemit %#=announce(GROUP) ERROR: STARTRANK may not be higher than 3.;@break lte(%1,u(u(gso)/FUN`GETRANK,%q<gid1>,%:))=@nspemit %#=announce(GROUP) ERROR: Cannot raise STARTRANK beyond your own rank.;@assert hasattrp(%q<gid1>/RANK`[abs(%1)])=@nspemit %#=announce(GROUP) ERROR: Cannot find that rank.;th setq(entry,abs(%1))
&INC`CODE`SET`CHECK`IC u(gso)=@assert isint(%1)=@nspemit %#=announce(GROUP) ERROR: IC must be a number!;th setq(entry,t(%1))
&INC`CODE`SET`CHECK`OOC u(gso)=@assert isint(%1)=@nspemit %#=announce(GROUP) ERROR: OOC must be a number!;th setq(entry,t(%1))
&INC`CODE`SET`CHECK`COLOR u(gso)=@nspemit %#=announce(GROUP) NOTE: Colors must be verified manually. Make sure what you enter would be acceptable in ansi()'s first argument!

&INC`CHOOSE`G`ADDRANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADDRANK
&INC`CODE`ADDRANK u(gso)=@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=announce(GROUP) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=announce(GROUP) ERROR: Rank value field empty.;@assert valnum(%0)=@nspemit %#=announce(GROUP) ERROR: Ranks must be whole positive integers.;th setq(newrank,abs(trim(%0)));@break hasattrp(%q<gid1>/RANK`%q<newrank>)=@nspemit %#=announce(GROUP) ERROR: Rank already exists. Use +gnamerank to change the name!;@assert strlen(%1)=@nspemit %#=announce(GROUP) ERROR: Rank name field empty.;@break cor(strmatch(%1,*%r*),strmatch(%1,*%t*))=@nspemit %#=announce(GROUP) ERROR: Rank names may not contain linebreaks or indents.;&RANK`%q<newrank>`NAME %q<gid1>=%1;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Made Rank: %q<newrank> (%1)};@nspemit %#=announce(GROUP) You have created the new Rank %q<newrank> (%1) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n created the new rank %q<newrank> (%1)},OOC,1

&INC`CHOOSE`G`DELRANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DELRANK
&INC`CODE`DELRANK u(gso)=@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=announce(GROUP) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=announce(GROUP) ERROR: Rank value field empty.;@assert valnum(%0)=@nspemit %#=announce(GROUP) ERROR: Ranks must be whole positive integers.;th setq(rank,abs(trim(%0)));@assert hasattrp(%q<gid1>/RANK`%q<rank>)=@nspemit %#=announce(GROUP) ERROR: Added rank does not exist.;@break lte(%q<rank>,3)=@nspemit %#=announce(GROUP) ERROR: Ranks 1-3 cannot be deleted.;th setq(rankname,default(%q<gid1>/RANK`%q<rank>`NAME,Unset));@wipe %q<gid1>/RANK`%q<rank>;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Deleted Rank: %q<rank> (%q<rankname>)};@nspemit %#=announce(GROUP) You have deleted rank %q<rank> (%q<rankname>) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n deleted rank %q<rank> (%q<rankname>)},OOC,1

&INC`CHOOSE`G`NAMERANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`NAMERANK
&INC`CODE`NAMERANK u(gso)=@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=announce(GROUP) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=announce(GROUP) ERROR: Rank value field empty.;@assert valnum(%0)=@nspemit %#=announce(GROUP) ERROR: Ranks must be whole positive integers.;th setq(rank,abs(trim(%0)));@assert hasattrp(%q<gid1>/RANK`%q<rank>)=@nspemit %#=announce(GROUP) ERROR: Added rank does not exist.;@assert strlen(%1)=@nspemit %#=announce(GROUP) ERROR: New rank name field empty.;@break cor(strmatch(%1,*%r*),strmatch(%1,*%t*))=@nspemit %#=announce(GROUP) ERROR: Rank names may not contain linebreaks or indents.;&RANK`%q<rank>`NAME %q<gid1>=trim(%1);@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Renamed Rank: %q<rank> (%1)};@nspemit %#=announce(GROUP) You have renamed rank %q<rank> (%1) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n renamed rank %q<rank> (%1)},OOC,1

&INC`CHOOSE`G`TITLE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`TITLE
&INC`CODE`TITLE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: You are not a member of %q<gname1>.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=announce(GROUPS) ERROR: %q<t1name> is not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,TITLE,if(strmatch(%q<t1>,%#),SELF,GROUP))=@nspemit %#=announce(GROUPS) ERROR: You lack permission to do that.;th setq(title,%1);@break cor(strmatch(%q<title>,*|*),strmatch(%q<title>,*~*),strmatch(%q<title>,*%r*),strmatch(%q<title>,*%t*))=@nspemit %#=announce(GROUP) ERROR: Titles may not contain a ~, |, tab, or linebreak.;th setstat(%q<t1>/D`GROUP`%q<gid1>,TITLE,%q<title>);@nspemit %#=announce(GROUPS) You have set [if(strmatch(%#,%q<t1>),your,%q<t1name>'s)] Title in [ansi(hw,%q<gname1>)] to: %q<title>;@switch/inline strmatch(%#,%q<t1>)=0,{@nspemit %q<t1>=announce(GROUPS) %n has set your title in [ansi(hw,%q<gname1>)] to: %q<title>};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{if(strmatch(%#,%q<t1>),%n,%q<t1name>)'s TITLE set to: %q<title>}

&INC`CHOOSE`G`OPTION`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`OPTION
&INC`CODE`OPTION u(gso)=@switch/inline t(strlen(%0))=1,{@assert strlen(%0)=@nspemit %#=announce(GROUPS) ERROR: Setting field empty.;@assert match(setr(choices,ALLIC|ALLOOC|IC|OOC),setr(c,ucstr(trim(first(%0)))),|)=@nspemit %#=announce(GROUPS) ERROR: That is not a valid choice. Your options are: [itemize(%q<choices>,|,and,\,)];@switch/inline t(match(ALLIC|ALLOOC,%qc))=1,{@switch/inline t(strlen(%1))=0,{th delstat(%#/D`GROUP,%qc);@nspemit %#=announce(GROUP) You have restored your %qc option back to defaults.},{th setstat(%#/D`GROUP,%qc,setr(res,switch(1,cor(t(match(1 yes on true,%1)),gt(%1,0)),1,cor(t(match(0 no off false,%1)),lte(%1,0)),0,0)));@nspemit %#=announce(GROUP) You have set your %qc option to: [if(%q<res>,On,Off)]}},0,{@switch/inline t(strlen(%1))=0,{th delstat(%#/D`GROUP`%q<gid1>,%qc);@nspemit %#=announce(GROUP) You have restored your %qc option back to defaults.},{th setstat(%#/D`GROUP`%q<gid1>,%qc,setr(res,switch(1,cor(t(match(1 yes on true,%1)),gt(%1,0)),1,cor(t(match(0 no off false,%1)),lte(%1,0)),0,0)));@nspemit %#=announce(GROUP) You have set your %qc option to: [if(%q<res>,On,Off)]}}},{@nspemit %#=header(Global Group Options);@dolist/inline ALLIC ALLOOC={@nspemit %#=rjust(%i0,10): [if(strfirstof(getstat(%#/D`GROUP,%i0),1),On,Off)]};@nspemit %#=header(%q<gname1> - Options);@dolist/inline IC OOC={@nspemit %#=rjust(%i0,10): [if(strfirstof(getstat(%#/D`GROUP`%q<gid1>,%i0),1),On,Off)]};@nspemit %#=header()}


@@ CHANNEL CONTROLS

&INC`CHOOSE`G`RADIO`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`CHAT=%0[if(strlen(%1),=%1)],IC,0
&INC`CHOOSE`G`IC`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`CHAT=%0[if(strlen(%1),=%1)],IC,0

&INC`CHOOSE`G`OOC`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`CHAT=%0[if(strlen(%1),=%1)],OOC,0

&INC`CODE`CHAT u(gso)=@assert strlen(%0)=@nspemit %#=What will you say?;@switch/inline gt(%2,0)=0,{@assert strfirstof(u(u(gso)/FUN`GETSET,%q<gid1>,setr(chan,%1)),1)=@nspemit %#=announce(GROUPS) ERROR: That channel is not enabled.;@assert strfirstof(getstat(%#/D`GROUP,ALL%q<chan>),1)=@nspemit %#=announce(GROUPS) ERROR: You have universally disabled Group %q<chan> Channels!;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,%q<chan>)=@nspemit %#=You lack permission to do that!;@break strlen(getstat(%q<gid1>/GAG,%:))=@nspemit %#=announce(GROUPS) ERROR: You have been Gagged from the Group's channels.;@assert strfirstof(getstat(%#/D`GROUP`%q<gid1>,%q<chan>),1)=@nspemit %#=announce(GROUPS) ERROR: Cannot use a channel while it is disabled.};@assert words(setr(list,filterbool(#lambda/cand(isgroupmember(objid(\%0),%q<gid1>),strfirstof(getstat(\%0/D`GROUP,ALL%q<chan>),1),strfirstof(getstat(\%0/D`GROUP`%q<gid1>,%q<chan>),1)),setunion(lwho(),))));@message %q<list>=%0,u(gso)/FUN`CHATFORMAT,##,%#,%0,%q<chan>,%2,%q<gid1>;@include u(gso)/INC`CODE`CHANLOG=%0,%2,%q<chan>,%q<gid1>,%#

&INC`CODE`CHANLOG u(gso)=&[setr(attr,%2CL`[nextslot(%3,%2CL)])] %3=%0;&%q<attr>`BY %3=objid(%4);&%q<attr>`ON %3=secs();&%q<attr>`AS %3=name(%4);&%q<attr>`TYPE %3=%1;@dolist setunion(filterbool(#lambda/gt(sub(get(%3/\%0`ON),secs()),mul(60,60,2)),lattr(%3/%2CL`*)),if(gt(words(lattr(%3/%2CL`?*)),500),elements(1,sortkey(#lambda/last(\%0,`),lattr(%3/%2CL`?*)))))={@wipe %3/%i0}

&INC`CHOOSE`G`RECALL`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RECALL
&INC`CODE`RECALL u(gso)=@assert strlen(%0)=@nspemit %#=announce(GROUPS) ERROR: No chat type entered!;@include u(ccs)/INC`PARTIAL=%0,IC|OOC,|,GROUPS,chat,chat;@switch/inline valnum(%1)=1,{th setq(amt,%1)},{th setq(amt,15)};@nspemit %#=header(%q<gname1> [ucstr(%q<chat>)] Log);@dolist revwords(elements(sortkey(#lambda/last(\%0,`),lattr(%q<gid1>/%q<chat>CL`?*),-n),lnum(1,%q<amt>)))={@nspemit %#=\[[timefmt($a $b $d $H:$M:$S,get(%q<gid1>/%i0`ON))]\] [u(u(gso)/FUN`CHATFORMAT,%#,get(%q<gid1>/%i0`BY),get(%q<gid1>/%i0),%q<chat>,get(%q<gid1>/%i0`TYPE),%q<gid1>,1,get(%q<gid1>/%i0`AS))]}

&FUN`CHATFORMAT u(gso)=if(%6,,switch(1,hasflag(%0,PARANOID),\[[name(%1)]\(%1\)\],hasflag(%0,NOSPOOF),\[[name(%1)]:\]))[ansi(c,<)][ansi(strfirstof(getstat(%0/D`GROUP`%5`COLOR,NAME),u(u(gso)/FUN`GETSET,%5,COLOR),hx),name(%5))]-[if(gt(%4,0),ansi(hr,SYS),ansi(hx,ucstr(%3)))][ansi(c,>)]%B[if(%4,%2,if(u(u(gso)/FUN`GETSET,%5,CHANNELRANK),\[[strfirstof(getstat(%5/RANK,objid(%1)),?)]\]%B)[if(strlen(getstat(%1/D`GROUP`%5,TITLE)),getstat(%1/D`GROUP`%5,TITLE)%B)][speak(if(strlen(%7),&%7,%1),%2)])]

&CMD`CHAT u(gso)=$^(?s)(-|=)(\w+)?(?\: +(.+))?$:th setq(grab,namegrab(filterbool(#lambda/cand(isgroupmember(%:,\%0),strfirstof(getstat(%#/D`GROUP`\%0,switch(%1,-,IC,=,OOC,OOC)),1)),u(u(gso)/FUN`LISTGROUPS)),strfirstof(%2,getstat(%#/D`GROUP,Group))));@include u(gso)/INC`CODE`VALGROUP=%q<grab>,1;th setstat(%#/D`GROUP,Group,%q<gid1>);@assert strlen(%3)=@nspemit %#=What will you say?;@include u(gso)/INC`CODE`CHAT=%3,switch(%1,-,IC,=,OOC,OOC),0
@set u(gso)/CMD`CHAT=regexp

@@ MAINTENANCE
&PLAYER`CONNECT`GROUPCHECK u(gso)=@wait 2=@dolist filterbool(#lambda/match(get(\%0/INVITES),%0),u(u(gso)/FUN`LISTGROUPS))={@nspemit %#=announce(GROUP) The [name(%i0)] have invited you to join their group! To accept, type [pueblize(ansi(h,+gjoin [name(%i0)]),+gjoin [name(%i0)])]}

&STARTUP u(gso)=@trigger u(gso)/TRG`DOCLEANUP

&TRG`DOCLEANUP u(gso)=@dolist u(u(gso)/FUN`LISTGROUPS)={&MEMBERS %i0=filterbool(#lambda/isobjid(\%0),get(%i0/MEMBERS));&INVITES %i0=filterbool(#lambda/isobjid(\%0),get(%i0/INVITES));&RANK %i0=filterbool(#lambda/isobjid(before(\%0,~)),get(%i0/RANK));&RANK %i0=iter(get(%i0/RANK),if(hasattrp(%i1/RANK`[after(%i0,~)]),%i0,before(%i0,~)~[lmath(max,filterbool(#lambda/isint(\%0),iter(lattrp(%i0/RANK`*),last(%i0,~))))]),|,|)};@wait 7200=@trigger u(gso)/TRG`DOCLEANUP

&TRG`CONVERT u(gso)=@assert isdbref(u(gdb));@dolist filterbool(#lambda/isint(\%0),lattr(u(gdb)))={@include u(gso)/INC`CODE`DOCREATE=get(u(gdb)/%i0`NAME),inum(0);&RANK %q<gid[inum(0)]>=iter(get(u(gdb)/%i0`RANK),before(%i0,~)~[bound(add(after(%i0,~),1),1,3)],|,|);@cpattr u(gdb)/%i0`MEMBERS=%q<gid[inum(0)]>/MEMBERS;@cpattr u(gdb)/%i0`BOARDS=%q<gid[inum(0)]>/BOARDS;@dolist get(%q<gid[inum(0)]>/BOARDS)={@tel %i0=%q<gid[inum(1)]>}}

