@@ DEPENDENCIES - Core

@switch/inline isdbref(u(gso))=0,{@tel create(Group System Object <GSO>)=config(master_room)}
&gso u(coi)=locate(config(master_room),Group System Object <GSO>,TXxi)
@parent u(gso)=u(coi)
@power u(gso)=queue
@set u(gso)=WIZARD !NO_COMMAND

@switch/inline isdbref(u(gop))=0,{@switch/inline isdbref(u(gso))=1,{@tel create(Group Object Parent <GOP>)=u(gso)}}
&gop u(coi)=locate(u(gso),Group Object Parent <GOP>,TXxi)
@set u(gop)=WIZARD SAFE

@lock/user:member u(gop)=DBREFLIST^MEMBERS|FUN`ISADMIN/1
@lset u(gop)/member=visual
&FUN`ISADMIN u(gop)=isadmin(%#)

@lock/user:ic u(gop)=FUN`ISADMIN/1|FUN`AUTHCHECK`IC/1
@lset u(gop)/ic=visual
&FUN`AUTHCHECK`IC u(gop)=grpperm(%#,num(me),IC)

@lock/user:ooc u(gop)=FUN`ISADMIN/1|FUN`AUTHCHECK`OOC/1
@lset u(gop)/ooc=visual
&FUN`AUTHCHECK`OOC u(gop)=grpperm(%#,num(me),OOC)

@lock/user:moderate u(gop)=FUN`ISADMIN/1|FUN`AUTHCHECK`MODERATE/1
@lset u(gop)/moderate=visual
&FUN`AUTHCHECK`MODERATE u(gop)=grpperm(%#,num(me),MODERATE)

&RANK`1`NAME u(gop)=Leader
&RANK`1`PERM u(gop)=MODERATE MANAGE GBADMIN IC OOC GEMIT
&RANK`2`NAME u(gop)=Second
&RANK`2`PERM u(gop)=MODERATE MANAGE GBADMIN IC OOC GEMIT
&RANK`3`NAME u(gop)=Officer
&RANK`3`PERM u(gop)=MODERATE MANAGE IC OOC
&RANK`4`NAME u(gop)=Member
&RANK`4`PERM u(gop)=
&RANK`ALL`PERM u(gop)=IC OOC
&SET`STARTRANK u(gop)=4
&SET`IC u(gop)=1
&SET`OOC u(gop)=1
&SET`MAJOR u(gop)=0
&SET`SYSALERT u(gop)=3
&SET`SORT u(gop)=99

th attrib_set(u(cco-db)/VAR`CATEGORIES,setunion(get(u(cco-db)/VAR`CATEGORIES),GROUP,|,|))
&VAR`CATEGORIES`GROUP u(cco-db)=BORDER|BORDERTEXT|BORDERDOT|ICNAME|OOCNAME|OOCTAG|SYSTAG|ICDIVIDER|OOCDIVIDER|ICEDGE|OOCEDGE
&VAR`CATEGORIES`GROUPMODE u(cco-db)=NAME|ICNAME|OOCNAME|OOCTAG|SYSTAG|ICDIVIDER|OOCDIVIDER|ICEDGE|OOCEDGE

&COLOR`GROUP`NAME u(pco)=hx
&COLOR`GROUP`ICNAME u(pco)=hx
&COLOR`GROUP`OOCNAME u(pco)=hx
&COLOR`GROUP`ICDIVIDER u(pco)=c
&COLOR`GROUP`ICEDGE u(pco)=c
&COLOR`GROUP`OOCDIVIDER u(pco)=c
&COLOR`GROUP`OOCEDGE u(pco)=c
&COLOR`GROUP`OOCTAG u(pco)=r

&CMD`+GROUP u(gso)=$^(?s)(?\:\+)?g(roups|roup|who|create|desc|rename|set|option|muzzle|unmuzzle|gag|ungag|title|invite|invites|uninvite|join|refuse|add|leave|kick|addperm|delperm|addpriv|delpriv|privlist|rank|addrank|delrank|namerank|disband|ooc|ic|radio|emit|focus|log|recall)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@include u(gso)/INC`CHOOSE=+g,%1,%2,%3,%4
@set u(gso)/CMD`+GROUP=regexp

&RFN`MSGHEAD u(gso)=msghead(v(VAR`MSGHEAD))
&RFN`HEADER u(gso)=header(%0,,GROUP`BORDER,GROUP`BORDERDOT,GROUP`BORDERTEXT)
&RFN`SUBHEADER u(gso)=subheader(%0,,GROUP`BORDER,GROUP`BORDERDOT,GROUP`BORDERTEXT)
&RFN`SEPARATOR u(gso)=separator(%0,,GROUP`BORDER,GROUP`BORDERDOT,GROUP`BORDERTEXT)
&VAR`MSGHEAD u(gso)=GROUP

&CMD`+DIVISION u(gso)=$^(?s)(?\:\+)?d(ivisions|assign|kick|unassigned|create|order|rename|disband|rank|title|addrank|delrank|namerank)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@include u(gso)/INC`CHOOSE=+d,%1,%2,%3,%4
@set u(gso)/CMD`+DIVISION=regexp

&INC`CHOOSE u(gso)=@switch/inline 1=cor(strmatch(%0,+g),strmatch(%0,+d)),{@include u(ccs)/INC`PARTIAL=%2,setunion(get(u(gso)/VAR`PLAYFLAGS`%0`%1),if(isadmin(%#),get(u(gso)/VAR`ADMINFLAGS`%0`%1)),|,|),|,GROUP,switch,switch;@include u(gso)/INC`CHOOSE`%0`%1`[strfirstof(%q<switch>,MAIN)]=%3,%4},{@nspemit %#=u(RFN`MSGHEAD) ERROR: Unknown code error. Please contact staff.}

&VAR`PLAYFLAGS`+G`OOC u(gso)=GAG|UNGAG|ON|OFF|RECALL
&VAR`PLAYFLAGS`+G`IC u(gso)=GAG|UNGAG|ON|OFF|RECALL
&VAR`PLAYFLAGS`+G`RADIO u(gso)=GAG|UNGAG|ON|OFF|RECALL

&INC`CHOOSE`+G`CREATE`MAIN u(gso)=@include u(gso)/INC`CODE`CREATE
&INC`CODE`CREATE u(gso)=@assert isadmin(%#)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied. Admin-only command.;@include u(gso)/INC`CODE`DOCREATE=%0,1;@nspemit %#=u(RFN`MSGHEAD) You have created the [ansi(hw,%q<gname1>)];@switch/inline setr(res,t(strlen(%1))[isdbref(pmatch(%1))])=11,{@include u(ccs)/INC`CHECKPC=%1,1,GROUPS;@include u(gso)/INC`CODE`ADDTOGROUP=%q<gid1>,%q<t1objid>,{u(RFN`MSGHEAD) %n added you to the %q<gname1> Group!},1;@nspemit %#=u(RFN`MSGHEAD) You set %q<t1name> as leader of the %q<gname1>!},10,{@nspemit %#=u(RFN`MSGHEAD) The group was created, but '%1' does not match a player!},0*,{@nspemit %#=u(RFN`MSGHEAD) The Group '%0' was created.};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Created the Group.[if(isobjid(%q<t1objid>),%B%q<t1name> is its leader.)]};@include u(gso)/INC`CODE`SWITCH=%q<gid1>

&INC`CODE`DOCREATE u(gso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Group name field empty.;@assert valid(name,%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Bad name for a group!;@break isdbref(locate(u(gop),%0,TXxi))=@nspemit %#=u(RFN`MSGHEAD) ERROR: A Group already has that name!;@assert strlen(%0);th setr(gid%1,create(setr(gname%1,trim(stripansi(%0)))));@assert isdbref(%q<gid%1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Group could not be created.;@tel %q<gid%1>=u(gop);@parent %q<gid%1>=u(gop);@power %q<gid%1>=many_attribs;@set %q<gid%1>=WIZARD SAFE

&INC`CHOOSE`+D`CREATE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`CREATE`DIV
&INC`CODE`CREATE`DIV u(gso)=@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Division name field empty.;@assert valid(name,%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Division name was not accepted. Keep it simple!;@break words(wildgrepi(%q<gid1>,DIVISION`*,setr(divname,trim(%0))))=@nspemit %#=u(RFN`MSGHEAD) ERROR: A division already has that name.;&[setr(attr,DIVISION`[setr(div,nextslot(%q<gid1>,DIVISION))])] %q<gid1>=%q<divname>;&%q<attr>`RANK`1 %q<gid1>=Division Leader;&%q<attr>`RANK`2 %q<gid1>=Second in Command;&%q<attr>`RANK`3 %q<gid1>=Member;@switch/inline setr(res,t(strlen(%1))[isdbref(pmatch(%1))])=11,{@include u(ccs)/INC`CHECKPC=%1,1,GROUPS;@include u(gso)/INC`CODE`ADDTODIVISION=%q<gid1>,%q<t1objid>,{u(RFN`MSGHEAD) %n added you to the %q<gname1>'s new division: %0},1,%q<div>;@nspemit %#=u(RFN`MSGHEAD) You set %q<t1name> as leader of the %q<gname1>'s Division: %0!},10,{@nspemit %#=u(RFN`MSGHEAD) The Division was created, but '%1' does not match a player!},0*,{@nspemit %#=u(RFN`MSGHEAD) The Division '%0' was created.};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Created the Division '%0' as division %q<div>.[if(isobjid(%q<t1objid>),%B%q<t1name> is its leader.)]}

&FUN`FINDGROUP u(gso)=namegrab(u(u(gso)/FUN`LISTGROUPS),%0)

&FUN`LISTGROUPS u(gso)=sort(sort(filterbool(#lambda/strmatch(parent(\%0),u(gop)),lthings(u(gop))),namei),attr:SET`SORT)

&INC`CODE`MAKELOG u(gso)=&[setr(log,LOG`[nextslot(%1,LOG)])] %1=%2;&%q<log>`SUBMITTER %1=%0;&%q<log>`SUBMITTED %1=secs()

&INC`CODE`VALGROUP u(gso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No group entered to check.;@assert valnum(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Code error, contact staff.;@assert isdbref(setr(gid%1,u(u(gso)/FUN`FINDGROUP,%0)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Group not found.;th setq(gname%1,name(%q<gid%1>))

&INC`CODE`VALDIV u(gso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No division entered to check.;@switch/inline valnum(%0)=1,{@assert hasattr(%q<gid1>/DIVISION`[setr(div,trim(%0))])=@nspemit %#=u(RFN`MSGHEAD) ERROR: Division by that ID does not exist.},0,{@assert words(setr(div,last(first(wildgrepi(%q<gid1>,DIVISION`*,%0*)),`)))=u(RFN`MSGHEAD) ERROR: Division called '%0' not found.};th setq(divname,get(%q<gid1>/DIVISION`%q<div>))

&INC`CHOOSE`+G`RENAME`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RENAME
&INC`CODE`RENAME u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,RENAME)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission Denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Name field empty.;@break isdbref(locate(u(gop),%0,TXxi))=@nspemit %#=u(RFN`MSGHEAD) ERROR: A Group already has that name.;@name %q<gid1>=%0;@include u(gso)/INC`CODE`MAKELOG=%:,q<gid1>,{Group renamed to: %0};@include u(gso)/INC`CODE`CHAT={%n Renamed the Group to %0},OOC,1

&INC`CHOOSE`+G`DESC`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DESC
&INC`CODE`DESC u(gso)=@assert isadmin(%#)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission Denied.;@assert strlen(%0%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Desc field empty.;@describe %q<gid1>=%0%1;@include u(gso)/INC`CODE`MAKELOG=%:,q<gid1>,{Group redesced to: %0%1};@include u(gso)/INC`CODE`CHAT={%n described the group: %0%1},OOC,1

&INC`CHOOSE`+D`RENAME`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RENAME`DIV
&INC`CODE`RENAME`DIV u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission Denied.;@include u(gso)/INC`CODE`VALDIV=%0;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Name field empty.;@assert valid(name,%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Division name was not accepted. Keep it simple!;@break words(wildgrepi(%q<gid1>,DIVISION`*,setr(newdivname,trim(%1))))=@nspemit %#=u(RFN`MSGHEAD) ERROR: A division by that name already exists.;&DIVISION`%q<div> %q<gid1>=%1;@include u(gso)/INC`CODE`MAKELOG=%:,q<gid1>,{Division %q<div>: %q<divname> renamed to: %q<newdivname>};@include u(gso)/INC`CODE`CHAT={%n Renamed Division %q<div>: %q<divname> to %q<newdivname>},OOC,1

&INC`CHOOSE`+D`ORDER`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ORDER`DIV
&INC`CODE`ORDER`DIV u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission Denied.;@include u(gso)/INC`CODE`VALDIV=%0;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Order field empty.;@assert valnum(setr(ord,trim(%1)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Order must be a whole positive number.;&DIVISION`%q<div>`ORDER %q<gid1>=%q<ord>;@include u(gso)/INC`CODE`MAKELOG=%:,q<gid1>,{Division %q<div>: %q<divname> order set to: %q<ord>};@include u(gso)/INC`CODE`CHAT={%n Set Division %q<div>: %q<divname> ORDER to %q<ord>},OOC,1

&GFN`ISGROUPMEMBER u(gso)=elock(if(isdbref(%1),%1,u(FUN`FINDGROUP,%1))/MEMBER,%0)

&GFN`GROUPS u(gso)=filterbool(#lambda/match(get(\%0/MEMBERS),objid(%0)),default(%0/D`GROUPS,u(FUN`LISTGROUPS)))

&INC`CHOOSE`+G`DISBAND`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DISBAND
&INC`CODE`DISBAND u(gso)=@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,DISBAND)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@switch/inline t(u(FUN`GETSET,%q<gid1>,MAJOR))=1,{@assert hasflag(%#,WIZARD)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Disbanding of MAJOR groups is WIZ-ONLY.};@assert strmatch(%0,%q<gname1>)=@nspemit %#=u(RFn`MSGHEAD) ERROR: To disband a group, you must also enter its exact name.;@include u(ccs)/INC`VERIFY={WARNING: This will completely disband %q<gname1>. Are you sure you want to continue? Enter the same command again within 10 seconds to Verify!},FAC DELETE %q<gid1>,v(VAR`MSGHEAD);@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n has Disbanded the Group!},OOC,1;@parent %q<gid1>;@name %q<gid1>=%q<gname1>-OLD;@nspemit %#=u(RFN`MSG) The Group has been disbanded. It has been moved to storage. If this was in error, please have a wizard [ansi(h,@parent %q<gid1>=[u(gop)])] and [ansi(h,@name %q<gid1>=%q<gname1>)];@nscemit/noisy u(cmo`staffrep)={ansi(h,%n) has DISBANDED Group: %q<gname1>. If this was in error, a wizard can undo this by typing [ansi(h,@parent %q<gid1>=[u(gop)])] and [ansi(h,@name %q<gid1>=%q<gname1>)]. If This was intentional, a wizard will need to manually dispose of object %q<gid1> and any Boards it contains. Deletion or relocation will initiate player setting cleanup.}

&PLAYER`CONNECT`GROUPCLEAN u(gso)=@assert nattr(%0/D`GROUP`*);@assert words(setr(dbs,filterbool(#lambda/strmatch(#*,\%0),iter(lattr(%0/D`GROUP`*),last(%i0,`)))));@assert words(setr(purge,setdiff(%q<dbs>,lthings(u(gop)))));@dolist %q<purge>={@wipe %0/D`GROUP`%i0}

&PLAYER`DISCONNECT`CLEANGAG u(gso)=@break %1;@wipe %0/D`GROUP`*`*GAG

&INC`CHOOSE`+D`DISBAND`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DISBAND`DIV
&INC`CODE`DISBAND`DIV u(gso)=@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@include u(gso)/INC`CODE`VALDIV=%0;@include u(ccs)/INC`VERIFY={ansi(hr,WARNING:) This will completely disband %q<gname1>'s [numth(%q<div>)] Division: %q<divname>. Are you sure you want to continue? Enter the same command again within 10 seconds to Verify!},DIV DISBAND %q<gid1> %q<div>,v(VAR`MSGHEAD);@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n has Disbanded Division %q<div>: %q<divname>},OOC,1;@dolist get(%q<gid1>/DIVISION`%q<div>`MEMBERS)={@wipe %i0/D`GROUP`%q<gid1>`DIVISION`%q<div>};@wipe %q<gid1>/DIVISION`%q<div>

@@ GROUP LISTING

&INC`CHOOSE`+G`ROUP`MAIN u(gso)=@switch/inline gt(strlen(%0),0)=1,{@include u(gso)/INC`CODE`SWITCH},0,{@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`LISTMEMBERS}

&INC`CHOOSE`+G`WHO`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(%0,getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`LISTMEMBERS=%0,%1,1

&INC`CHOOSE`+G`FOCUS`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=%0,1;@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group!;@nspemit %#=u(RFN`MSGHEAD) You are now managing: [ansi(hw,%q<gname1>)];th setstat(%#/D`GROUP,Group,%q<gid1>)

&INC`CODE`SWITCH u(gso)=@include u(gso)/INC`CODE`VALGROUP=%0,1;@include u(gso)/INC`CODE`LISTMEMBERS=0,1;@switch/inline cand(isgroupmember(%:,%q<gid1>),not(strmatch(getstat(%#/D`GROUP,Group),%q<gid1>)))=1,{@nspemit %#=u(RFN`MSGHEAD) You are now managing: [ansi(hw,%q<gname1>)];th setstat(%#/D`GROUP,Group,%q<gid1>)}

&INC`CODE`LISTMEMBERS u(gso)=@nspemit %#=header(if(%2,ONLINE%B)MEMBERS: %q<gname1>);@switch/inline cand(not(%2),hasattr(%q<gid1>/DESCRIBE))=1,{@nspemit %#=get(%q<gid1>/DESCRIBE);@nspemit %#=separator()};@switch/inline cand(gt(strlen(setr(type,u(u(gso)/FUN`GETSET,%q<gid1>,TYPE))),0),hasattr(u(gso)/INC`CODE`LISTMEMBERS`%q<type>))=1,{@include u(gso)/INC`CODE`LISTMEMBERS`%q<type>},0,{@nspemit %#=align(20 20 25 10,Name,Rank,Title,Last/Idle)%R[separator()];@dolist/inline sortkey(#lambda/u(FUN`GETRANK,%q<gid1>,\%0,1),if(%2,setinter(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),lwhoid(%#),%b,namei),sort(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),namei)),n)={@nspemit %#=align(20 20 25 >10,pueblize(ansi(custcolor(%#,GROUP`GWHONAME),name(%i0)),+finger [name(%i0)]),get(%q<gid1>/RANK`[u(FUN`GETRANK,%q<gid1>,%i0,1)]`NAME),get(%i0/D`GROUP`%q<gid1>`TITLE),lastidle(%i0,%#))}};@nspemit %#=header()

&INC`CODE`LISTMEMBERS`FACTION u(gso)=@nspemit %#=iter(lnum(1,div(width(%#),38)),Name[space(29)]Rank%B);@nspemit %#=separator();th step(FUN`LISTMEMBERS`FACTION,sortkey(#lambda/u(FUN`GETRANK,%q<gid1>,\%0,1),if(%2,setinter(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),lwhoid(%#),%b,namei),sort(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),namei)),n),div(width(%#),38))

&FUN`LISTMEMBERS`FACTION u(gso)=nspemit(%#,table(iter(lnum(0,sub(%+,1)),pueblize(ansi(custcolor(%#,GROUP`GWHONAME),setr(name,name(v(%i0)))),+finger [name(v(%i0))])%B[rjust(left(setr(rank,u(FUN`GETRANK,%q<gid1>,v(%i0),1)-[strfirstof(get(v(%i0)/D`GROUP`%q<gid1>`TITLE),get(%q<gid1>/RANK`[u(FUN`GETRANK,%q<gid1>,v(%i0),1)]`NAME))]),sub(37,strlen(%q<name>),1)),sub(37,strlen(%q<name>),1))],%b,|),37,width(%#),|))

&FUN`LISTMEMBERS`FACTION u(gso)=nspemit(%#,trim(iter(iter(lnum(0,sub(%+,1)),pueblize(ansi(custcolor(%#,GROUP`GWHONAME),setr(name,name(v(%i0)))),+finger [name(v(%i0))])%B[rjust(left(setr(rank,u(FUN`FACRANK,%q<gid1>,v(%i0))),sub(37,strlen(%q<name>),1)),sub(37,strlen(%q<name>),1))],%b,|),ljust(%i0,38),|,%b)))

&FUN`FACRANK u(gso)=u(FUN`GETRANK,%0,%1,1)-[strfirstof(get(%1/D`GROUP`%0`TITLE),get(%0/RANK`[u(FUN`GETRANK,%0,%1,1)]`NAME))]

&INC`CODE`LISTMEMBERS`DIVISIONAL u(gso)=@nspemit %#=align(19 5 21 20 10,Name,R#,Rank,Title,Last/Idle);@nspemit %#=separator(Command Staff);@dolist/inline sortkey(#lambda/u(FUN`GETRANK,%q<gid1>,\%0,1),filterbool(#lambda/lte(u(FUN`GETRANK,%q<gid1>,\%0,1),u(FUN`GETSET,%q<gid1>,COMMAND)),setr(mainlist,if(%2,setinter(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),lwhoid(%#),%b,namei),sort(filterbool(#lambda/isobjid(\%0),get(%q<gid1>/MEMBERS)),namei)))),n)={@nspemit %#=align(19 5 21 19 >10,pueblize(ansi(custcolor(%#,GROUP`GWHONAME),name(%i0)),+finger [name(%i0)]),u(FUN`GETRANK,%q<gid1>,%i0,1),get(%q<gid1>/RANK`[u(FUN`GETRANK,%q<gid1>,%i0,1)]`NAME),get(%i0/D`GROUP`%q<gid1>`TITLE),lastidle(%i0,%#))};@dolist/inline sortkey(#lambda/get(%q<gid1>/\%0`ORDER),lattr(%q<gid1>/DIVISION`*),n)={@nspemit %#=separator(get(%q<gid1>/%i0));@dolist/inline sortkey(#lambda/get(\%0/D`GROUP`%q<gid1>`%i0`RANK),filterbool(#lambda/match(get(%q<gid1>/%i0`MEMBERS),\%0),%q<mainlist>),n)={@nspemit %#=align(19 5 21 19 >10,pueblize(ansi(custcolor(%#,GROUP`GWHONAME),name(%i0)),+finger [name(%i0)]),u(FUN`GETRANK,%q<gid1>,%i0,1)-[get(%i0/D`GROUP`%q<gid1>`%i1`RANK)],get(%q<gid1>/%i1`RANK`[get(%i0/D`GROUP`%q<gid1>`%i1`RANK)]),default(%i0/D`GROUP`%q<gid1>`%i1`TITLE,%i0/D`GROUP`%q<gid1>`TITLE,),lastidle(%i0,%#))}};@switch/inline gt(words(setr(unset,filterbool(#lambda/cand(gt(u(FUN`GETRANK,%q<gid1>,\%0,1),u(FUN`GETSET,%q<gid1>,COMMAND)),not(words(wildgrepi(%q<gid1>,DIVISION`*`MEMBERS,*\%0*)))),%q<mainlist>))),0)=1,{@nspemit %#=separator(Unassigned Members);@dolist/inline sortkey(#lambda/u(FUN`GETRANK,%q<gid1>,\%0,1),%q<unset>)=@nspemit %#=align(19 5 21 19 >10,pueblize(ansi(custcolor(%#,GROUP`GWHONAME),name(%i0)),+finger [name(%i0)]),u(FUN`GETRANK,%q<gid1>,%i0,1),get(%q<gid1>/RANK`[u(FUN`GETRANK,%q<gid1>,%i0,1)]`NAME),get(%i0/D`GROUP`%q<gid1>`TITLE),lastidle(%i0,%#))}

&INC`CHOOSE`+D`IVISIONS`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`LISTDIVS

&INC`CODE`LISTDIVS u(gso)=@nspemit %#=u(RFN`HEADER,DIVISIONS: %q<gname1>);@nspemit %#=align(24 21 20 10,Name,Rank,Title,Last/Idle);@dolist/inline sortkey(#lambda/get(%q<gid1>/\%0`ORDER),lattr(%q<gid1>/DIVISION`*))={@nspemit %#=separator(ID \([last(%i0,`)]\) - [get(%q<gid1>/%i0)] - ORDER [get(%q<gid1>/%i0`ORDER)]);@dolist/inline sortkey(#lambda/get(\%0/D`GROUP`%q<gid1>`%i0`RANK),filterbool(#lambda/isobjid(\%0),get(%q<gid1>/%i0`MEMBERS)),n)={@nspemit %#=align(24 21 19 >10,pueblize(ansi(custcolor(%#,GROUP`GWHONAME),name(%i0)),+finger [name(%i0)]),get(%q<gid1>/%i1`RANK`[get(%i0/D`GROUP`%q<gid1>`%i1`RANK)]),default(%i0/D`GROUP`%q<gid1>`%i1`TITLE,%i0/D`GROUP`%q<gid1>`TITLE,),lastidle(%i0,%#))}};@nspemit %#=header()

&INC`CHOOSE`+G`ROUPS`MAIN u(gso)=@include u(gso)/INC`CODE`GROUPLIST

&FUN`GETSET u(gso)=get(%0/SET`%1)

&FUN`LISTRANKNAMES u(gso)=itemize(strfirstof(iter(filterbool(#lambda/eq(u(FUN`GETRANK,%0,\%0,1),%1),get(%0/MEMBERS)),pueblize(name(%i0),+finger [name(%i0)]),%b,|),None),|,and,\,)

&INC`CODE`GROUPLIST u(gso)=@nspemit %#=header(mudname() Group List);@nspemit %#=separator(Major Groups)%R[align(27 20 20 7,Name,Leader,Second,Members)];@dolist/inline filterbool(#lambda/u(u(gso)/FUN`GETSET,\%0,MAJOR),u(u(gso)/FUN`LISTGROUPS))={@nspemit %#=align(27 20 20 7,pueblize(ansi(strfirstof(u(u(gso)/FUN`GETSET,%i0,COLOR),n),name(%i0)),+group [name(%i0)]),u(u(gso)/FUN`LISTRANKNAMES,%i0,1),u(u(gso)/FUN`LISTRANKNAMES,%i0,2),rjust(words(setinter(lwho(%#),setr(members,get(%i0/MEMBERS)))),2,0)/[rjust(words(%q<members>),2,0)])};@nspemit %#=separator(Minor Groups)%R[align(27 20 20 7,Name,Leader,Second,Members)];@dolist/inline filterbool(#lambda/not(u(u(gso)/FUN`GETSET,\%0,MAJOR)),u(u(gso)/FUN`LISTGROUPS))={@nspemit %#=align(27 20 20 7,pueblize(ansi(strfirstof(u(u(gso)/FUN`GETSET,%i0,COLOR),n),name(%i0)),+group [name(%i0)]),u(u(gso)/FUN`LISTRANKNAMES,%i0,1),u(u(gso)/FUN`LISTRANKNAMES,%i0,2),rjust(words(setinter(lwho(%#),setr(members,get(%i0/MEMBERS)))),2,0)/[rjust(words(%q<members>),2,0)])};@nspemit %#=subheader('+group <groupname>' for details)

@@ MEMBERSHIP CONTROL
&INC`CODE`ADDTOGROUP u(gso)=&MEMBERS %0=setunion(get(%0/MEMBERS),objid(%1));@nspemit %1=%2;&D`GROUP`%0`RANK %1=strfirstof(%3,u(u(gso)/FUN`GETSET,%0,STARTRANK),3);&INVITES %0=setdiff(get(%0/INVITES),objid(%1));&D`GROUPS %1=setunion(get(%1/D`GROUPS),num(%0))

&INC`CODE`ADDTODIVISION u(gso)=&DIVISION`%4`MEMBERS %0=setunion(get(%0/DIVISION`%1`MEMBERS),objid(%1));@nspemit %1=%2;&D`GROUP`%0`DIVISION`%4`RANK %1=%3

&INC`CODE`REMFROMGROUP u(gso)=&MEMBERS %0=setdiff(get(%0/MEMBERS),objid(%1));@nspemit %1=%2;th delstat(%0/RANK,objid(%1));@wipe %1/D`GROUP`%0;@dolist/inline wildgrepi(%0,DIVISION`*`MEMBERS,*[objid(%1)]*)=@include u(gso)/INC`CODE`REMFROMDIVISION=%0,%1,,,elements(%i0,2,`);&D`GROUPS %1=setdiff(get(%1/D`GROUPS),num(%0))

&INC`CODE`REMFROMDIVISION u(gso)=&DIVISION`%4`MEMBERS %0=setdiff(get(%0/DIVISION`%4`MEMBERS),objid(%1));@nspemit %1=%2;th delstat(%0/DIVISION`%4`RANK,objid(%1))

&INC`CHOOSE`+G`ADD`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(if(strlen(%1),%1),getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADD
&INC`CODE`ADD u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,ADD)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,v(VAR`MSGHEAD);@break match(get(u(gop)/%q<gid1>`MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are already a member of the Group.;@include u(gso)/INC`CODE`ADDTOGROUP=%q<gid1>,%q<t1objid>,u(RFN`MSGHEAD) %n added you to the %q<gname1> Group!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Added %q<t1name>.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n added %q<t1name> to the Group!},OOC,1

&INC`CHOOSE`+D`ASSIGN`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ASSIGN`DIV
&INC`CODE`ASSIGN`DIV u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,v(VAR`MSGHEAD);@assert match(get(%q<gid1>/MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are not a member of the Group!;@include u(gso)/INC`CODE`VALDIV=%1;@break match(get(%q<gid1>/DIVISION`%q<div>`MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are already a member of that Division.;@include u(gso)/INC`CODE`ADDTODIV=%q<gid1>,%q<t1objid>,{u(RFN`MSGHEAD) %n added you to the %q<gname1>'s [numth(%q<div>)] Division: %q<divname>},%q<div>;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Added %q<t1name> to Division %q<div>: %q<divname>};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n added %q<t1name> to the [numth(%q<div>)] Division: %q<divname>},OOC,1

&INC`CODE`ADDTODIV u(gso)=&DIVISION`%3`MEMBERS %0=setunion(get(%0/DIVISION`%3`MEMBERS),%1);@nspemit %1=%2;&D`GROUP`%0`DIVISION`%3`RANK %1=lmath(max,iter(lattr(%0/DIVISION`%3`RANK`*),last(%i0,`)))

&INC`CODE`REMFROMDIV u(gso)=&DIVISION`%3`MEMBERS %0=setdiff(get(%0/DIVISION`%3`MEMBERS),%1);@nspemit %1=%2;@wipe %1/D`GROUP`%0`DIVISION`%3

&INC`CHOOSE`+D`KICK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`KICK`DIV
&INC`CODE`KICK`DIV u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert match(get(%q<gid1>/MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are not a member of the Group.;@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot kick those of higher rank.;@include u(gso)/INC`CODE`VALDIV=%1;@assert match(get(%q<gid1>/DIVISION`%q<div>`MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are not a member of that Division.;@include u(gso)/INC`CODE`REMFROMDIV=%q<gid1>,%q<t1objid>,{u(RFN`MSGHEAD) %n removed you from the %q<divname> division!},%q<div>;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> was kicked from Division %q<div>: %q<divname>};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n removed %q<t1name> from Division %q<div>: %q<divname>},OOC,1

&INC`CHOOSE`+G`LEAVE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`LEAVE
&INC`CODE`LEAVE u(gso)=@assert match(get(%q<gid1>/MEMBERS),%:)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@break eq(1,u(u(gso)/FUN`GETRANK,%q<gid1>,%:))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Leaders may not leave their groups. Please contact staff.;@include u(gso)/INC`CODE`REMFROMGROUP=%q<gid1>,%:,{u(RFN`MSGHEAD) You left the %q<gname1> Group!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> left the group.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n left the Group},OOC,1

&INC`CHOOSE`+G`KICK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`KICK
&INC`CODE`KICK u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert match(get(%q<gid1>/MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are not a member of the Group.;@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot kick those of higher rank.;@include u(gso)/INC`CODE`REMFROMGROUP=%q<gid1>,%q<t1objid>,{u(RFN`MSGHEAD) %n removed you from the %q<gname1> Group!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> was kicked.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n removed %q<t1name> from the Group},OOC,1

&INC`CHOOSE`+G`INVITE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`INVITE
&INC`CODE`INVITE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@switch/inline gt(strlen(%0),0)=1,{@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@break isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They are already a member of the Group.;@break match(get(%q<gid1>/INVITES),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: %q<t1name> has already been invited to %q<gname1>.;&INVITES %q<gid1>=setunion(get(%q<gid1>/INVITES),%q<t1objid>);@nspemit %q<t1>=%n has invited you to join the %q<gname1>! To accept, type [pueblize(ansi(h,+gjoin %q<gname1>),+gjoin %q<gname1>)] or Refuse using [pueblize(ansi(h,+grefuse %q<gname1>),+grefuse %q<gname1>)].;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Invite sent to %q<t1name>.};@nspemit %#=u(RFN`MSGHEAD) You have invited %q<t1name> to the %q<gname1>},0,{@include u(gso)/INC`MAIN`SHOWINVITES}

&INC`CHOOSE`+G`UNINVITE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`UNINVITE
&INC`CODE`UNINVITE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@switch/inline gt(strlen(%0),0)=1,{@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@break isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: They're already a member of the group.;@break match(get(%q<gid1>/INVITES),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: %q<t1name> has not been invited to %q<gname1>.;&INVITES %q<gid1>=setdiff(get(%q<gid1>/INVITES),%q<t1objid>);@nspemit %q<t1>=u(RFN`MSGHEAD) %n withdrew your invitation to join the %q<gname1>!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Invite withdrawn from %q<t1name>.}},0,{@include u(gso)/INC`MAIN`SHOWINVITES}

&INC`MAIN`SHOWINVITES u(gso)=@nspemit %#=header(%q<gname1>'s Pending Invites);@nspemit %#=itemize(iter(setr(invites,filterbool(#lambda/isobjid(\%0),get(u(gop)/%q<gid1>`INVITES))),name(%i0),%b,|),|,and,\,);@nspemit %#=header();&INVITES %q<gid1>=%q<invites>

&INC`CHOOSE`+G`JOIN`MAIN u(gso)=@switch/inline gt(strlen(%0),0)=1,{@include u(gso)/INC`CODE`VALGROUP=%0,1;@include u(gso)/INC`CODE`JOIN},0,{@include u(gso)/INC`CODE`MYINVITES}
&INC`CODE`JOIN u(gso)=@break match(get(u(gop)/%q<gid1>`MEMBERS),%:)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are already a member of the Group.;@assert match(get(%q<gid1>/invites),%:)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You have not been invited to join that Group.;@include u(gso)/INC`CODE`ADDTOGROUP=%q<gid1>,%:,{u(RFN`MSGHEAD) You have joined the %q<gname1> Group!};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> joined.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n joined the Group!},OOC,1

&INC`CHOOSE`+G`REFUSE`MAIN u(gso)=@switch/inline gt(strlen(%0),0)=1,{@include u(gso)/INC`CODE`VALGROUP=%0,1;@include u(gso)/INC`CODE`REFUSE},0,{@include u(gso)/INC`CODE`MYINVITES}
&INC`CODE`REFUSE u(gso)=@break match(get(u(gop)/%q<gid1>`MEMBERS),%:)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are already a member of the Group.;@assert match(get(%q<gid1>/INVITES),%:)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You have not been invited to join that Group.;&INVITES %q<gid1>=setdiff(get(%q<gid1>/INVITES),%:);@nspemit %#=u(RFN`MSGHEAD) You have rejected joining the %q<gname1> Group!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{%q<t1name> rejected joining.};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n rejected [poss(%#)] invitation!},OOC,1

&INC`CHOOSE`+G`INVITES`MAIN u(gso)=@include u(gso)/INC`CODE`MYINVITES
&INC`CODE`MYINVITES u(gso)=@assert setr(groups,filterbool(#lambda/match(get(\%0/INVITES),%:),u(u(gso)/FUN`LISTGROUPS)))=@nspemit %#=u(RFN`MSGHEAD) You have no pending invites.;@nspemit %#=header(Your Group Invites);@nspemit %#=iter(%q<groups>,pueblize(name(%i0),+gjoin [name(%i0)]),,%R);@nspemit %#=header()

&INC`CHOOSE`+G`RANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RANK
&INC`CODE`RANK u(gso)=@switch/inline t(strlen(%0))=1,{@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank field empty.;@assert valnum(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole numbers.;@assert lt(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: New Rank must be less than your own.;@assert cor(isadmin(%#),lt(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot change the rank of superiors.;@assert hasattrp(%q<gid1>/RANK`%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank '%1' does not exist!;&D`GROUP`%q<gid1>`RANK %q<t1objid>=%1;@nspemit %q<t1>=u(RFN`MSGHEAD) %n has Changed your rank in the %q<gname1> Group to %1!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Changed %q<t1name>'s Rank to %1};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n set %q<t1name>'s Rank to %1},OOC,1},{@nspemit %#=header(Ranks: %q<gname1>);@nspemit %#=align(5 28 30,Rank,Name,Permissions);@dolist/inline sortkey(#lambda/last(\%0,`),filterbool(#lambda/isint(last(\%0,`)),lattrp(%q<gid1>/RANK`*)))={@nspemit %#=u(u(gso)/FUN`RANKDISPLAY,%q<gid1>,last(%i0,`));@nspemit %#=separator()};@nspemit %#=u(u(gso)/FUN`RANKDISPLAY,%q<gid1>,ALL);@nspemit %#=header()}

&FUN`RANKDISPLAY u(gso)=align(5 28 [sub(width(%#),35)],%1,get(%0/RANK`%1`NAME),lcstr(get(%0/RANK`%1`PERM)))

&INC`CHOOSE`+D`RANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RANK`DIV
&INC`CODE`RANK`DIV u(gso)=@include u(gso)/INC`CODE`VALDIV=before(%0,/);@switch/inline t(strlen(after(%0,/)))=1,{@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You do not have permission to do that.;@include u(ccs)/INC`CHECKPC=after(%0,/),1,GROUPS;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank field empty.;@assert valnum(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole numbers.;@assert cor(isadmin(%#),lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot change the rank of superiors.;@assert hasattr(%q<gid1>/DIVISION`%q<div>`RANK`%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank '%1' does not exist.;&D`GROUP`%q<gid1>`DIVISION`%q<div>`RANK %q<t1objid>=%1;@nspemit %q<t1>=u(RFN`MSGHEAD) %n has Changed your rank in the %q<gname1> Group's [numth(%q<div>)] Division: %q<divname>, to %1!;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Changed %q<t1name>'s Division %q<div>: %q<divname> Rank to %1};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n set %q<t1name>'s Division %q<div>: %q<divname> Rank to %1},OOC,1},{@nspemit %#=header(Ranks: %q<gname1> - Division %q<div>: %q<divname>);@nspemit %#=align(5 28,Rank,Name);@nspemit %#=separator();@dolist/inline sortkey(#lambda/last(\%0,`),filterbool(#lambda/isint(last(\%0,`)),lattrp(%q<gid1>/DIVISION`%q<div>`RANK`*)))={@nspemit %#=u(u(gso)/FUN`RANKDISPLAY`DIV,%q<gid1>,%q<div>,last(%i0,`))};@nspemit %#=header()}

&FUN`RANKDISPLAY`DIV u(gso)=align(5 28,%2,get(%0/DIVISION`%1`RANK`%2))

@@ PERMISSIONS AND DISCIPLINE
&FUN`GRPPERM u(gso)=cor(isadmin(%0),t(cor(match(u(u(gso)/FUN`GETPERM,%1,u(u(gso)/FUN`GETRANK,%1,objid(%0))),%2),match(get(%0/D`GROUP`%1`PRIV),%2))))

&FUN`GETPERM u(gso)=setunion(ucstr(get(%0/RANK`%1`PERM)),ucstr(get(%0/RANK`ALL`PERM)))

&FUN`GETRANK u(gso)=switch(1,cand(isadmin(%1),not(%2)),0,default(%1/D`GROUP`%0`RANK,udefault(u(gso)/FUN`GETSET,4,%0,STARTRANK)))

&GFN`GRPPERM u(gso)=u(u(gso)/FUN`GRPPERM,%0,%1,%2)

&INC`CODE`PERMFIRST u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(setr(rank,%0))=@nspemit %#=u(RFN`MSGHEAD) ERROR: No Rank entered.;@assert cor(valnum(%q<rank>),strmatch(%q<rank>,ALL))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Valid ranks are numerical or All.;@switch/inline valnum(%q<rank>)=1,{@assert hasattrp(%q<gid1>/RANK`%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Group lacks rank %q<rank>.;@break lt(%q<rank>,u(u(gso)/FUN`GETRANK,%q<gid1>,%:))=@nspemit %#=u(RFN`MSGHEAD) ERROR: May not change permissions for your own rank.};@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permissions field empty.;th setq(perms,setunion(v(VAR`PERMISSIONS`NORMAL),if(isadmin(%#),v(VAR`PERMISSIONS`ADMIN))));@assert lmath(min,iter(setr(entry,ucstr(%1)),match(%q<perms>,%i0)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: The following permissions were not found: [itemize(setdiff(%q<entry>,%q<perms>),%b,and,\,)]

&INC`CHOOSE`+G`ADDPERM`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADDPERM
&INC`CODE`ADDPERM u(gso)=@include u(gso)/INC`CODE`PERMFIRST;&RANK`%q<rank>`PERM %q<gid1>=setr(newperms,setunion(%q<entry>,ucstr(get(%q<gid1>/RANK`%q<rank>`PERM))));@include u(gso)/INC`CODE`FINPERM

&INC`CHOOSE`+G`DELPERM`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DELPERM
&INC`CODE`DELPERM u(gso)=@include u(gso)/INC`CODE`PERMFIRST;&RANK`%q<rank>`PERM %q<gid1>=setr(newperms,setdiff(%q<entry>,ucstr(get(%q<gid1>/RANK`%q<rank>`PERM))));@include u(gso)/INC`CODE`FINPERM

&INC`CODE`FINPERM u(gso)=@nspemit %#=u(RFN`MSGHEAD) Permissions for [ucstr(%q<rank>)] are now: [itemize(get(%q<gid1>/RANK`%q<rank>`PERM),%b,and,\,)];@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Changed [ucstr(%q<rank>)] Permissions to: [itemize(get(%q<gid1>/RANK`%q<rank>`PERM),%b,and,\,)]};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n changed [ucstr(%q<rank>)] Permissions to: [itemize(get(%q<gid1>/RANK`%q<rank>`PERM),%b,and,\,)]},OOC,1

&VAR`PERMISSIONS`NORMAL u(gso)=MODERATE MANAGE IC OOC GBADMIN GEMIT TITLESELF
&VAR`PERMISSIONS`ADMIN u(gso)=ADD DISBAND RENAME

&INC`CODE`PRIVFIRST u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No Player entered.;@include u(ccs)/INC`CHECKPC=%0,1,v(VAR`MSGHEAD);@assert match(get(%q<gid1>/MEMBERS),%q<t1objid>)=@nspemit %#=u(RFN`MSHEAD) ERROR: %q<t1name> is not in the %q<gname1>.;@break strmatch(%#,%q<t1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: May not change permissions for yourself.;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permissions field empty.;th setq(perms,setunion(v(VAR`PERMISSIONS`NORMAL),if(isadmin(%#),v(VAR`PERMISSIONS`ADMIN))));@assert lmath(min,iter(setr(entry,ucstr(%1)),match(%q<perms>,%i0)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: The following permissions were not found: [itemize(setdiff(%q<entry>,%q<perms>),%b,and,\,)]

&INC`CHOOSE`+G`ADDPRIV`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADDPRIV
&INC`CODE`ADDPRIV u(gso)=@include u(gso)/INC`CODE`PRIVFIRST;&D`GROUP`%q<gid1>`PRIV %q<t1>=setr(newperms,setunion(%q<entry>,ucstr(get(%q<t1>/D`GROUP`%q<gid1>`PERM))));@include u(gso)/INC`CODE`FINPRIV

&INC`CHOOSE`+G`DELPRIV`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DELPRIV
&INC`CODE`DELPRIV u(gso)=@include u(gso)/INC`CODE`PRIVFIRST;&D`GROUP`%q<gid1>`PRIV %q<t1>=setr(newperms,setdiff(%q<entry>,ucstr(get(%q<t1>/D`GROUP`%q<gid1>`PERM))));@include u(gso)/INC`CODE`FINPRIV

&INC`CODE`FINPRIV u(gso)=@nspemit %#=u(RFN`MSGHEAD) Priveleges for %q<t1name> are now: [itemize(get(%q<t1>/D`GROUP`%q<gid1>`PRIV),%b,and,\,)];@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Changed %q<t1name> Priveleges to: [itemize(get(%q<t1>/D`GROUP`%q<gid1>`PRIV),%b,and,\,)]};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n changed %q<t1name> Priveleges to: [itemize(get(%q<t1>/D`GROUP`%q<gid1>`PRIV),%b,and,\,)]},OOC,1

&INC`CHOOSE`+G`PRIVLIST`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`PRIVLIST
&INC`CODE`PRIVLIST u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of that group.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert words(setr(holders,lsearch(all,type,player,elock,D`GROUP`%q<gid1>`PRIV:?*)))=@nspemit %#=u(RFN`MSGHEAD) No players hold priveleges within the %q<gname1>.;@nspemit %#=u(RFN`HEADER,Priveleges: %q<gname1>);@nspemit %#=align(20 40,Name,Permissions);@dolist/inline %q<holders>={@nspemit %#=align(20 [sub(width(%#),21)],pueblize(name(%i0),+finger [name(%i0)]),lcstr(get(%i0/D`GROUP`%q<gid1>`PRIV)));@switch/inline eq(words(%q<holders>),inum(0))=0,{@nspemit %#=u(RFN`SEPARATOR)},1,{@nspemit %#=u(RFN`HEADER)}}

&INC`CHOOSE`+G`MUZZLE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`MUZZLE
&INC`CODE`MUZZLE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MODERATE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You lack permission to do that.;@include u(ccs)/INC`CHECKPC=before(%0,/),1,GROUPS;@assert isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Must target a group member.;@assert lt(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Only subordinates may be muzzled.;@assert strlen(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Channel Type Empty. Your choices are IC and OOC!;@include u(ccs)/INC`PARTIAL=after(%0,/),IC|OOC,|,v(VAR`MSGHEAD),chan,Channel Type;@break gt(get(%q<t1>/D`GROUP`%q<gid1>`MUZZLE`%q<chan>),secs())=@nspemit %#=u(RFN`MSGHEAD) %q<t1name> is already %q<chan> muzzled.;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Muzzle duration empty.;@assert gt(setr(duration,stringsecs(%1)),0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Duration was not accepted by stringsecs. Please see [pueblize(help stringsecs(),help stringsecs())].;&D`GROUP`%q<gid1>`MUZZLE`%q<chan> %q<t1>=setr(until,add(secs(),%q<duration>));@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Muzzled %q<t1name> from [ucstr(%q<chan>)] channels for [etime(%q<duration>)] - Until [convsecs(%q<until>)]};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n muzzled %q<t1name> from [ucstr(%q<chan>)] channels for [etime(%q<duration>)] - Until [convsecs(%q<until>)]},OOC,1

&INC`CHOOSE`+G`UNMUZZLE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`UNMUZZLE
&INC`CODE`UNMUZZLE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of %q<gname1>.;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MODERATE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You lack permission to do that.;@include u(ccs)/INC`CHECKPC=before(%0,/),1,GROUPS;@assert isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Must target a group member.;@assert lt(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),u(u(gso)/FUN`GETRANK,%q<gid1>,%q<t1objid>))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Only subordinates may be unmuzzled.;@assert strlen(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Channel Type Empty. Your choices are IC and OOC!;@include u(ccs)/INC`PARTIAL=after(%0,/),IC|OOC,|,v(VAR`MSGHEAD),chan,Channel Type;@assert gt(get(%q<t1>/D`GROUP`%q<gid1>`MUZZLE`%q<chan>),secs())=@nspemit %#=u(RFN`MSGHEAD) %q<t1name> is not %q<chan> muzzled.;&D`GROUP`%q<gid1>`MUZZLE`%q<chan> %q<t1>;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Unmuzzled %q<t1name> from [ucstr(%q<chan>)] channels};@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n unmuzzled %q<t1name> from [ucstr(%q<chan>)] channels},OOC,1

&INC`CHOOSE`+G`SET`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`SET
&INC`CODE`SET u(gso)=@switch/inline gt(strlen(%0),0)=1,{@assert lte(u(FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You lack permission to do that.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Setting field empty.;@include u(ccs)/INC`PARTIAL=%0,setr(choices,COLOR|STARTRANK|IC|OOC|COMMAND|CHANNELRANK|SYSALERT[if(isadmin(%#),|MAJOR|TYPE|SORT|ABBREVIATION)]),|,GROUPS,c,choice;@switch/inline t(strlen(%1))=0,{&SET`%qc %q<gid1>;@nspemit %#=u(RFN`MSGHEAD) Option restored to group defaults.},1,{@switch/inline hasattr(u(gso)/INC`CODE`SET`CHECK`%qc)=1,{@include u(gso)/INC`CODE`SET`CHECK`%qc};&SET`%qc %q<gid1>=strfirstof(%q<entry>,%1)};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Setting %qc: %1};@nspemit %#=u(RFN`MSGHEAD) You have changed %q<gname1>'s %qc Setting to: %1;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n changed %qc Setting to: %1},OOC,1},0,{@nspemit %#=header(%q<gname1> - Settings);@dolist/inline lattrp(%q<gid1>/SET`*)={@nspemit %#=rjust(last(%i0,`),10): [get(%q<gid1>/%i0)]};@nspemit %#=header()}

&INC`CODE`SET`CHECK`STARTRANK u(gso)=@assert valnum(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: STARTRANK must be a number!;@break lte(%1,2)=@nspemit %#=u(RFN`MSGHEAD) ERROR: STARTRANK may not be higher than 3.;@break lte(%1,u(u(gso)/FUN`GETRANK,%q<gid1>,%:))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot raise STARTRANK beyond your own rank.;@assert hasattrp(%q<gid1>/RANK`[abs(%1)])=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot find that rank.;th setq(entry,abs(%1))
&INC`CODE`SET`CHECK`IC u(gso)=@assert isint(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: IC must be a number!;th setq(entry,t(%1))
&INC`CODE`SET`CHECK`OOC u(gso)=@assert isint(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: OOC must be a number!;th setq(entry,t(%1))
&INC`CODE`SET`CHECK`COLOR u(gso)=@break strmatch(setr(error,ansi(%1,test)),#-*)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That color returned an ansi() error: %q<error>

&INC`CHOOSE`+G`ADDRANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADDRANK
&INC`CODE`ADDRANK u(gso)=@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank value field empty.;@assert valnum(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole positive integers.;th setq(newrank,abs(trim(%0)));@break hasattrp(%q<gid1>/RANK`%q<newrank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank already exists. Use +gnamerank to change the name!;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank name field empty.;@break cor(strmatch(%1,*%r*),strmatch(%1,*%t*))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank names may not contain linebreaks or indents.;&RANK`%q<newrank>`NAME %q<gid1>=%1;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Made Rank: %q<newrank> (%1)};@nspemit %#=u(RFN`MSGHEAD) You have created the new Rank %q<newrank> (%1) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n created the new rank %q<newrank> (%1)},OOC,1

&INC`CHOOSE`+D`ADDRANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`ADDRANK`DIV
&INC`CODE`ADDRANK`DIV u(gso)=@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@include u(gso)/INC`CODE`VALDIV=before(%0,/);@assert strlen(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank value field empty.;@assert valnum(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole positive integers.;th setq(newrank,abs(trim(after(%0,/))));@break hasattrp(%q<gid1>/DIVISION`%q<div>`RANK`%q<newrank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank already exists. Use +dnamerank to change the name!;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank name field empty.;@break cor(strmatch(%1,*%r*),strmatch(%1,*%t*))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank names may not contain linebreaks or indents.;&DIVISION`%q<div>`RANK`%q<newrank> %q<gid1>=%1;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Made Division %q<div> '%q<divname>' Rank: %q<newrank> (%1)};@nspemit %#=u(RFN`MSGHEAD) You have created the new Rank %q<newrank> (%1) in %q<gname1>'s [numth(%q<div>)] Division: %q<divname>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n created the new Division %q<div> '%q<divname>' rank %q<newrank> (%1)},OOC,1

&INC`CHOOSE`+G`DELRANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DELRANK
&INC`CODE`DELRANK u(gso)=@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank value field empty.;@assert valnum(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole positive integers.;th setq(rank,abs(trim(%0)));@assert hasattrp(%q<gid1>/RANK`%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Added rank does not exist.;@break lte(%q<rank>,4)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks 1-4 cannot be deleted.;@break nsearch(all,type,player,elock,D`GROUP`%q<gid1>`RANK:%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Some group members are Rank %q<rank>. Please move them into another rank first.;th setq(rankname,default(%q<gid1>/RANK`%q<rank>`NAME,Unset));@wipe %q<gid1>/RANK`%q<rank>;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Deleted Rank: %q<rank> (%q<rankname>)};@nspemit %#=u(RFN`MSGHEAD) You have deleted rank %q<rank> (%q<rankname>) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n deleted rank %q<rank> (%q<rankname>)},OOC,1

&INC`CHOOSE`+D`DELRANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`DELRANK`DIV
&INC`CODE`DELRANK`DIV u(gso)=@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@include u(gso)/INC`CODE`VALDIV=before(%0,/);@assert strlen(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank value field empty.;@assert valnum(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole positive integers.;th setq(rank,abs(trim(after(%0,/))));@assert hasattrp(%q<gid1>/DIVISION`%q<div>`RANK`%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Added rank does not exist.;@break lte(%q<rank>,3)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks 1-3 cannot be deleted.;@break nsearch(all,type,player,elock,D`GROUP`%q<gid1>`DIVISION`%q<div>`RANK:%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Some group members are Rank %q<rank> in that Division. Please move them into another rank first.;th setq(rankname,default(%q<gid1>/DIVISION`%q<div>`RANK`%q<rank>,Unset));@wipe %q<gid1>/DIVISION`%q<div>`RANK`%q<rank>;@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Deleted Rank: %q<rank> (%q<rankname>)};@nspemit %#=u(RFN`MSGHEAD) You have deleted rank %q<rank> (%q<rankname>) in %q<gname1>'s [numth(%q<div>)] Division: %q<divname>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n deleted Division %q<div> '%q<divname>' rank %q<rank> (%q<rankname>)},OOC,1

&INC`CHOOSE`+G`NAMERANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`NAMERANK
&INC`CODE`NAMERANK u(gso)=@assert lte(u(u(gso)/FUN`GETRANK,%q<gid1>,%:),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank value field empty.;@assert valnum(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole positive integers.;th setq(rank,abs(trim(%0)));@assert hasattrp(%q<gid1>/RANK`%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Added rank does not exist.;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: New rank name field empty.;@break cor(strmatch(%1,*%r*),strmatch(%1,*%t*))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank names may not contain linebreaks or indents.;&RANK`%q<rank>`NAME %q<gid1>=trim(%1);@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Renamed Rank: %q<rank> (%1)};@nspemit %#=u(RFN`MSGHEAD) You have renamed rank %q<rank> (%1) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n renamed rank %q<rank> (%1)},OOC,1

&INC`CHOOSE`+D`NAMERANK`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`NAMERANK`DIV
&INC`CODE`NAMERANK`DIV u(gso)=@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@include u(gso)/INC`CODE`VALDIV=before(%0,/);@assert strlen(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank value field empty.;@assert valnum(after(%0,/))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Ranks must be whole positive integers.;th setq(rank,abs(trim(after(%0,/))));@assert hasattrp(%q<gid1>/DIVISION`%q<div>`RANK`%q<rank>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Added rank does not exist.;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: New rank name field empty.;@break cor(strmatch(%1,*%r*),strmatch(%1,*%t*))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Rank names may not contain linebreaks or indents.;&DIVISION`%q<div>`RANK`%q<rank> %q<gid1>=trim(%1);@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{Renamed Division %q<div> '%q<divname>' Rank: %q<rank> (%1)};@nspemit %#=u(RFN`MSGHEAD) You have renamed Division %q<div> '%q<divname>' rank %q<rank> (%1) in %q<gname1>;@include u(gso)/INC`CODE`CHAT={ansi(hw,ALERT:) %n renamed Division %q<div> '%q<divname>' rank %q<rank> (%1)},OOC,1

&INC`CHOOSE`+G`TITLE`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`TITLE
&INC`CODE`TITLE u(gso)=@assert isgroupmember(%:,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are not a member of %q<gname1>.;@include u(ccs)/INC`CHECKPC=%0,1,GROUPS;@assert isgroupmember(%q<t1objid>,%q<gid1>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: %q<t1name> is not a member of %q<gname1>.;@assert cor(if(strmatch(%q<t1>,%#),u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,TITLESELF),0),u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,MANAGE))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;th setq(title,%1);@assert cor(strmatch(%#,%q<t1>),lt(u(FUN`GETRANK,%q<gid1>,%:),u(FUN`GETRANK,%q<gid1>,%q<t1objid>)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Only subordinates may be retitled.;@break cor(strmatch(%q<title>,*|*),strmatch(%q<title>,*~*),strmatch(%q<title>,*%r*),strmatch(%q<title>,*%t*))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Titles may not contain a ~, |, tab, or linebreak.;@break gt(strlen(%q<title>),config(chan_title_len))=@nspemit %#=u(RFN`MSGHEAD) ERROR: That title is too long.;&D`GROUP`%q<gid1>`TITLE %q<t1>=%q<title>;@nspemit %#=u(RFN`MSGHEAD) You have set [if(strmatch(%#,%q<t1>),your,%q<t1name>'s)] Title in [ansi(hw,%q<gname1>)] to: %q<title>;@switch/inline strmatch(%#,%q<t1>)=0,{@nspemit %q<t1>=u(RFN`MSGHEAD) %n has set your title in [ansi(hw,%q<gname1>)] to: %q<title>};@include u(gso)/INC`CODE`MAKELOG=%:,%q<gid1>,{if(strmatch(%#,%q<t1>),%n,%q<t1name>)'s TITLE set to: %q<title>}

&INC`CHOOSE`+G`OPTION`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`OPTION
&INC`CODE`OPTION u(gso)=@switch/inline t(strlen(%0))=1,{@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Setting field empty.;@assert match(setr(choices,ALLIC|ALLOOC|ALLGB|IC|OOC|GB),setr(c,ucstr(trim(first(%0)))),|)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That is not a valid choice. Your options are: [itemize(%q<choices>,|,and,\,)];@switch/inline t(match(ALLIC|ALLOOC|ALLGB,%qc,|))=1,{@switch/inline t(strlen(%1))=0,{th delstat(%#/D`GROUP,%qc);@nspemit %#=u(RFN`MSGHEAD) You have restored your %qc option back to defaults.},{th setstat(%#/D`GROUP,%qc,setr(res,switch(1,cor(t(match(1 yes on true,%1)),gt(%1,0)),1,cor(t(match(0 no off false,%1)),lte(%1,0)),0,0)));@nspemit %#=u(RFN`MSGHEAD) You have set your %qc option to: [if(%q<res>,On,Off)]}},0,{@switch/inline t(strlen(%1))=0,{th delstat(%#/D`GROUP`%q<gid1>,%qc);@nspemit %#=u(RFN`MSGHEAD) You have restored your %qc option back to defaults.},{th setstat(%#/D`GROUP`%q<gid1>,%qc,setr(res,switch(1,cor(t(match(1 yes on true,%1)),gt(%1,0)),1,cor(t(match(0 no off false,%1)),lte(%1,0)),0,0)));@nspemit %#=u(RFN`MSGHEAD) You have set your %qc option to: [if(%q<res>,On,Off)]}}},{@nspemit %#=header(Global Group Options);@dolist/inline ALLIC ALLOOC ALLGB={@nspemit %#=rjust(%i0,10): [if(strfirstof(getstat(%#/D`GROUP,%i0),1),On,Off)]};@nspemit %#=header(%q<gname1> - Options);@dolist/inline IC OOC GB={@nspemit %#=rjust(%i0,10): [if(strfirstof(getstat(%#/D`GROUP`%q<gid1>,%i0),1),On,Off)]};@nspemit %#=header()}


@@ CHANNEL CONTROLS

&INC`CHOOSE`+G`RADIO`MAIN u(gso)=@include u(gso)/INC`CHOOSE`+G`IC`MAIN
&INC`CHOOSE`+G`RADIO`GAG u(gso)=@include u(gso)/INC`CHOOSE`+G`IC`GAG
&INC`CHOOSE`+G`RADIO`UNGAG u(gso)=@include u(gso)/INC`CHOOSE`+G`IC`UNGAG
&INC`CHOOSE`+G`RADIO`ON u(gso)=@include u(gso)/INC`CHOOSE`+G`IC`ON
&INC`CHOOSE`+G`RADIO`OFF u(gso)=@include u(gso)/INC`CHOOSE`+G`IC`OFF

&INC`CHOOSE`+G`IC`RECALL u(gso)=@include u(ccs)/INC`JAILCHECK;@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RECALL=IC,%0

&INC`CHOOSE`+G`IC`MAIN u(gso)=@include u(ccs)/INC`JAILCHECK;@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`CHAT=%0[if(strlen(%1),=%1)],IC,0
&INC`CHOOSE`+G`IC`GAG u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@break hasattrval(%#/D`GROUP`%q<gid1>`ICGAG)=@nspemit %#=u(RFN`MSGHEAD) You are already gagging %q<gname1>'s IC channel!;&D`GROUP`%q<gid1>`ICGAG %#=1;@nspemit %#=u(RFN`MSGHEAD) You will no longer hear %q<gname1>'s IC channel.
&INC`CHOOSE`+G`IC`UNGAG u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@assert hasattrval(%#/D`GROUP`%q<gid1>`ICGAG)=@nspemit %#=u(RFN`MSGHEAD) You are not gagging %q<gname1>'s IC channel!;&D`GROUP`%q<gid1>`ICGAG %#;@nspemit %#=u(RFN`MSGHEAD) You will once again hear %q<gname1>'s IC channel.
&INC`CHOOSE`+G`IC`ON u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@force/inline %#=+goption ic=1
&INC`CHOOSE`+G`IC`OFF u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@force/inline %#=+goption ic=0

&INC`CHOOSE`+G`OOC`RECALL u(gso)=@include u(ccs)/INC`JAILCHECK;@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RECALL=OOC,%0

&INC`CHOOSE`+G`OOC`MAIN u(gso)=@include u(ccs)/INC`JAILCHECK;@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`CHAT=%0[if(strlen(%1),=%1)],OOC,0
&INC`CHOOSE`+G`OOC`GAG u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@break hasattrval(%#/D`GROUP`%q<gid1>`OOCGAG)=@nspemit %#=u(RFN`MSGHEAD) You are already gagging %q<gname1>'s OOC channel!;&D`GROUP`%q<gid1>`OOCGAG %#=1;@nspemit %#=u(RFN`MSGHEAD) You will no longer hear %q<gname1>'s OOC channel.
&INC`CHOOSE`+G`OOC`UNGAG u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@assert hasattrval(%#/D`GROUP`%q<gid1>`OOCGAG)=@nspemit %#=u(RFN`MSGHEAD) You are not gagging %q<gname1>'s OOC channel!;&D`GROUP`%q<gid1>`OOCGAG %#;@nspemit %#=u(RFN`MSGHEAD) You will once again hear %q<gname1>'s OOC channel.
&INC`CHOOSE`+G`OOC`ON u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@force/inline %#=+goption ooc=1
&INC`CHOOSE`+G`OOC`OFF u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@force/inline %#=+goption ooc=0

&INC`CHOOSE`+G`EMIT`MAIN u(gso)=@include u(ccs)/INC`JAILCHECK;@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,GEMIT)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Must enter a Channel Type. Choices are: IC and OOC!;@include u(ccs)/INC`PARTIAL=%0,IC|OOC,|,v(VAR`MSGHEAD),chan,Channel Type;@include u(gso)/INC`CODE`CHAT=%1,%q<chan>,,1

&INC`CODE`CHAT u(gso)=@assert strlen(%0)=@nspemit %#=What will you say?;@switch/inline cor(%2,%3)=0,{@assert strfirstof(u(u(gso)/FUN`GETSET,%q<gid1>,setr(chan,%1)),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That channel is not enabled.;@assert strfirstof(getstat(%#/D`GROUP,ALL%q<chan>),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You have universally disabled Group %q<chan> Channels!;@assert u(u(gso)/FUN`GRPPERM,%:,%q<gid1>,%q<chan>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert cor(gt(secs(),setr(until,default(%#/D`GROUP`%q<gid1>`MUZZLE`%q<chan>,0))),isadmin(%#))=@nspemit %#=u(RFN`MSGHEAD) ERROR: You are muzzled from [name(%q<gid1>)]'s [ucstr(%q<chan>)] Channels until [convsecs(%q<until>)].;@assert strfirstof(getstat(%#/D`GROUP`%q<gid1>,%q<chan>),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot use a channel while it is disabled.;@break hasattrval(%#/D`GROUp`%q<gid1>`%q<chan>GAG)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Cannot use a channel while gagging it.;@break strmatch(left(%0,1),|)=@nspemit %#=u(RFN`MSGHEAD) ERROR: The Emit feature is disabled.};@assert words(setr(list,filterbool(#lambda/cand(isgroupmember(objid(\%0),%q<gid1>),strfirstof(getstat(\%0/D`GROUP,ALL%q<chan>),1),strfirstof(getstat(\%0/D`GROUP`%q<gid1>,%q<chan>),1),if(%2,lte(u(FUN`GETRANK,%q<gid1>,objid(\%0)),u(FUN`GETSET,%q<gid1>,SYSALERT)),1),not(hasattrval(\%0/D`GROUP`%q<gid1>`%q<chan>GAG))),setunion(lwho(),))));@message %q<list>=%0,u(gso)/FUN`CHATFORMAT,##,%#,%0,%q<chan>,%2,%q<gid1>,,,%3;@switch/inline not(%2)=1,{@include u(gso)/INC`CODE`CHANLOG=%0,%2,left(%q<chan>,1),%q<gid1>,%#,%3}

&INC`CODE`CHANLOG u(gso)=&[setr(attr,%2`[nextslot(%3,%2)])] %3=%0;&%q<attr>`BY %3=objid(%4);&%q<attr>`ON %3=secs();&%q<attr>`AS %3=name(%4);&%q<attr>`TYPE %3=%1;&%q<attr>`GEMIT %3=%5;@switch/inline gt(setr(count,regnattr(%3/^%2`\\d+$)),600)=1,{@dolist/inline elements(sortkey(#lambda/last(\%0,`),reglattr(%3/^%2`\\d+$),n),lnum(1,sub(%q<count>,600)))=@wipe %3/%i0}

&INC`CHOOSE`+G`RECALL`MAIN u(gso)=@include u(gso)/INC`CODE`VALGROUP=strfirstof(getstat(%#/D`GROUP,Group),0),1;@include u(gso)/INC`CODE`RECALL
&INC`CODE`RECALL u(gso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No chat type entered!;@include u(ccs)/INC`PARTIAL=%0,IC|OOC,|,GROUPS,chat,chat;@switch/inline valnum(%1)=1,{th setq(amt,%1)},{th setq(amt,15)};@nspemit %#=header(%q<gname1> [ucstr(%q<chat>)] Log);@dolist setr(total,revwords(elements(sortkey(#lambda/last(\%0,`),lattr(%q<gid1>/[left(%q<chat>,1)]`?*),-n),lnum(1,%q<amt>))))={@nspemit %#=\[[timefmt($a $b $d $H:$M:$S,get(%q<gid1>/%i0`ON))]\] [u(u(gso)/FUN`CHATFORMAT,%#,get(%q<gid1>/%i0`BY),get(%q<gid1>/%i0),%q<chat>,get(%q<gid1>/%i0`TYPE),%q<gid1>,1,get(%q<gid1>/%i0`AS),get(%q<gid1>/%i0`GEMIT))];@switch/inline eq(inum(0),words(%q<total>))=1,{@nspemit %#=u(RFN`HEADER)}}

&FUN`CHATFORMAT u(gso)=if(cor(%6,%8),,switch(1,hasflag(%0,PARANOID),\[[name(%1)]\(%1\)\],hasflag(%0,NOSPOOF),\[[name(%1)]:\]))[ansi(firstcolor(%0,%5`%3EDGE,GROUP`%3EDGE),<)][ansi(strfirstof(custcolor(%0,%5`%3NAME,,1),custcolor(%0,%5`NAME,,1),u(u(gso)/FUN`GETSET,%5,COLOR),custcolor(%0,GROUP`NAME)),name(%5))][if(cand(%4,not(%8)),ansi(firstcolor(%0,%5`%3DIVIDER,GROUP`%3DIVIDER),-)[ansi(firstcolor(%0,%5`SYSTAG,GROUP`SYSTAG),SYS)],switch(%3,OOC,ansi(firstcolor(%0,%5`%3DIVIDER,GROUP`%3DIVIDER),-)[ansi(firstcolor(%0,%5`OOCTAG,GROUP`OOCTAG),ucstr(%3))],IC,))][ansi(firstcolor(%0,%5`%3EDGE,GROUP`%3EDGE),>)]%B[colornames(if(cor(%4,%8),%2,if(u(u(gso)/FUN`GETSET,%5,CHANNELRANK),\[[strfirstof(u(FUN`GETRANK,%5,%1),?)]\]%B)[if(strlen(get(%1/D`GROUP`%5`TITLE)),get(%1/D`GROUP`%5`TITLE)%B)][speak(if(strlen(%7),&%7,%1),%2)]),%0,setunion(lwhoid(%0),get(%5/MEMBERS)),GCHANNELS)]

&CMD`CHAT u(gso)=$^(?s)(-|=)(\w+)?(?\:/(\S+)?)?(?\: +(.+))?$:@include u(ccs)/INC`JAILCHECK;@include u(ccs)/INC`PARTIAL=%3,GAG|UNGAG|ON|OFF|RECALL,|,v(VAR`MSGHEAD),switch,switch;th setq(grab,namegrab(filterbool(#lambda/cand(isgroupmember(%:,\%0),if(strlen(%q<switch>),1,strfirstof(get(%#/D`GROUP`\%0`[switch(%1,-,IC,=,OOC,OOC)]),1))),u(u(gso)/FUN`LISTGROUPS)),strfirstof(%2,getstat(%#/D`GROUP,Group))));@include u(gso)/INC`CODE`VALGROUP=%q<grab>,1;th setstat(%#/D`GROUP,Group,%q<gid1>);@switch/inline gt(strlen(%q<switch>),0)=1,{@include u(gso)/INC`CHOOSE`+G`[switch(%1,-,IC,=,OOC,OOC)]`%q<switch>=%4},{@assert strlen(%4)=@nspemit %#=What will you say?;@include u(gso)/INC`CODE`CHAT=%4,switch(%1,-,IC,=,OOC,OOC),0}
@set u(gso)/CMD`CHAT=regexp

@@ MAINTENANCE
&PLAYER`CONNECT`GROUPCHECK u(gso)=@wait 2=@dolist filterbool(#lambda/match(get(\%0/INVITES),%0),u(u(gso)/FUN`LISTGROUPS))={@nspemit %#=u(RFN`MSGHEAD) The [name(%i0)] have invited you to join their group! To accept, type [pueblize(ansi(h,+gjoin [name(%i0)]),+gjoin [name(%i0)])]}

&OBJECT`DESTROY`CLEANUP u(gso)=@switch/inline %2=PLAYER,{@dolist/inline groups(%0)={@include u(gso)/INC`CODE`REMFROMGROUP=%i0,%0}}

&TRG`CONVERT u(gso)=@assert isdbref(u(gdb));@dolist filterbool(#lambda/isint(\%0),lattr(u(gdb)))={@include u(gso)/INC`CODE`DOCREATE=get(u(gdb)/%i0`NAME),inum(0);&RANK %q<gid[inum(0)]>=iter(get(u(gdb)/%i0`RANK),before(%i0,~)~[bound(add(after(%i0,~),1),1,3)],|,|);@cpattr u(gdb)/%i0`MEMBERS=%q<gid[inum(0)]>/MEMBERS;@cpattr u(gdb)/%i0`BOARDS=%q<gid[inum(0)]>/BOARDS;@dolist get(%q<gid[inum(0)]>/BOARDS)={@tel %i0=%q<gid[inum(1)]>}}

