@select/inline isdbref(u(ex-proj))=0,{@tel create(Project System <EX-PROJ>)=config(master_room)}
&ex-proj u(coi)=locate(config(master_room),Project System <EX-PROJ>,TXxi)
@parent u(ex-proj)=u(coi)
@set u(ex-proj)=WIZARD !NO_COMMAND

&CMD`+PROJECT u(ex-proj)=$^(?s)(?\:\+)?project(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach u(ccs)/INC`PARTIAL=%1,setunion(get(u(ex-proj)/VAR`PLAYFLAGS),if(isadmin(%#),get(u(ex-proj)/VAR`ADMINFLAGS)),|,|),|,CRM,switch,switch;@attach u(ex-proj)/INC`[strfirstof(%q<switch>,MAIN)]=%2,%3
@set u(ex-proj)/CMD`+PROJECT=regexp

&VAR`PLAYFLAGS u(ex-proj)=NEW|DESC|OLD|LOG|FINISH|UNFINISH|GET|RENAME|DELETE|ADDPARTNER|REMPARTNER|DURATION|START|STOP|ADD|TIMEDIV
&VAR`ADMINFLAGS u(ex-proj)=APPROVE|UNAPPROVE

&INC`TARGET u(ex-proj)=@select/inline strmatch(%0,*/*)=1,{@attach u(ccs)/INC`CHECKPC=before(%0,/),1,INFO;th u(setq,target,%q<t1>)},0,{th u(setq,target,%#)}

&INC`FILENAME u(ex-proj)=th u(setq,filename,if(strmatch(%0,*/*),after(%0,/),%0))

&FUN`LIST u(ex-proj)=sort(iter(if(or(isadmin(%1),strmatch(objid(%0),objid(%1))),u(lattr,%0/D`PROJECT`*),filterbool(#lambda/match(get(%0/\%0`PARTNERS),objid(%1)),u(lattr,%0/D`PROJECT`*))),last(%i0,`),%b,|),i,|,|)
&FUN`LIST`UNFINISHED u(ex-proj)=filterbool(#lambda/not(getstat(%0/D`PROJECT`\%0`FLAGS,Finished)),u(FUN`LIST,%0,%1),|,|)
&FUN`LIST`FINISHED u(ex-proj)=filterbool(#lambda/getstat(%0/D`PROJECT`\%0`FLAGS,Finished),u(FUN`LIST,%0,%1),|,|)

&INC`APPROVE u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@check strlen(%q<filename>)=@pemit %#=msghead(PROJECT) ERROR: Info name empty.;@dolist/delimit | %q<filename>={@attach u(ex-proj)/INC`PARTIALMATCH=%i0;@stop getstat(%q<target>/%q<attr>`FLAGS,Approved)=@pemit %#=msghead(PROJECT) ERROR: Project %i0 is already approved!;th setstat(%q<target>/%q<attr>`FLAGS,Approved,1);th setstat(%q<target>/%q<attr>`FLAGS,ApprovedBy,%#);th setstat(%q<target>/%q<attr>`FLAGS,ApprovedOn,secs());@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You approved your %i0 Project},{@pemit %#=msghead(PROJECT) You approved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!;@pemit %q<target>=msghead(PROJECT) %n approved your %i0 '[get(%q<target>/%q<attr>)]' Project!};@select/inline t(v(VAR`ANNOUNCEAPPROVE))=1,{@nscemit/noisy v(VAR`ANNOUNCECHANNEL)=ansi(h,PROJECT:) %n just approved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n approved [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project!;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] approved the Project!}}

&INC`UNAPPROVE u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@check strlen(%q<filename>)=@pemit %#=msghead(PROJECT) ERROR: Info name empty.;@dolist/delimit | %q<filename>={@attach u(ex-proj)/INC`PARTIALMATCH=%i0;@check getstat(%q<target>/%q<attr>`FLAGS,Approved)=@pemit %#=msghead(PROJECT) ERROR: Project %i0 is not approved!;th setstat(%q<target>/%q<attr>`FLAGS,Approved,0);th delstat(%q<target>/%q<attr>`FLAGS,ApprovedBy);th delstat(%q<target>/%q<attr>`FLAGS,ApprovedOn);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You approved your %i0 Project},{@pemit %#=msghead(PROJECT) You unapproved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!;@pemit %q<target>=msghead(PROJECT) %n unapproved your %i0 '[get(%q<target>/%q<attr>)]' Project!};@select/inline t(v(VAR`ANNOUNCEAPPROVE))=1,{@nscemit/noisy v(VAR`ANNOUNCECHANNEL)=ansi(h,PROJECT:) %n just unapproved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n unapproved [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project!;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] unapproved the Project!}}

&INC`FINISH u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@check strlen(%q<filename>)=@pemit %#=msghead(PROJECT) ERROR: Info name empty.;@dolist/delimit | %q<filename>={@attach u(ex-proj)/INC`PARTIALMATCH=%i0;@stop getstat(%q<target>/%q<attr>`FLAGS,Approved)=@pemit %#=msghead(PROJECT) ERROR: Project %i0 is already approved!;th setstat(%q<target>/%q<attr>`FLAGS,Approved,1);th setstat(%q<target>/%q<attr>`FLAGS,ApprovedBy,%#);th setstat(%q<target>/%q<attr>`FLAGS,ApprovedOn,secs());@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You approved your %i0 Project},{@pemit %#=msghead(PROJECT) You approved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!;@pemit %q<target>=msghead(PROJECT) %n approved your %i0 '[get(%q<target>/%q<attr>)]' Project!};@select/inline t(v(VAR`ANNOUNCEAPPROVE))=1,{@nscemit/noisy v(VAR`ANNOUNCECHANNEL)=ansi(h,PROJECT:) %n just approved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n approved [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project!;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] approved the Project!}}

&INC`UNFINISH u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@check strlen(%q<filename>)=@pemit %#=msghead(PROJECT) ERROR: Info name empty.;@dolist/delimit | %q<filename>={@attach u(ex-proj)/INC`PARTIALMATCH=%i0;@check getstat(%q<target>/%q<attr>`FLAGS,Approved)=@pemit %#=msghead(PROJECT) ERROR: Project %i0 is not approved!;th setstat(%q<target>/%q<attr>`FLAGS,Approved,0);th delstat(%q<target>/%q<attr>`FLAGS,ApprovedBy);th delstat(%q<target>/%q<attr>`FLAGS,ApprovedOn);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You approved your %i0 Project},{@pemit %#=msghead(PROJECT) You unapproved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!;@pemit %q<target>=msghead(PROJECT) %n unapproved your %i0 '[get(%q<target>/%q<attr>)]' Project!};@select/inline t(v(VAR`ANNOUNCEAPPROVE))=1,{@nscemit/noisy v(VAR`ANNOUNCECHANNEL)=ansi(h,PROJECT:) %n just unapproved [name(%q<target>)]'s %i0 '[get(%q<target>/%q<attr>)]' Project!};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n unapproved [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project!;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] unapproved the Project!}}

&VAR`ANNOUNCEAPPROVE u(ex-proj)=1
&VAR`ANNOUNCECHANNEL u(ex-proj)=Staff Reports

&INC`DELETE u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@stop getstat(%q<target>/%q<attr>`FLAGS,Approved)=@pemit %#=ERROR: Approved Infos must be unapproved by admin first.;@wipe %q<target>/%q<attr>;@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You deleted your %i0 Project},{@pemit %#=msghead(PROJECT) You deleted [name(%q<target>)]'s %i0 Project!;@pemit %q<target>=msghead(PROJECT) %n deleted your %i0 Project!}

&INC`PARTIALMATCH u(ex-proj)=@check strlen(%0)=@pemit %#=msghead(PROJECT) ERROR: Info name empty.;@attach u(ccs)/INC`PARTIAL=%0,u(u(ex-proj)/FUN`LIST,%q<target>,%#,1),|,INFO,filename,filename;th u(setq,attr,D`PROJECT`%q<filename>)

&INC`MAIN u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`LIST=%0,%1,UNFINISHED
&INC`OLD u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`LIST=%0,%1,FINISHED

&INC`LIST u(ex-proj)=@attach u(ex-proj)/INC`FILENAME;@select/inline gt(strlen(%q<filename>),0)=1,{@attach u(ex-proj)/INC`LIST`CONTENTS},0,{@attach u(ex-proj)/INC`LIST`PROJECTS}

&INC`LIST`PROJECTS u(ex-proj)=@pemit %#=header(name(%q<target>)'s Projects)%R[align(4 17 17 17 13 5,ID,NAME,DURATION,REMAINING,RL FINISH,COM)];@dolist/inline/delimit | [u(FUN`LIST`%2,%q<target>,%#)]={@pemit %#=align(4 17 17 17 13 5,pueblize(rjust(%i0,3).,u(setr,comm,+project [if(strmatch(%#,%q<target>),,name(%q<target>)/)]%i0)),pueblize(left(get(%q<target>/D`PROJECT`%i0),17),%q<comm>),if(u(setr,fin,or(and(eq(0,get(%q<target>/D`PROJECT`%i0`REMAINING)),get(%q<target>/D`PROJECT`%i0`DURATION)),getstat(%q<target>/D`PROJECT`%i0`FLAGS,Finished))),Finished!,u(FUN`DISPTIME,get(%q<target>/D`PROJECT`%i0`DURATION))),if(%q<fin>,Finished!,u(FUN`DISPTIME,get(%q<target>/D`PROJECT`%i0`REMAINING)))[if(strfirstof(getstat(%q<target>/D`PROJECT`%i0`FLAGS,Active),1),,-Halt)],if(%q<fin>,Finished!,if(get(%q<target>/D`PROJECT`%i0`REMAINING),timefmt($I:$M$p $m/$d,add(secs(),div(get(%q<target>/D`PROJECT`%i0`REMAINING),3))))),nattr(%q<target>/D`PROJECT`%i0`COMMENT`*))};@pemit %#=header(Current Time: [timefmt($I:$M$p $m/$d,secs())])

&INC`LIST`CONTENTS u(ex-proj)=@attach u(ex-proj)/INC`PARTIALMATCH=%q<filename>;@pemit %#=header(name(%q<target>)'s [get(%q<target>/%q<attr>)] Project);@pemit %#=get(%q<target>/%q<attr>`DESC);@pemit %#=subheader()%R[ansi(h,Last set by:)] [name(getstat(%q<target>/%q<attr>`FLAGS,SetBy))] [ansi(h,On:)] [convsecs(getstat(%q<target>/%q<attr>`FLAGS,SetOn))];@select/inline gt(getstat(%q<target>/%q<attr>`FLAGS,Approved),0)=1,{@pemit %#=ansi(h,Approved by:) [name(getstat(%q<target>/%q<attr>`FLAGS,ApprovedBy))] [ansi(h,On:)] [convsecs(getstat(%q<target>/%q<attr>`FLAGS,ApprovedOn))]};@select/inline hasattrval(%q<target>/%q<attr>`PARTNERS)=1,{@pemit %#=ansi(h,Partners:) [itemize(iter(get(%q<target>/%q<attr>`PARTNERS),name(%i0),%b,|),|,and,\,)]};@dolist/inline sortkey(#lambda/last(\%0,`),u(lattr,%q<target>/%q<attr>`COMMENT`*))={@pemit %#=subheader(name(get(%q<target>/%i0`BY)) commented on [convsecs(get(%q<target>/%i0`ON))]);@pemit %#=get(%q<target>/%i0)};@pemit %#=header()

&INC`MAKELOG u(ex-proj)=@check isdbref(%0);@check isdbref(%1);@check hasattr(%0/D`PROJECT`%2);@check strlen(%3);&[u(setr,log,D`PROJECT`%2`LOG`[nextslot(%0,D`PROJECT`%2`LOG)])] %0=secs();&%q<log>`BY %0=objid(%1);&%q<log>`CONTENTS %0=%3
@@ %0 - Project holder. %1 - enactor. %2 - Project slot. %3 - message.

&INC`LOG u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@attach u(ex-proj)/INC`PARTIALMATCH=%q<filename>;@pemit %#=header(Log for [name(%q<target>)] Project %q<filename>: [get(%q<target>/D`PROJECT`%q<filename>)]);@dolist/inline sortkey(#lambda/last(\%0,`),u(lattr,%q<target>/D`PROJECT`%q<filename>`LOG`*))={@pemit %#=subheader(By [name(get(%q<target>/%i0`BY))] on [convsecs(get(%q<target>/%i0))]);@pemit %#=get(%q<target>/%i0`CONTENTS)};@pemit %#=header()

&INC`NEW u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@check strlen(%q<filename>)=@pemit %#=msghead(PROJECT) ERROR: Project name empty.;@check or(isadmin(%#),strmatch(%q<target>,%#))=@pemit %#=msghead(PROJECT) ERROR: You may not change another's Projects.;@stop gt(strlen(%q<filename>),18)=@pemit %#=ERROR: Info names are limited to 18 characters or less.;@stop regmatchi(%q<filename>,\\|)=@pemit %#=ERROR: Pipe symbols are not allowed in info names.;@stop regmatchi(%q<filename>,\/)=@pemit %#=ERROR: Slashes symbols are not allowed in info names.;@check strlen(%1)=@pemit %#=msghead(PROJECT) ERROR: Text field empty.;&[u(setr,attr,D`PROJECT`[u(setr,newnum,add(1,default(%q<target>/D`PROJECT,0)))])] %q<target>=%q<filename>;&%q<attr>`DESC %q<target>=%1;&D`PROJECT %q<target>=%q<newnum>;@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You create the [last(%q<attr>,`)] '%q<filename>'},{@pemit %#=msghead(PROJECT) You create [last(%q<attr>,`)] '%q<filename>' for [name(%q<target>)]!;@pemit %q<target>=msghead(PROJECT) %n created the [last(%q<attr>,`)] '%q<filename>' Project for you};th setstat(%q<target>/%q<attr>`FLAGS,SetBy,objid(%#));th setstat(%q<target>/%q<attr>`FLAGS,SetOn,secs());@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,last(%q<attr>,`),{[name(%#)] created the Project: %0-%R%1}

&INC`DESC u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;&%q<attr>`DESC %q<target>=%1;@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You change your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project Desc!},{@pemit %#=msghead(PROJECT) You change [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project desc!;@pemit %q<target>=msghead(PROJECT) %n changed your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project desc!};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n changed [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project's Desc!;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] changed the Project's Desc to:%R%1}

&INC`VISIBLE u(ex-proj)=@check words(u(setr,players,lsearch(all,eplayer,\[words(wildgrepi(##,D`PROJECT`*`PARTNERS,*%:*))\])))=@pemit %#=msghead(PROJECT) ERROR: No Players have partnered Projects with you.;@pemit %#=header(Partnered Projects Infos);@pemit %#=u(table,iter(%q<players>,left(pueblize(name(%i0),+project [name(%i0)]),22)\([words(wildgrepi(%i0,D`PROJECT`*`PARTNERS,*%:*))]\)),25,78,|);@pemit %#=header()

&INC`RENAME u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@stop gt(strlen(%1),18)=@pemit %#=ERROR: Info names are limited to 18 characters or less.;@stop regmatchi(%1,\\|)=@pemit %#=ERROR: Pipe symbols are not allowed in info names.;@stop regmatchi(%1,\/)=@pemit %#=ERROR: Slashes symbols are not allowed in info names.;&%q<attr> %q<target>=%1;@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You change your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project Name to: %1},{@pemit %#=msghead(PROJECT) You change [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project name to: %1;@pemit %q<target>=msghead(PROJECT) %n changed your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project name to: %1};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n changed [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project to: %1;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] changed the Project's name to:%R%1}

&INC`START u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@stop strfirstof(getstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active),1)=@pemit %#=msghead(PROJECT) ERROR: That Project is already active!;th setstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active,1);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You activate your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project.},{@pemit %#=msghead(PROJECT) You activate [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@pemit %q<target>=msghead(PROJECT) %n activated your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n activated [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] activated the Project}

&INC`STOP u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@check strfirstof(getstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active),1)=@pemit %#=msghead(PROJECT) ERROR: That Project is not active!;th setstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active,0);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You pause your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project.},{@pemit %#=msghead(PROJECT) You pause [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@pemit %q<target>=msghead(PROJECT) %n paused your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n paused [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] paused the Project}

&INC`DURATION u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@check strlen(%1)=@pemit %#=msghead(PROJECT) ERROR: Duration field empty.;@check or(strmatch(%1,X),valnum(u(FUN`EVALTIME,%1)))=@pemit %#=msghead(PROJECT) ERROR: Duration must be in EVALTIME or X for Indefinite!;th u(setq,entry,);&%q<attr>`DURATION %q<target>=u(setr,time,if(strmatch(%1,X),X,u(FUN`EVALTIME,%1)));&%q<attr>`REMAINING %q<target>=%q<time>;th setstat(%q<target>/%q<attr>`FLAGS,Reported,0);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You schedule your %q<filename> '[get(%q<target>/%q<attr>)]' Project Duration to: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))]},{@pemit %#=msghead(PROJECT) You change [name(%q<target>)]'s %q<filename> '[get(%q<target>/%q<attr>)]' Project Duration to: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))];@pemit %q<target>=msghead(PROJECT) %n changed your %q<filename> '[get(%q<target>/%q<attr>)]' Project Duration to: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))]};@pemit/list get(%q<target>/%q<attr>`PARTNERS)=msghead(PROJECT) %n changed the Duration of [name(%q<target>)]'s %q<filename> '[get(%q<target>/%q<attr>)]' Project to: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))];@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] changed the Project's Duration to: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))]}

&INC`PREPARE u(ex-proj)=@attach u(ex-proj)/INC`TARGET;@attach u(ex-proj)/INC`FILENAME;@attach u(ex-proj)/INC`PARTIALMATCH=%q<filename>;@check strlen(%q<filename>)=@pemit %#=msghead(PROJECT) ERROR: Project name empty.;@check or(isadmin(%#),strmatch(%q<target>,%#),%0)=@pemit %#=msghead(PROJECT) ERROR: You may not change another's Projects.;@check or(%2,isadmin(%#),not(getstat(%q<target>/%q<attr>`FLAGS,Approved)))=@pemit %#=msghead(PROJECT) ERROR: That Project may not be changed by you.

&INC`ADD u(ex-proj)=@attach u(ex-proj)/INC`PREPARE=%0,%1,1;@check strlen(%1)=@pemit %#=msghead(PROJECT) ERROR: Comment field empty.;&[u(setr,attr,D`PROJECT`%q<filename>`COMMENT`[nextslot(D`PROJECT`%q<filename>`COMMENT)])] %q<target>=%1;&%q<attr>`ON %q<target>=secs();&%q<attr>`BY %q<target>=%:;@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You added a comment to your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project},{@pemit %#=msghead(PROJECT) You add a comment to [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@pemit %q<target>=msghead(PROJECT) %n added a comment to your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project};@pemit/list setdiff(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%:)=msghead(PROJECT) %n added a comment to [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a comment: %1}

&INC`ADDPARTNER u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@check strlen(%1)=@pemit %#=msghead(PROJECT) ERROR: Name field empty.;@attach u(ccs)/INC`CHECKPC=%1,1,PROJECT;@stop match(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>)=@pemit %#=msghead(PROJECT) ERROR: [subj(%q<t1>)] is already a Project partner!;&D`PROJECT`%q<filename>`PARTNERS %q<target>=filterbool(#lambda/isobjid(\%0),setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>));@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You added a partner to your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>},{@pemit %#=msghead(PROJECT) You add a partner to [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>;@pemit %q<target>=msghead(PROJECT) %n added a partner to your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n added a partner to [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a partner: %q<t1name>}

&INC`REMPARTNER u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@check strlen(%1)=@pemit %#=msghead(PROJECT) ERROR: Name field empty.;@attach u(ccs)/INC`CHECKPC=%1,1,PROJECT;@check match(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>)=@pemit %#=msghead(PROJECT) ERROR: [subj(%q<t1>)] is not a Project partner!;@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You removed a partner from your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>},{@pemit %#=msghead(PROJECT) You remove a partner from [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>;@pemit %q<target>=msghead(PROJECT) %n removed a partner from your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>};@pemit/list get(%q<target>/D`PROJECT`%q<filename>`PARTNERS)=msghead(PROJECT) %n removed a partner from [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project: %q<t1name>;&D`PROJECT`%q<filename>`PARTNERS %q<target>=filterbool(#lambda/isobjid(\%0),setdiff(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>));@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a partner: %q<t1name>}

&INC`FINISH u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@stop getstat(%q<target>/%q<attr>`FLAGS,Finished)=@pemit %#=msghead(PROJECT) ERROR: That project is already finished!;th setstat(%q<target>/%q<attr>`FLAGS,Finished,1);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You finished your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project},{@pemit %#=msghead(PROJECT) You finished [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@pemit %q<target>=msghead(PROJECT) %n finished your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project};@pemit/list setdiff(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%:)=msghead(PROJECT) %n finished [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] finished the project.}

&INC`UNFINISH u(ex-proj)=@attach u(ex-proj)/INC`PREPARE;@check getstat(%q<target>/%q<attr>`FLAGS,Finished)=@pemit %#=msghead(PROJECT) ERROR: That project is not finished!;th setstat(%q<target>/%q<attr>`FLAGS,Finished,0);@select/inline strmatch(%#,%q<target>)=1,{@pemit %#=msghead(PROJECT) You Unfinished your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project},{@pemit %#=msghead(PROJECT) You Unfinished [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@pemit %q<target>=msghead(PROJECT) %n Unfinished your %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project};@pemit/list setdiff(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%:)=msghead(PROJECT) %n Unfinished [name(%q<target>)]'s %q<filename> '[get(%q<target>/D`PROJECT`%q<filename>)]' Project;@attach u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] Unfinished the project.}

&INC`TIMEDIV u(ex-proj)=@check strlen(%0)=@pemit %#=msghead(PROJECT) No time entered to divide!;@check valnum(u(setr,time,u(FUN`EVALTIME,%0)))=@pemit %#=msghead(PROJECT) ERROR: Entered time must be in DURATION format!;@check strlen(%1)=@pemit %#=msghead(PROJECT) ERROR: No value entered to divide the duration by.;@check valnum(%1)=@pemit %#=msghead(PROJECT) ERROR: Divisor must be a whole, positive number.;@pemit %#=msghead(PROJECT) [u(FUN`DISPTIME,u(FUN`EVALTIME,%0))] Divided by %1: [u(FUN`DISPTIME,div(u(FUN`EVALTIME,%0),%1))]

&FUN`EVALTIME u(ex-proj)=lmath(add,iter(%0,switch(%i0,*s,before(%i0,s),*m,mul(before(%i0,m),u(mi)),*h,mul(before(%i0,h),u(ho)),*d,mul(before(%i0,d),u(da)),*w,mul(before(%i0,w),u(we)),*mo,mul(before(%i0,mo),u(mo)),*se,mul(before(%i0,se),u(se)),*y,mul(before(%i0,y),u(ye)),0)))

&FUN`DISPTIME u(ex-proj)=if(strmatch(%0,X),Indefinite,trim(if(u(setr,ye,div(u(setr,newsec,%0),u(ye))),%q<ye>ye [u(setq,newsec,sub(%0,mul(u(ye),%q<ye>)))])[if(and(%q<newsec>,u(setr,mo,div(%q<newsec>,u(mo)))),%q<mo>mo [u(setq,newsec,sub(%q<newsec>,mul(u(mo),%q<mo>)))])][if(and(%q<newsec>,u(setr,we,div(%q<newsec>,u(we)))),%q<we>w [u(setq,newsec,sub(%q<newsec>,mul(u(we),%q<we>)))])][if(and(%q<newsec>,u(setr,da,div(%q<newsec>,u(da)))),%q<da>d [u(setq,newsec,sub(%q<newsec>,mul(u(da),%q<da>)))])][if(and(%q<newsec>,u(setr,ho,div(%q<newsec>,u(ho)))),%q<ho>h [u(setq,newsec,sub(%q<newsec>,mul(u(ho),%q<ho>)))])][if(and(%q<newsec>,u(setr,mi,div(%q<newsec>,u(mi)))),%q<mi>m [u(setq,newsec,sub(%q<newsec>,mul(u(mi),%q<mi>)))])][if(%q<newsec>,%q<newsec>s)]))

&YE u(ex-proj)=mul(u(da),425)
&SE u(ex-proj)=mul(u(mo),3)
&MO u(ex-proj)=mul(u(we),4)
&WE u(ex-proj)=mul(u(da),7)
&DA u(ex-proj)=mul(u(ho),25)
&HO u(ex-proj)=mul(u(mi),60)
&MI u(ex-proj)=60

&TRG`TICKDOWN u(ex-proj)=@dolist lsearch(all,eplayer,\[and(approved(##),nattr(##/D`PROJECT`*))\])={@dolist/inline/nobreak filterbool(#lambda/and(not(strfirstof(getstat(%i0/\%0`FLAGS,Finished),0)),strfirstof(getstat(%i0/\%0`FLAGS,Active),1)),u(lattr,%i0/D`PROJECT`*))={&%i0`REMAINING %i1=bound(sub(get(%i1/%i0`REMAINING),%0),0);@trigger u(ex-proj)/TRG`CHECKFINISH=%i1,%i0}}

&TRG`CHECKFINISH u(ex-proj)=@check get(%0/%1`DURATION);@stop get(%0/%1`REMAINING);@stop getstat(%0/%1`FLAGS,Reported);@pemit/list setunion(get(%0/%1`PARTNERS),%0)=msghead(PROJECT) [name(%0)]'s Project [last(%1,`)] '[default(%0/%1,Unset)]' has finished its Duration.[if(getstat(%0/%1`FLAGS,Approved),%BIt has been submitted for review!)];@attach u(ex-proj)/INC`MAKELOG=%0,%0,last(%1,`),{Project duration finished![if(getstat(%0/%1`FLAGS,Approved),%BIt has been submitted for review!)]};@select/inline t(getstat(%0/%1`FLAGS,Approved))=1,{@check isdbref(u(setr,bucket,locate(get(u(job)/vc),PROJ,TXxi)))=@nscemit/noisy Staff Reports=Project Bucket not found, cannot finish [name(%0)]'s pending Project [last(%0,`)] '[default(%0/%1,Unset)]';@trigger get(u(job)/va)/TRIG_CREATE=%0,%q<bucket>,strfirstof(getstat(u(rst)/PRIORITY,%q<category>),1),name(%0) - [last(%1,`)] '[default(%0/%1,Unset)]',The Project is ready for admin review.,iter(filterbool(#lambda/isobjid(\%0),setunion(objid(%0),get(%0/%1`PARTNERS))),num(%i0)),,};th setstat(%0/%1`FLAGS,Reported,1)



