@@ DEPENDENCIES - CORE

th u(NEWCOBJ,Lock Management System <LMS>,lms,,,,WIZARD SAFE !NO_COMMAND,INHERIT SIDEFX SAFE)
th u(NEWCOBJ,Key Object Parent <KOP>,kop,u(cobj,lms),,,WIZARD SAFE,INHERIT SIDEFX SAFE)

@@ Member Lock
@lock/basic [u(cobj,kop)]=FUN`AUTHCHECK`MEMBER/1
@lset [u(cobj,kop)]/basic=visual

@lock/give [u(cobj,kop)]=FUN`AUTHCHECK`MODERATE/1
@lset [u(cobj,kop)]/give=visual

&FUN`ISADMIN [u(cobj,kop)]=u(isadmin,%#)
&FUN`AUTHCHECK`MODERATE [u(cobj,kop)]=cor(match(v(MODERATORS),%#),match(v(OWNERS),%#))
&FUN`AUTHCHECK`MEMBER [u(cobj,kop)]=cor(u(FUN`AUTHCHECK`MODERATE),match(v(MEMBERS),%#),u(FUN`AUTHCHECK`OR,%#))
&FUN`AUTHCHECK`IC [u(cobj,kop)]=u(FUN`AUTHCHECK`OR,%#)
&FUN`AUTHCHECK`OOC [u(cobj,kop)]=u(FUN`AUTHCHECK`OR,%#)

&FUN`AUTHCHECK`OR [u(cobj,kop)]=u(lmax,iter(u(lattrp,u(cobj,kop)/FUN`AUTHCHECK`OR`*),u(%i0,%0)))
&FUN`AUTHCHECK`OR`BUILDER [u(cobj,kop)]=if(default(CONF`BUILDER,0),haspower(%0,BUILDER),0)
&FUN`AUTHCHECK`OR`NOAPPROVED [u(cobj,kop)]=if(v(CONF`NOAPPROVED),u(isapproved,%0))
&FUN`AUTHCHECK`OR`SPLAT [u(cobj,kop)]=if(strlen(v(CONF`SPLAT)),match(v(CONF`SPLAT),u(getsplat,%0)),0)
&FUN`AUTHCHECK`OR`SPHERE [u(cobj,kop)]=if(strlen(v(CONF`SPHERE)),match(v(CONF`SPHERE),u(getsphere,%0)),0)
&FUN`AUTHCHECK`OR`ADMIN [u(cobj,kop)]=if(v(CONF`NOSTAFFCHECK),,u(isadmin,%0))


&CMD`+KEY`PENNMUSH [u(cobj,lms)]=$^(?s)(?\:\+)?(key)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+KEY`MAIN
@set [u(cobj,lms)]/CMD`+KEY`PENNMUSH=regexp
&CMD`+KEY`RHOSTMUSH [u(cobj,lms)]=$^(?s)(?\:\+)?(key)(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+KEY`MAIN
@set [u(cobj,lms)]/CMD`+KEY`RHOSTMUSH=regexp
&CMD`+KEY`MAIN [u(cobj,lms)]=@attach %!/INC`GETSWITCH=%2;@include %!/INC`[u(strfirstof,%q<switch>,MAIN)]=%3,%4
@set [u(cobj,lms)]/CMD`+KEY`[switch(v(game),PennMUSH,RHOSTMUSH,RhostMUSH,PENNMUSH)]=no_command


&CMD`+LOCK [u(cobj,lms)]=$^(?s)(?\:\+)?(lock)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/INC`LOCK=%3,%4,strfirstof(%2,basic)
@set %!/CMD`+LOCK=regexp

&SWITCHES`PLAYER [u(cobj,lms)]=ADD|REM|MAKE|DESTROY|AUTH|REVOKE|CHOWN|CONFIG
&SWITCHES`ADMIN [u(cobj,lms)]=
&SYSTEM`NAME [u(cobj,lms)]=LOCKS

&LOCKTYPES`PENNMUSH [u(cobj,lms)]=Basic|Enter|Teleport|use|page|zone|parent|link|open|mail|speech|listen|command|leave|drop|dropin|give|from|pay|receive|follow|examine|chzone|forward|filter|infilter|control|dropto|destroy|interact|take|mailforward|chanjoinlock|chanspeaklock|chanseelock|chanhidelock|chanmodlock

&LOCKTYPES`RHOSTMUSH [u(cobj,lms)]=Basic|DefaultLock|EnterLock|GiveLock|LeaveLock|LinkLock|PageLock|ParentLock|ReceiveLock|DropLock|SpeechLock|TeloutLock|TportLock|UseLock|UserLock|TwinkLock|ZoneWizLock|ZoneToLock|DarkLock|OpenLock|DropToLock|GiveToLock|GetFromLock|ChownLock

&INC`MAIN [u(cobj,lms)]=@check or(words(u(setr,keys,u(FUN`LISTKEYS))),words(u(setr,groups,u(u(cobj,groups)/FUN`LISTGROUPS))))=@attach %!/INC`MSG=ERROR: There are no Keys or Groups!;@switch/first/inline strlen(%0)=0,{@pemit %#=header(mudname() Keys);@pemit %#=ansi(u(color,%#,LOCKS,COLUMN_NAMES),align(-3 6 30,*,Dbref,Name));@dolist/inline/delimit | [setunion(iter(%q<keys>,u(capnames,default(##/CONF`CATEGORY,Unset)),%B,|),,|,i,|)]={@pemit %#=u(separator,## Master Keys);@pemit %#=u(FUN`DISPLAY,u(filter,KEYMATCH,%q<keys>,%b,%b,##),%#)};@pemit %#=u(header,mudname() Groups);@select/inline t(words(u(setr,major,u(filter,MAJORGRUOPS,,%q<groups>))))=1,{@pemit %#=u(separator,Major Groups);@pemit %#=u(FUN`DISPLAY,%q<major>,%#)};@select/inline t(words(u(setr,minor,u(filter,MINORGROUPS,%q<groups>))))=1,{@pemit %#=u(separator,Minor Groups);@pemit %#=u(FUN`DISPLAY,%q<minor>,%#)};@pemit %#=u(header,+key <name> to see specific Master Key!)},{@attach %!/INC`KEYFIND=%0;@check cor(elock(%q<key>/Basic,%#),u(isadmin,%#))=@attach %!/INC`MSG=ERROR: Cannot check the status of a Key you do not pass!;@pemit %#=u(header,mudname() Key: [name(%q<key>)]);@pemit %#=[align(50 25,ansi(h,%q<key>) - You [if(elock(%q<key>/BASIC,%#),ansi(hg,Pass),ansi(hr,Fail))] this Key's lock!%R[ljust(rjust(OWNER:,11),11)] [u(itemize,iter(u(filter,ISOBJID,get(%q<key>/OWNERS)),u(moniker,%i0),%b,|),|,and,\,)] %R[ljust(rjust(MODERATORS:,11),11)] [itemize(iter(u(filter,ISOBJID,get(%q<key>/MODERATORS)),u(moniker,%i0),%b,|),|,and,\,)]%R[ljust(rjust(MEMBERS:,11),11)] [itemize(iter(u(filter,ISOBJID,get(%q<key>/MEMBERS)),u(moniker,%i0),%b,|),|,and,\,)],iter(v(VAR`LISTCONF),ljust(rjust(%i0:,10),10)%B[u(FUN`GET`%i0,%q<key>)],|,%R))];@pemit %#=u(header)}

&FIL`KEYMATCH [u(cobj,lms)]=strmatch(u(capnames,default(%0/CONF`CATEGORY,Unset)),%1)
&FIL`MAJORGROUPS [u(cobj,lms)]=u(u(cobj,groups)/FUN`GETSET,%0,MAJOR)
&FIL`MINORGROUPS [u(cobj,lms)]=not(u(u(cobj,groups)/FUN`GETSET,%0,MAJOR))

&FUN`DISPLAY [u(cobj,lms)]=iter(%0,align(3 6 30,\[[if(elock(%i0/Member,%1),ansi(hg,O),ansi(hr,X))]\],u(pueblize,%i0,if(strmatch(parent(%i0),u(cobj,kop)),+key,+group) %i0),u(moniker,%i0)),%b,%r)

&VAR`LISTCONF [u(cobj,lms)]=APPROVED|BUILDER|SPLAT|SPHERE|GROUP|KEY
&FUN`GET`APPROVED [u(cobj,lms)]=if(get(%0/CONF`APPROVED),Yes,No)
&FUN`GET`BUILDER [u(cobj,lms)]=if(get(%0/CONF`BUILDER),Yes,No)
&FUN`GET`SPLAT [u(cobj,lms)]=get(%0/CONF`SPLAT)
&FUN`GET`SPHERE [u(cobj,lms)]=get(%0/CONF`SPHERE)
&FUN`GET`GROUP [u(cobj,lms)]=u(itemize,iter(get(%0/CONF`GROUP),%i0,%b,|),|,and,\,)
&FUN`GET`KEY [u(cobj,lms)]=u(itemize,iter(get(%0/CONF`KEY),%i0,%b,|),|,and,\,)

&INC`KEYNAME [u(cobj,lms)]=@check strlen(%0)=@attach %!/INC`MSG=ERROR: Master Key Name field empty.;@check valid(name,%0)=@attach %!/INC`MSG=ERROR: An object can't have that name. Try without special characters? Or shorter?;@stop isdbref(u(find_in,u(cobj,kop),%0))=@attach %!/INC`MSG=ERROR: A Key named that already exists.

&FUN`FINDKEY [u(cobj,lms)]=u(namegrab,u(FUN`LISTKEYS),%0)

&INC`KEYFIND [u(cobj,lms)]=@check strlen(%0)=@attach %!/INC`MSG=ERROR: Key field empty.;@check isdbref(u(setr,key,u(FUN`FINDKEY,%0)))=@attach %!/INC`MSG=ERROR: Key '%0' not found!

&INC`MAKE [u(cobj,lms)]=@check cor(u(isadmin,%#),cand(u(game_config,KEY,PLAYER_MAKE),approved(%#)))=@attach %!/INC`MSG=ERROR: Players may not make Master Keys.;@attach %!/INC`KEYNAME=%0;@tel [u(setr,key,create(%0))]=[u(cobj,kop)];@parent %q<key>=u(cobj,kop);@set %q<key>=WIZARD SAFE;@attach %!/INC`MSG=You have created the %0 Master Key!;@attach %!/INC`MSG`CHAN=Created a new Master Key: %q<key> - %0

&INC`DESTROY [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),u(game_config,KEY,PLAYER_DESTROY))=@attach %!/INC`MSG=ERROR: Players may not destroy Master Keys.;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not destroy Master Keys they do not own.;@attach %!/INC`VERIFY={WARNING: This will Destroy the Master Key [name(%q<key>)]. The key list will be deleted. Are you sure? Enter the same command again in ten seconds to verify.},LOCK DELETE %q<key>;@attach %!/INC`MSG=You have destroyed the Master Key [name(%q<key>)]!;@attach %!/INC`MSG`CHAN=Destroyed a Master Key: %q<key> - [name(%q<key>)];@attach %!/DELETE=%q<key>

&INC`CHOWN [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not reassign Master Keys they do not own.;@attach %!/INC`CHECKPC=%1,1;@attach %!/INC`VERIFY={WARNING: This will REASSIGN OWNERS for the Master Key [name(%q<key>)]. Are you sure? Enter the same command again in ten seconds to verify.},LOCK CHOWN %q<key> %q<t1>;&OWNERS %q<key>=%q<t1objid>;@attach %!/INC`MSG=You have reassigned ownership of Master Key [name(%q<key>)] to %q<t1name>!;@attach %!/INC`MSG=Ownership of Master Key [name(%q<key>)] has been assigned to you!,%q<t1>;@attach %!/INC`MSG`CHAN=Reassigned Master Key [name(%q<key>)] to %q<t1name>

&INC`AUTH [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not authorize Master Key Moderators for Master Keys they do not own.;@attach %!/INC`CHECKPC=%1,1;@stop match(get(%q<key>/MODERATORS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> is already authorized for that Master Key.;&MODERATORS %q<key>=filterbool(#lambda/isobjid(\%0),setunion(get(%q<key>/MODERATORS),%q<t1objid>));@attach %!/INC`MSG=You authorized %q<t1name> to Moderate Master Key [name(%q<key>)].;@pemit %q<t1>=u(MSGHEAD,KEY) %n authorized you to Moderate Master Key [name(%q<key>)]!;@switch/first/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy u(VAR`ALERTSCHANNEL)=ansi(h,%n) authorized %q<t1name> to Moderate Master Key [name(%q<key>)].}

&INC`REVOKE [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not revoke Master Key handlers for Master Keys they do not own.;@attach %!/INC`CHECKPC=%1,1,KEY;@check match(get(%q<key>/MODERATORS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> is not authorized for that Master Key.;&MODERATORS %q<key>=filterbool(#lambda/isobjid(\%0),setdiff(get(%q<key>/MODERATORS),%q<t1objid>));@attach %!/INC`MSG=You revoked %q<t1name>'s authority to Moderate Master Key [name(%q<key>)].;@pemit %q<t1>=u(MSGHEAD,KEY) %n revoked your authority to Moderate Master Key [name(%q<key>)].;@switch/first/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy u(VAR`ALERTSCHANNEL)=ansi(h,%n) revoked %q<t1name>'s authority to Moderate Master Key [name(%q<key>)].}

&INC`ADD [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(elock(%q<key>/MODERATE,%#),u(isadmin,%#))=@attach %!/INC`MSG=ERROR: You are not authorized to moderate that Key!;@attach %!/INC`CHECKPC=%1,1,KEY;@stop match(get(%q<key>/MEMBERS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> already has that Key.;&MEMBERS %q<key>=filterbool(#lambda/isobjid(\%0),setunion(get(%q<key>/MEMBERS),%q<t1objid>));@attach %!/INC`MSG=You give %q<t1name> a [name(%q<key>)] Key.;@pemit %q<t1>=u(MSGHEAD,KEY) %n gave you a [name(%q<key>)] Key!;@switch/first/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy u(VAR`ALERTSCHANNEL)=ansi(h,%n) gave %q<t1name> a [name(%q<key>)] Key.}

&INC`REMOVE [u(cobj,lms)]=@attach %!/INC`KEYFIND=%0;@check cor(elock(%q<key>/MODERATE,%#),u(isadmin,%#))=@attach %!/INC`MSG=ERROR: You are not authorized to moderate that Key!;@attach %!/INC`CHECKPC=%1,1,KEY;@check match(get(%q<key>/MEMBERS),%q<t1objid>)=@attach %!/INC`MSG=ERROR: %q<t1name> does not have that Key.;&MEMBERS %q<key>=filterbool(#lambda/isobjid(\%0),setdiff(get(%q<key>/MEMBERS),%q<t1objid>));@attach %!/INC`MSG=You revoke %q<t1name>'s [name(%q<key>)] Key.;@pemit %q<t1>=u(MSGHEAD,KEY) %n revoked your [name(%q<key>)] Key!;@switch/first/inline gt(v(VAR`ALERTMODE),0)=1,{@nscemit/noisy u(VAR`ALERTSCHANNEL)=ansi(h,%n) revoked %q<t1name>'s [name(%q<key>)] Key.}

&INC`CONFIG [u(cobj,lms)]=@attach %!/INC`KEYFIND=before(%0,/);@check cor(u(isadmin,%#),match(get(%q<key>/OWNERS),u(objid,%#)))=@attach %!/INC`MSG=ERROR: Players may not configure Master Keys they do not own.;@check strlen(after(%0,/))=@attach %!/INC`MSG=ERROR: Parameter empty.;@attach %!/INC`PARTIAL=after(%0,/),v(VAR`CONFCATS),|,KEY,parameter,parameter;@switch/first/inline strlen(%1)=0,{&CONF`%q<parameter> %q<key>;@attach %!/INC`MSG=You cleared Master Key [name(%q<key>)]'s %q<parameter> Setting.},{@attach %!/INC`KEY`CONFIG`%q<parameter>;&CONF`%q<parameter> %q<key>=%q<entry>;@attach %!/INC`MSG=You set Master Key [name(%q<key>)]'s %q<parameter> Setting to: %q<entry>}

&VAR`CONFCATS [u(cobj,lms)]=CATEGORY|BUILDER|APPROVED|NOAPPROVED|GROUP|SPLAT|SPHERE|KEY|NOSTAFFCHECK

&INC`KEY`CONFIG`CATEGORY [u(cobj,lms)]=th u(setq,entry,%1)
&INC`KEY`CONFIG`BUILDER [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`KEY`CONFIG`APPROVED [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`KEY`CONFIG`NOAPPROVED [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`KEY`CONFIG`NOSTAFFCHECK [u(cobj,lms)]=th u(setq,entry,t(%1))
&INC`KEY`CONFIG`GROUP [u(cobj,lms)]=@check lmath(min,u(setr,entry,iter(%1,u(u(gso)/FUN`FINDGROUP,%i0))))=@attach %!/INC`MSG=ERROR: One or more Groups was not found. Groups are separated by spaces so use their IDs or ALIASes!
&INC`KEY`CONFIG`SPLAT [u(cobj,lms)]=@check lmath(min,iter(u(setr,entry,sort(ucstr(%1))),match(get(u(ex-cdo)/VAR`SPLATS),%i0,|)))=@attach %!/INC`MSG=ERROR: One or more Splats was not found. Splats are separated by spaces.
&INC`KEY`CONFIG`SPHERE [u(cobj,lms)]=@check lmath(min,iter(u(setr,entry,sort(ucstr(%1))),match(get(u(ncdo)/VAR`SPHERES),%i0,|)))=@attach %!/INC`MSG=ERROR: One or more Spheres was not found. Spheres are separated by spaces.
&INC`KEY`CONFIG`KEY [u(cobj,lms)]=@check eq(words(u(setr,choices,setdiff(u(setr,entry,%1),u(%!/FUN`LISTLOCKS)))),0)=@attach %!/INC`MSG=ERROR: Following lock types not found: [itemize(%q<choices>,|,and,\,)]

&INC`LOCK [u(cobj,lms)]=@check strlen(%0)=@attach %!/INC`MSG=ERROR: No Target entered to lock.;@check isdbref(u(setr,target,locate(%#,%0,N)))=@attach %!/INC`MSG=ERROR: %0 does not match anything.;@check controls(%#,%q<target>)=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`DOLOCK=%q<target>,%2,%1,LOCK

&INC`DOLOCK [u(cobj,lms)]=@check cor(match(get(%!/VAR`LOCKTYPES),%1,|),strmatch(%1,user:?*),not(strlen(%1)))=@pemit %#=u(MSGHEAD,LOCK) ERROR: Must match a proper locktype or be a user: lock.;@switch/first/inline gt(strlen(%2),0)=1,{th u(setq,dbs,setunion(u(%!/FUN`LISTKEYS),u(u(gso)/FUN`LISTGROUPS)));@stop words(u(setr,choices,filterbool(#lambda/not(isdbref(namegrab(%q<dbs>,before(\%0,/)))),%2)))=@pemit %#=u(MSGHEAD,%3) ERROR: Following Master Keys not found: [itemize(%q<choices>,|,and,\,)];@dolist/inline %2={@check isdbref(u(setr,grab,namegrab(%q<dbs>,before(%i0,/))))=@pemit %#=u(MSGHEAD,%3) ERROR: Master Key Not Found: [before(%i0,/)];@check match(u(%!/FUN`LISTLOCKS,%q<grab>),strfirstof(after(%i0,/),MEMBER))=@pemit %#=u(MSGHEAD,%3) ERROR: Lock Type for [before(%i0,/)] Not Found: [after(%i0,/)]};@lock[if(strlen(%1),/%1)] %0=[iter(%2,@[namegrab(%q<dbs>,before(%i0,/))][if(strlen(after(%i0,/)),/[after(%i0,/)],/MEMBER)],%B,|)];@switch/first/inline t(%4)=1,{@lset %0[if(strlen(%1),/%1)]=!no_inherit};@pemit %#=u(MSGHEAD,%3) You have changed the [u(setr,msg,'[if(strlen(%1),u(capnames,%1),Basic)]' Lock on [type(%0)] %0 ([name(%0)]) to: [itemize(u(capnames,%2),%b,and,\,)])];@switch/first/inline gt(get(%!/VAR`ALERTMODE),0)=1,{@nscemit/noisy u(%!/VAR`ALERTSCHANNEL)=ansi(h,%n) set the %q<msg>}},0,{@unlock[if(strlen(%1),/%1)] %0;@pemit %#=u(MSGHEAD,%3) You have removed the [u(setr,msg,'[if(strlen(%1),u(capnames,%1),Basic)]' Lock on [type(%0)] %0 ([name(%0)])];@switch/first/inline gt(get(%!/VAR`ALERTMODE),0)=1,{@nscemit/noisy u(%!/VAR`ALERTSCHANNEL)=ansi(h,%n) removed the %q<msg>)}}
@@ - %0, target. %1 - lock type, %2 - lock string. %3 - announce. %4 - set !no_inherit

&VAR`ALERTMODE [u(cobj,lms)]=1
&VAR`ALERTSCHANNEL [u(cobj,lms)]=u(CMO`STAFFREP)
&VAR`PLAYERMAKE [u(cobj,lms)]=0
&VAR`PLAYERDESTROY [u(cobj,lms)]=0

&FUN`LISTLOCKS [u(cobj,lms)]=setunion(if(%1,iter(filterbool(#lambda/regmatchi(\%0,^USER:\\\\w+$),setunion(llocks(%0),if(isdbref(parent(%0)),llocks(parent(%0))))),after(%i0,USER:)),iter(filterbool(#lambda/strmatch(\%0,USER:*),setunion(llocks(%0),if(isdbref(parent(%0)),llocks(parent(%0))))),after(%i0,USER:))),)
&FUN`LISTKEYS [u(cobj,lms)]=sort(filterbool(#lambda/strmatch(u(kop),parent(\%0)),lthings(u(kop))),namei)

@@ @pemit %#=header(u(capnames,Exits))%R[iter(lsearch(all,eexit,\[lmath(max,iter(llocks(##),strmatch(lock(##/\%i0),*[u(kdb)]*)))\]),align(6 20 50,%i0,name(%i0),iter(llocks(%i0),%i0>%b[lock(%i1/%i0)],%b,%r)),%b,%r)]

@@ @pemit %#=header(u(capnames,Things))%R[iter(lsearch(all,ething,\[lmath(max,iter(llocks(##),strmatch(lock(##/\%i0),*[u(kdb)]*)))\]),align(6 20 50,%i0,name(%i0),iter(llocks(%i0),%i0>%b[lock(%i1/%i0)],%b,%r)),%b,%r)]

@@ @pemit %#=header(u(capnames,Rooms))%R[iter(lsearch(all,eroom,\[lmath(max,iter(llocks(##),strmatch(lock(##/\%i0),*[u(kdb)]*)))\]),align(6 20 50,%i0,name(%i0),iter(llocks(%i0),%i0>%b[lock(%i1/%i0)],%b,%r)),%b,%r)]

&TRG`CONVERT [u(cobj,lms)]=@dolist edit(u(lattr,u(kdb)/LOCK`*),LOCK`,)={@attach %!/INC`KEY`MAKE=%i0;@alias %q<key>=%i0;@cpattr u(kdb)/LOCK`%i0`OWNER=%q<key>/OWNERS;@cpattr u(kdb)/LOCK`%i0`HANDLER=%q<key>/MODERATORS;@cpattr u(kdb)/LOCK`%i0`HOLDERS=%q<key>/MEMBERS;@dolist/delimit | v(VAR`CONFCATS)={@cpattr u(kdb)/LOCK`%i1`%i0=%q<key>/CONF`%i0}};@wait 1=@trigger me/TRG`CONVERT`BBS;@wait 3={@trigger me/TRG`CONVERT`EXIT;@trigger me/TRG`CONVERT`THING;@trigger me/TRG`CONVERT`ROOM}

&TRG`CONVERT`BBS [u(cobj,lms)]=th u(setq,boards,setunion(get(u(bbs-db)/groups),iter(u(u(gso)/FUN`LISTGROUPS),get(%i0/BOARDS))));th u(setq,dbs,setunion(u(%!/FUN`LISTKEYS),u(u(gso)/FUN`LISTGROUPS)));@dolist %q<boards>={@dolist filterbool(#lambda/strmatch(lock(%i0/\%0),*[u(kdb)]*),llocks(%i0))={@lock/%i0 %i1=iter(lock(%i1/%i0),@[aliasgrab(%q<dbs>,before(after(%i0,/),-))]/MEMBER,|,|)}}

&TRG`CONVERT`ROOM [u(cobj,lms)]=th u(setq,dbs,setunion(u(%!/FUN`LISTKEYS),u(u(gso)/FUN`LISTGROUPS)));@dolist lsearch(all,eroom,\[lmath(max,iter(llocks(##),strmatch(lock(##/\%i0),*[u(kdb)]*)))\])={@dolist llocks(%i0)={@lock/%i0 %i1=iter(before(after(lock(%i1/%i0),\(),|DBREFLIST),@[aliasgrab(%q<dbs>,before(after(%i0,/),-))]/MEMBER,|,|)}}

&TRG`CONVERT`EXIT [u(cobj,lms)]=th u(setq,dbs,setunion(u(%!/FUN`LISTKEYS),u(u(gso)/FUN`LISTGROUPS)));@dolist lsearch(all,eexit,\[lmath(max,iter(llocks(##),strmatch(lock(##/\%i0),*[u(kdb)]*)))\])={@dolist llocks(%i0)={@lock/%i0 %i1=iter(before(after(lock(%i1/%i0),\(),|DBREFLIST),@[aliasgrab(%q<dbs>,before(after(%i0,/),-))]/MEMBER,|,|)}}

&TRG`CONVERT`THING [u(cobj,lms)]=th u(setq,dbs,setunion(u(%!/FUN`LISTKEYS),u(u(gso)/FUN`LISTGROUPS)));@dolist lsearch(all,ething,\[lmath(max,iter(llocks(##),strmatch(lock(##/\%i0),*[u(kdb)]*)))\])={@dolist llocks(%i0)={@lock/%i0 %i1=iter(before(after(lock(%i1/%i0),\(),|DBREFLIST),@[aliasgrab(%q<dbs>,before(after(%i0,/),-))]/MEMBER,|,|)}}