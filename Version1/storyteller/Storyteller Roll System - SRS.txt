@switch/inline isdbref(u(srs))=0,{@tel create(Storyteller Roll System <SRS>)=config(master_room)}
&srs u(coi)=locate(config(master_room),Storyteller Roll System <SRS>,TXxi)
@parent u(srs)=u(coi)
@set u(srs)=WIZARD !NO_COMMAND

&CMD`+ROLL u(srs)=$^(?\:\+)?(st)?(d)?roll(?\:/(\S+))?(?\: +(.+?))?(?\:=(.*))?$:@break strmatch(init,%4);@switch/inline gt(words(%3,/),0)=1,{@assert u(u(srs)/FUN`FLAGCHECK,%3)=@nspemit %#=u(RFN`MSGHEAD) ERROR: [itemize(iter(%q<errcheck>,ansi(h,%i0),|,|),|,and,\,)]};@switch/inline ucstr(%1)=ST,{@assert isadmin(%#)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Permission denied.;@assert strlen(%4)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Who will you roll for?;@include u(ccs)/INC`CHECKPC=%4,1,v(VAR`MSGHEAD)};@assert strlen(setr(string,switch(%1,ST,%5,%4)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: You must enter a formula of stats and/or numbers to roll. Example: Dexterity + Melee - 3;@assert strlen(setr(inflate,u(u(srs)/FUN`NORMALIZE,%q<string>)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Could not format roll formula. Please contact a coder.;@assert strlen(setr(findnames,u(u(srs)/FUN`FINDNAMES,%q<inflate>,%q<t1>)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Could not perform name finding. Please contact a coder.;@assert gt(setr(totaldice,ulocal(u(srs)/FUN`CALC,setr(calcdice,u(u(srs)/FUN`CALCDICE,%q<findnames>,%q<t1>)))),0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You have no dice to roll! Check your spelling and ensure that penalties aren't reducing your roll to nothing.;@include u(srs)/INC`INIT=%1,%2;@include u(srs)/INC`%1ROLL
@set u(srs)/CMD`+ROLL=regexp

&VAR`MSGHEAD u(srs)=DICE
&RFN`MSGHEAD u(srs)=msghead(v(VAR`MSGHEAD))
&RFN`HEADER u(srs)=header(%0,,DICE`BORDER,DICE`BORDERDOT,DICE`BORDERTEXT,1)
&RFN`SEPARATOR u(srs)=separator(%0,,DICE`BORDER,DICE`BORDERDOT,DICE`BORDERTEXT,1)
&RFN`SUBHEADER u(srs)=subheader(%0,,DICE`BORDER,DICE`BORDERDOT,DICE`BORDERTEXT,1)

&FUN`FLAGCHECK u(srs)=lmath(min,iter(ucstr(%0),regeditalli(%i0,^\(?P<switch>\\w+?\)\(?P<num>\\d+\)?$,if(hasattr(u(srs)/FUN`FLAGCHECK`$<switch>),u(FUN`FLAGCHECK`$<switch>,$<num>),setq(errcheck,setunion(%q<errcheck>,Unrecognized switch: %i0,|,|))0)),/))

&FUN`FLAGCHECK`MUL u(srs)=if(valnum(%0),setq(mul,%0)1,u(FUN`FLAGERROR,Multi-Rolls must use whole positive numbers.)0)
&FUN`FLAGCHECK`TN u(srs)=if(valnum(%0),setq(tn,%0)1,u(FUN`FLAGERROR,Target Numbers must use whole positive numbers.)0)
&FUN`FLAGCHECK`DIF u(srs)=if(valnum(%0),if(not(%q<def>),setq(dif,%0)1,u(FUN`FLAGERROR,Difficulty and Defense cannot be used together.)),u(FUN`FLAGERROR,Difficulty must use whole positive numbers.)0)
&FUN`FLAGCHECK`SUX u(srs)=if(valnum(%0),setq(sux,%0)1,u(FUN`FLAGERROR,Successes must use whole positive numbers.)0)
&FUN`FLAGCHECK`PEN u(srs)=if(valnum(%0),setq(pen,%0)1,u(FUN`FLAGERROR,Penalties must use whole positive numbers.)0)
&FUN`FLAGCHECK`AG u(srs)=if(valnum(%0),setq(ag,%0)1,u(FUN`FLAGERROR,#-Again must use whole positive numbers.)0)
&FUN`FLAGCHECK`DEF u(srs)=if(valnum(%0),if(not(%q<dif>),setq(def,%0)1,u(FUN`FLAGERROR,Difficulty and Defense cannot be used together.)),u(FUN`FLAGERROR,Defense Values must use whole positive numbers.)0)
&FUN`FLAGCHECK`RE u(srs)=if(valnum(%0),setq(re,setunion(%0,%q<re>))1,u(FUN`FLAGERROR,Re-Roll # must use whole positive numbers.)0)
&FUN`FLAGCHECK`DBL u(srs)=if(valnum(%0),setq(dbl,setunion(%0,%q<dbl>))1,u(FUN`FLAGERROR,Doubles must use whole positive numbers.)0)
&FUN`FLAGCHECK`PRIVATE u(srs)=setq(private,1)1
&FUN`FLAGCHECK`PUBLIC u(srs)=setq(public,1)1

&FUN`FLAGERROR u(srs)=setq(errcheck,setunion(%q<errcheck>,%0,|,|))

&INC`INIT u(srs)=th u(u(srs)/FUN`INIT);th switchall(%0,d,setq(dbl,setdiff(%q<dbl>,10)),st,setq(dicemode,ST))

&FUN`INIT u(srs)=null([if(%q<tn>,,setq(tn,v(ROLL`INIT`TN)))][if(%q<mul>,,setq(mul,1))][if(%q<ag>,,setq(ag,v(ROLL`INIT`AG)))][if(%q<re>,,setq(re,v(ROLL`INIT`RE)))][if(%q<dbl>,,setq(dbl,v(ROLL`INIT`DBL)))][setq(dicemap,u(FUN`DICEMAP,%q<tn>,%q<dbl>,v(ROLL`INIT`BOTCHES)))])

&ROLL`INIT`TN u(srs)=8
&ROLL`INIT`DBL u(srs)=
&ROLL`INIT`AG u(srs)=10
&ROLL`INIT`RE u(srs)=
&ROLL`INIT`BOTCHES u(srs)=0

&FUN`CALC u(srs)=lmath(add,regeditalli(%0,(\[-+\])%B(\\d+),$1$2))
&FUN`CALCDICE u(srs)=regeditalli(%0,v(REG`FORMATROLL),if(isnum($0),floor($0),u(u(srs)/FUN`STATNUM,$0,%1)))

&FUN`FANCYDICE u(srs)=iter(%0,ansi(switchall(1,eq(setr(res,elements(%q<dicemap>,%i0)),0.001),hx,eq(%q<res>,0),hr,eq(%q<res>,1),hg,eq(%q<res>,2),hy,gte(%i0,%q<ag>),u,t(match(%q<re>,%i0)),C),switch(%q<res>,2,<%i0>,0.001,-%i0-,%i0)))

&FUN`FINDNAMES u(srs)=regeditalli(%0,v(REG`FORMATROLL),localize(if(isnum($0),floor($0),switch(setr(statcheck,$0),*/*,u(FUN`FINDSPECNAME,u(FUN`FINDSTATNAME,before(%q<statcheck>,/),%1)/[after(%q<statcheck>,/)],%1),u(FUN`FINDSTATNAME,%q<statcheck>,%1)))))

&FUN`FINDSTATNAME u(srs)=strfirstof(if(match(v(ROLL`DYNAMICSTATS),%0,|),ucstr(%0)),u(FUN`FINDSTATNAME`SEARCH`EXACT,%0,strfirstof(%1,%#)),grab(v(ROLL`DYNAMICSTATS),%0*,|),u(FUN`FINDSTATNAME`SEARCH`WILD,%0,strfirstof(%1,%#)),%0)

&FUN`FINDSPECNAME u(srs)=strfirstof(if(match(get(strfirstof(%1,%#)/D`SPECIALTIES),%0,|),%0),grab(iter(get(strfirstof(%1,%#)/D`SPECIALTIES),before(%i0,~),|,|),%0*,|),%0)

&ROLL`DYNAMICSTATS u(srs)=SPEED|DEFENSE|INITIATIVE|WILLPOWER|BLOOD POTENCY|PRIMAL URGE|PSYCHE|WYRD|GNOSIS|PYROS|ENDOWMENT|MORALITY
&ROLL`DYNAMICSTATS`SPEED u(srs)=add(bound(getstat(%0/D`ATTRIBUTES,Strength,BONUS),1),bound(getstat(%0/D`ATTRIBUTES,Dexterity,BONUS),1),5)
&ROLL`DYNAMICSTATS`DEFENSE u(srs)=add(min(bound(getstat(%0/D`ATTRIBUTES,Dexterity,BONUS),1),bound(getstat(%0/D`ATTRIBUTES,Wits,BONUS),1)),getstat(%0/D`BONUS,DEFENSE))
&ROLL`DYNAMICSTATS`INITIATIVE u(srs)=add(bound(getstat(%0/D`ATTRIBUTES,Dexterity,BONUS),1),bound(getstat(%0/D`ATTRIBUTES,Composure,BONUS),1),getstat(%0/D`BONUS,INITIATIVE))
&ROLL`DYNAMICSTATS`WILLPOWER u(srs)=u(u(npso)/FUN`MAX`WILLPOWER,%0)
&ROLL`DYNAMICSTATS`BLOOD_POTENCY u(srs)=getstat(%0/D`INFO,Power)
&ROLL`DYNAMICSTATS`PRIMAL_URGE u(srs)=getstat(%0/D`INFO,Power)
&ROLL`DYNAMICSTATS`PSYCHE u(srs)=getstat(%0/D`INFO,Power)
&ROLL`DYNAMICSTATS`WYRD u(srs)=getstat(%0/D`INFO,Power)
&ROLL`DYNAMICSTATS`GNOSIS u(srs)=getstat(%0/D`INFO,Power)
&ROLL`DYNAMICSTATS`PYROS u(srs)=getstat(%0/D`INFO,Power)
&ROLL`DYNAMICSTATS`MORALITY u(srs)=getstat(%0/D`INFO,Morality)
&ROLL`DYNAMICSTATS`ENDOWMENT u(srs)=lmath(max,iter(filterbool(#lambda/isint(after(\%0,~)),get(%0/D`ENDOWMENTS),|,|),last(%i0,~),|))

&FUN`FINDSTATNAME`SEARCH`EXACT u(srs)=null(iter(v(ROLL`CATEGORIES),if(match(iter(filterbool(#lambda/isint(last(\%0,~)),get(%1/D`%i0),|,|),first(%i0,~),|,|),%0,|),setr(found,%0)[ibreak(1)]),|,|))[ucstr(%q<found>)]

&FUN`FINDSTATNAME`SEARCH`WILD u(srs)=null(iter(v(ROLL`CATEGORIES),if(strlen(setr(found,grab(iter(filterbool(#lambda/isint(last(\%0,~)),get(%1/D`%i0),|,|),first(%i0,~),|,|),%0*,|))),%q<found>[ibreak(1)]),|,|))[ucstr(%q<found>)]

&ROLL`CATEGORIES u(srs)=ATTRIBUTES|SKILLS|ARCANA|DISCIPLINES|MANIFESTATIONS|RENOWN

&FUN`STATNUM u(srs)=localize(if(strmatch(%0,*/*),add(u(FUN`STATNUM,before(stripansi(%0),/),%1),strfirstof(last(grab(get(%#/D`SPECIALTIES),elements(stripansi(%0),1 2,/,/)*~*,|),~),0)),if(match(v(ROLL`DYNAMICSTATS),%0,|),add(u(ROLL`DYNAMICSTATS`[edit(stripansi(%0),%b,_)],strfirstof(%1,%#)),getbonus(strfirstof(%1,%#),stripansi(%0))),add(firstof(u(FUN`STATNUM`SEARCH,stripansi(%0),strfirstof(%1,%#)),0),getbonus(strfirstof(%1,%#),stripansi(%0))))))

&FUN`STATNUM`SEARCH u(srs)=null(iter(v(ROLL`CATEGORIES),if(strlen(setr(found,grab(get(%1/D`%i0),%0~*,|))),%q<found>[ibreak(1)]),|,|))[after(%q<found>,~)]

&FUN`FORMATROLL u(srs)=regeditalli(%0,v(REG`FORMATROLL),u(u(srs)/FUN`FORMATNUM,$0,strfirstof(%1,%#)),%b\\+%b,ansi(hg,%b+%b),%b\\-%b,ansi(hr,%b-%b))

&REG`FORMATROLL u(srs)=(\b\S+(?:\b\s\S+)*\b\)?)

&FUN`FORMATNUM u(srs)=localize(if(isnum(%0),floor(%0),if(setr(stat,u(u(srs)/FUN`STATNUM,%0,%1))[setq(bonus,getbonus(%1,before(%0,/)),spec,getstat(%1/D`SPECIALTIES,%0))],switch(%0,*/*,if(%q<spec>,ansi(h,ucstr(%0)),ansi(h,ucstr(before(%0,/))[ansi(hx,/[after(%0,/)])])),ansi(h,ucstr(%0)))[ansi(h,<)][ansi(h,sub(%q<stat>,%q<spec>,%q<bonus>))][if(%q<bonus>,ansi(hg,+%q<bonus>))][if(%q<spec>,ansi(hy,+%q<spec>))][ansi(h,>)],ansi(hx,%0<0>))))

&FUN`NORMALIZE u(srs)=squish(regeditall(%0,\(\\s*\)?\(?P<sym>\[\\+|\\-\]\)\(\\s*\)?,%b$<sym>%b))

&FUN`ROLLDICE u(srs)=lmath(add,elements(%1,%0))

&FUN`DICEMAP u(srs)=lreplace(if(%2,0.001,0) [iter(lnum(sub(%0,2)),0)] [iter(lnum(sub(11,%0)),1)],%1,2)

&FUN`INSREG u(srs)=setq(%0,linsert(r(%0),-1,%1,|)
&FUN`GETREG u(srs)=elements(r(%0),%1,|,|)

&FUN`ROLL u(srs)=[u(FUN`INSREG,roll%1,%0)][u(FUN`INSREG,roll%1,sort(die(%0,10,1)))][u(FUN`INSREG,roll%1,u(FUN`ROLLDICE,u(FUN`GETREG,roll%1,2),%q<dicemap>))][u(FUN`INSREG,roll%1,u(FUN`FANCYDICE,u(FUN`GETREG,roll%1,2)))][u(FUN`REROLL,u(FUN`GETREG,roll%1,2),roll%1)][u(FUN`INSREG,roll%1,filterbool(#lambda/not(match(%q<re>,\%0)),sort(cat(u(FUN`GETREG,roll%1,2),iter(listq(roll%1-reroll*),u(FUN`GETREG,%i0,2))))))][u(FUN`AGAIN,u(FUN`GETREG,roll%1,2),roll%1)][u(FUN`INSREG,roll%1,add(u(FUN`GETREG,roll%1,3),r(roll%1-rerollsux),r(roll%1-agrollsux)))]

&FUN`REROLL u(srs)=if(words(setinter(%q<re>,%0)),setq(%1-rerolls,add(r(%1-rerolls),1))[u(FUN`INSREG,%1-reroll[r(%1-rerolls)],words(filterbool(#lambda/match(%q<re>,\%0),%0)))][u(FUN`INSREG,%1-reroll[r(%1-rerolls)],sort(die(u(FUN`GETREG,%1-reroll[r(%1-rerolls)],1),10,1)))][u(FUN`INSREG,%1-reroll[r(%1-rerolls)],u(FUN`ROLLDICE,u(FUN`GETREG,%1-reroll[r(%1-rerolls)],2),%q<dicemap>))][u(FUN`INSREG,%1-reroll[r(%1-rerolls)],u(FUN`FANCYDICE,u(FUN`GETREG,%1-reroll[r(%1-rerolls)],2)))][setq(%1-rerollsux,add(r(%1-rerollsux),u(FUN`GETREG,%1-reroll[r(%1-rerolls)],3)))][u(FUN`REROLL,u(FUN`GETREG,%1-reroll[r(%1-rerolls)],2),%1)])

&FUN`AGAIN u(srs)=if(setr(agcount,words(filterbool(#lambda/gte(\%0,%q<ag>),%0))),setq(%1-agrolls,add(r(%1-agrolls),1))[u(FUN`INSREG,%1-agroll[r(%1-agrolls)],%q<agcount>)][u(FUN`INSREG,%1-agroll[r(%1-agrolls)],sort(die(u(FUN`GETREG,%1-agroll[r(%1-agrolls)],1),10,1)))][u(FUN`INSREG,%1-agroll[r(%1-agrolls)],u(FUN`ROLLDICE,u(FUN`GETREG,%1-agroll[r(%1-agrolls)],2),%q<dicemap>))][u(FUN`INSREG,%1-agroll[r(%1-agrolls)],u(FUN`FANCYDICE,u(FUN`GETREG,%1-agroll[r(%1-agrolls)],2)))][setq(%1-agrollsux,add(r(%1-agrollsux),u(FUN`GETREG,%1-agroll[r(%1-agrolls)],3)))][u(FUN`AGAIN,u(FUN`GETREG,%1-agroll[r(%1-agrolls)],2),%1)])

&FUN`ROLLRESULT u(srs)=if(and(not(isint(%0)),lt(%0,1)),ansi(hx,a botch!),switch(%1,0,if(lt(floor(%0),1),ansi(hr,a failure!),if(gt(floor(%0),1),ansi(hg,floor(%0) successes!),ansi(hg,a success!))),1,if(lte(floor(%0),%2),if(floor(%0),floor(%0) success[if(gt(floor(%0),1),es)]\, but [ansi(hr,a miss.)],no successes! [ansi(hr,a miss!)]),ansi(hg,floor(%0) success[if(gt(floor(%0),1),es)]! [sub(floor(%0),%2)] success[if(gt(sub(floor(%0),%2),1),es)] over DV!)),2,if(lt(floor(%0),%2),if(floor(%0),floor(%0) successes\, but [ansi(hr,a failure.)],no successes! [ansi(hr,a failure!)]),ansi(hg,floor(%0) Success[if(gt(floor(%0),1),es)]!%B[sub(floor(%0),%2)] Threshold Success[if(gt(sub(floor(%0),%2),1),es)]))))

&FUN`RESFORMAT u(srs)=setq(formatted,u(u(srs)/FUN`FORMATROLL,%q<findnames>,%q<t1>))[null(iter(lnum(1,%q<mul>),u(FUN`ROLL,%q<totaldice>,%i0)))][switch(%q<dicemode>,ST,if(%q<public>,%n rolls with %q<t1name>'s Stats,You roll for %q<t1name>),job,%n Rolls,if(%q<private>,You Roll,%n rolls))]%b%q<formatted>[if(neq(%q<tn>,v(ROLL`INIT`TN)),%bat TN%q<tn>)][if(%q<def>,\,%bVs DV%q<def>)][if(%q<dif>,\,%bat Difficulty %q<dif>)][if(neq(words(setinter(%q<dbl>,v(ROLL`INIT`DBL))),words(%q<dbl>)),\,%bWith Double [itemize(sort(%q<dbl>),%b,and,\,)])][if(neq(%q<ag>,v(ROLL`INIT`AG)),\,%bWith %q<ag>-Again)][if(words(%q<re>),\,%bRe-Rolling [itemize(%q<re>,%b,and,\,)])][if(gt(%q<mul>,1),\,%b%q<mul> times)]: %q<totaldice> Total dice!%R[trimpenn(iter(lnum(1,%q<mul>),ansi(h,if(gt(%q<mul>,1),numth(%i0) Roll,Roll):)%b[u(FUN`GETREG,roll%i0,4)][if(setr(rerolls,r(roll%i0-rerolls)),%b[ansi(hx,|)] Re-Rolls:%b[iter(lnum(1,%q<rerolls>),u(FUN`GETREG,roll%i1-reroll%i0,4),%b,|)])][if(setr(agains,r(roll%i0-agrolls)),%R[trimpenn(iter(lnum(1,%q<agains>),ansi(h,if(gt(%q<mul>,1),%t)%q<ag>-Again Roll %i0:)%b[u(FUN`GETREG,roll%i1-agroll%i0,4)],%b,%r),%r)])]%R%TResulting in: [u(FUN`ROLLRESULT,add(%q<sux>,u(FUN`GETREG,roll%i0,6)),if(%q<def>,1,if(%q<dif>,2,0)),strfirstof(%q<def>,%q<dif>))],%b,%r),%r)]

&INC`ROLL u(srs)=th setq(results,u(FUN`RESFORMAT));@switch/inline t(%q<private>)=1,{@nspemit %#=%q<results>},0,{@nsremit %l=%q<results>};@nscemit/noisy u(cmo`roll)=if(%q<private>,\(PRIVATE\)%B)[if(%q<private>,edit(%q<results>,You Roll,%n Rolls),%q<results>)]

&INC`STROLL u(srs)=th setq(results,u(FUN`RESFORMAT,,%q<t1>));@switch/inline t(%q<public>)=0,{@nspemit %#=%q<results>},1,{@nsremit %l=%q<results>};@nscemit/noisy u(cmo`roll)=edit(%q<results>,You roll for,%n rolls for)

&CMD`+ROLLINIT u(srs)=$roll init:@assert words(setr(list,lvplayers(%l)))=@nspemit %#=announce(INIT) Nobody to roll init for!;th iter(%q<list>,setq(dex,firstof(getstat(%i0/D`ATTRIBUTES,DEXTERITY,BONUS),0),comp,firstof(getstat(%i0/D`ATTRIBUTES,COMPOSURE,BONUS),0),bonus,firstof(getstat(%i0/D`BONUS,initiative),0),roll,firstof(rand(1,10),0))[attrib_set(%i0/INITROLL,ansi(h,DEXTERITY\(%q<dex>\) + COMPOSURE\(%q<comp>\) + BONUS\(%q<bonus>\) + ROLL\(%q<roll>\) = )%B[ansi(hg,add(%q<dex>,%q<comp>,%q<bonus>,%q<roll>))])]);@nsremit %l=announce(INIT) %n called for an Initiative Roll!;th iter(sortkey(#lambda/stripansi(last(get(\%0/INITROLL))),%q<list>,n),nsremit(%l,ljust(left(name(%i0):,add(1,config(player_name_len))),add(1,config(player_name_len)))%B[get(%i0/INITROLL)]))