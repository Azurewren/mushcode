@@ DEPENDENCIES - CORE
@@ NOTE: This requires @dolist/inline!

@switch/inline isdbref(u(rdso))=0,{@tel create(Radio System Object <RDSO>)=config(master_room)}
&rdso u(coi)=locate(config(master_room),Radio System Object <RDSO>,TXxi)
@parent u(rdso)=u(coi)
@set u(rdso)=WIZARD !NO_COMMAND

@switch/inline isdbref(u(rddb))=0,{@switch/inline isdbref(u(rdso))=1,{@tel create(Radio Database <RDDB>)=u(rdso)}}
&rddb u(coi)=locate(u(rdso),Radio Database <RDDB>,TXxi)
@parent u(rddb)=u(coi)
@set u(rddb)=WIZARD
@power u(rddb)=many_attribs

&CMD`+RADIO u(rdso)=$^(?s)(?\:\+)?radio(?\:/(\S+))?(?\: +(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%1,setunion(get(u(rdso)/VAR`PLAYFLAGS),if(isadmin(%#),get(u(rdso)/VAR`ADMINFLAGS)),|,|),|,RADIO,switch,switch;@include u(rdso)/INC`[strfirstof(%q<switch>,MAIN)]=%2,%3
@set u(rdso)/CMD`+RADIO=regexp

&INC`MAIN u(rdso)=@switch/inline strlen(%0)=0,{@include u(rdso)/INC`LIST},{@include u(rdso)/INC`CHECKSLOT;@assert strlen(get(%#/D`RADIO`%0))=@nspemit %#=announce(RADIO) ERROR: That Slot has no Frequency set!;@assert get(%#/D`RADIO`%0`ON)=@nspemit %#=announce(RADIO) That Slot is turned off.;@include u(rdso)/INC`BROADCAST}

&INC`LIST u(rdso)=@nspemit %#=header(Your Radio Config)%R%B[ansi(hc,SLOT)][space(5)][ansi(hc,FREQ)][space(9)][ansi(hc,NAME)][space(18)][ansi(hc,ENC KEY)][space(11)][ansi(hc,STATUS)]%R[subheader()];@dolist/inline filterbool(#lambda/strlen(get(%#/\%0)),lattr(%#/D`RADIO`*))=@nspemit %#=%B%B[ljust(left(last(%i0,`),8),8)][ljust(get(%#/%i0),15)][ljust(left(u(u(rdso)/FUN`FREQNAME,%#,last(%i0,`)),20),20)][ljust(left(default(%#/%i0`KEY,--Unencrypted--),20),20)][ljust(if(get(%#/%i0`ON),ansi(hg,On),ansi(hr,Off)),10)];@nspemit %#=header()

&INC`CHECKSLOT u(rdso)=@assert strlen(%0)=@nspemit %#=announce(RADIO) ERROR: No Slot entered to Set.;@assert regmatchi(%0,\[A-Z\])=@nspemit %#=announce(RADIO) ERROR: Slots must be addressed by single Alphabetical characters A-Z (case insensitive.)

&INC`FREQ u(rdso)=@include u(rdso)/INC`CHECKSLOT;@assert strlen(%1)=@nspemit %#=announce(RADIO) ERROR: Frequency Field empty.;@assert regmatchi(%1,\[0-9\]+\\.\[0-9\]+)=@nspemit %#=announce(RADIO) ERROR: Frequencies must be in the form of (number).(number), example 105.32;&D`RADIO`%0 %#=%1;&D`RADIO`%0`ON %#=1;@nspemit %#=announce(RADIO) You tune Radio Slot [ucstr(%0)] to %1.

&INC`NAME u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline strlen(%1)=0,{@nspemit %#=announce(RADIO) Radio Frequency [u(u(rdso)/FUN`FREQNAME,%#,%0)]'s Name has been Cleared!;&D`RADIO`%0`NAME %#},{@nspemit %#=announce(RADIO) Radio Frequency [u(u(rdso)/FUN`FREQNAME,%#,%0)] is now known as: %1;&D`RADIO`%0`NAME %#=%1}

&INC`ENCRYPT u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline strlen(%1)=0,{@nspemit %#=announce(RADIO) Radio Frequency [u(u(rdso)/FUN`FREQNAME,%#,%0)]'s Encrypt Key has been Cleared!;&D`RADIO`%0`KEY %#},{@nspemit %#=announce(RADIO) Radio Frequency [u(u(rdso)/FUN`FREQNAME,%#,%0)]'s Encrypt Key is now: %1;&D`RADIO`%0`KEY %#=%1}

&INC`TOGGLE u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline default(%#/D`RADIO`%0`ON,1)=1,{@nspemit %#=announce(RADIO) You switch off [u(u(rdso)/FUN`FREQNAME,%#,%0)].;&D`RADIO`%0`ON %#=0},0,{@nspemit %#=announce(RADIO) You switch on [u(u(rdso)/FUN`FREQNAME,%#,%0)].;&D`RADIO`%0`ON %#=1}

&INC`WIPE u(rdso)=@include u(rdso)/INC`CHECKSLOT;@include u(ccs)/INC`VERIFY={WARNING: This will clean all data from Radio Slot %0. This action cannot be undone. Type the same command again within ten seconds to verify.},RADIO WIPE %0;@wipe %#/D`RADIO`%0;@nspemit %#=announce(RADIO) Radio Slot %0 wiped!

&INC`BROADCAST u(rdso)=th setq(freq,get(%#/D`RADIO`%0));@dolist/inline filterbool(#lambda/default(before(\%0,-)/D`RADIO`[after(\%0,-)]`ON,1),iter(lsearch(all,eplayer,\[strlen(first(grepi(##,D`RADIO`*,%q<freq>)))\]),%i0-[last(first(grepi(%i0,D`RADIO`*,get(%i0/D`RADIO`%0))),`)]))=@nspemit before(%i0,-)=color(before(%i0,-),-<,RADIO`1,hr)[color(before(%i0,-),RADIO: [u(u(rdso)/FUN`FREQNAME,before(%i0,-),after(%i0,-))],RADIO`2,hw)][color(before(%i0,-),>-,RADIO`1,hr)]%B[speak(&[color(before(%i0,-),strfirstof(get(%#/D`RADIO`%0`ALIAS),name(%#)),RADIO`NAME,n)],decrypt(encrypt(%1,get(%#/D`RADIO`%0`KEY)),get(before(%i0,-)/D`RADIO`[after(%i0,-)]`KEY)),color(before(%i0,-),says\,,RADIO`SAYS,n),#lambda/color(before(%i0,-),"\%0",RADIO`SPEECH,n))];@include u(rdso)/INC`LOGRADIO=%#,%q<freq>,%1,get(%#/D`RADIO`%0`KEY),get(%#/D`RADIO`%0`ALIAS)

&INC`LOGRADIO u(rdso)=@switch/inline gt(setr(slot,first(filterbool(#lambda/isint(\%0),grepi(u(rddb),*,%1)))),0)=0,{&[setr(slot,nextslot(u(rddb),))] u(rddb)=%1};&[setr(newlog,%q<slot>`[nextslot(u(rddb),%q<slot>)])] u(rddb)=%0;&%q<newlog>`ON u(rddb)=secs();&%q<newlog>`TEXT u(rddb)=%2;&%q<newlog>`KEY u(rddb)=%3;&%q<newlog>`ALIAS u(rddb)=%4

&INC`ALLFREQ u(rdso)=@assert setr(freqs,iter(filterbool(#lambda/isint(\%0),lattr(u(rddb)/*)),get(u(rddb)/%i0)))=@nspemit %#=announce(RADIO) No Freqs are in use.;@nspemit %#=header(Frequencies in Use)%R[ansi(hc,FREQ)][space(7)][ansi(hc,PLAYERS)][space(34)][ansi(hc,ENC KEYS)]%R[subheader()];@dolist/inline %q<freqs>=@nspemit %#=align(10 40 20,%i0,itemize(iter(filterbool(#lambda/strlen(grepi(\%0,D`RADIO`*,%i0)),lsearch(all,type,player)),name(%i0)\([if(get(%i0/[grepi(%i0,D`RADIO`*,%i1)]`ON),On,Off)]\),%b,|),|,and,\,),itemize(setunion(filterbool(#lambda/strlen(\%0),iter(lattr(u(rddb)/[first(filterbool(#lambda/isint(\%0),grepi(u(rddb),*,%i0)))]`*),get(u(rddb)/%i0`KEY),%B,|),|,|),,|,|),|,and,\,));@nspemit %#=header()

&FUN`FREQNAME u(rdso)=switch(1,regmatchi(%1,\[0-9\]+\\.\[0-9\]+),u(u(rdso)/FUN`FREQNAME,%0,last(first(grepi(%0,D`RADIO`*,%1)),`)),regmatchi(%1,\[A-Z\]),default(%0/D`RADIO`%1`NAME,%1),%1)

&INC`RECALL u(rdso)=@include u(rdso)/INC`CHECKSLOT;@assert strlen(get(%#/D`RADIO`%0))=@nspemit %#=announce(RADIO) ERROR: That Radio Slot has no Frequency set.;@assert gt(setr(slot,first(filterbool(#lambda/isint(\%0),grepi(u(rddb),*,get(%#/D`RADIO`%0))))),0)=@nspemit %#=announce(RADIO) Nothing has been Logged.;@assert words(setr(list,lattr(u(rddb)/%q<slot>`*)))=@nspemit %#=announce(RADIO) Nothing to Recall.;@switch/inline %1=0,{th setq(max,ALL)},{@switch/inline strlen(%1)=0,{th setq(max,0)},{@assert and(gt(%1,-1),isint(setr(max,%1)))=@nspemit %#=announce(ERROR) Line Recall must be an integer 0 or greater.}};@nspemit %#=header(Frequency: [get(%#/D`RADIO`%0)] - Showing [switch(%q<max>,ALL,ALL,0,15,%q<MAX>)] Lines);@dolist/inline switch(%q<max>,ALL,%q<list>,0,elements(%q<list>,lnum(1,15)),elements(%q<list>,lnum(1,%q<max>)))=@nspemit %#=(On [convsecs(get(u(rddb)/%i0`ON))])%B[color(%#,-<,RADIO`1,hr)][color(%#,RADIO: [u(u(rdso)/FUN`FREQNAME,%#,%0)],RADIO`2,hw)][color(%#,>-,RADIO`1,hr)]%B[speak(&[color(%#,strfirstof(get(u(rddb)/%i0`ALIAS),name(get(u(rddb)/%i0))),RADIO`NAME,n)],decrypt(encrypt(get(u(rddb)/%i0`TEXT),get(u(rddb)/%i0`KEY)),get(%#/D`RADIO`%0`KEY)),color(%#,says\,,RADIO`SAYS,n),#lambda/color(%#,"\%0",RADIO`SPEECH,n))];@nspemit %#=header()

&VAR`PLAYFLAGS u(rdso)=SET|NAME|TOGGLE|FREQ|ENCRYPT|WIPE|RECALL
&VAR`ADMINFLAGS u(rdso)=ALLFREQ

&STARTUP u(rdso)=@trigger u(rdso)/TRG`CLEANLOGS

&TRG`CLEANLOGS u(rdso)=@dolist filterbool(#lambda/isint(\%0),lattr(u(rddb)/*))={@dolist filterbool(#lambda/lt(get(u(rddb)/\%0`ON),sub(secs(),mul(3600,v(VAR`TIMEOUT)))),setdiff(setr(attrs,lattr(u(rddb)/%i0`*)),elements(revwords(%q<attrs>),lnum(1,25))))=@wipe u(rddb)/%i0};@wait mul(60,v(VAR`CHECKTIMEMINUTES))=@trigger u(rdso)/TRG`CLEANLOGS

&VAR`CHECKTIMEMINUTES u(rdso)=20
&VAR`TIMEOUT u(rdso)=2

th attrib_set(u(cco)/VAR`CATEGORIES,setunion(get(u(cco)/VAR`CATEGORIES),RADIO,|,|))
&VAR`CATEGORIES`RADIO u(cco)=1|2|SAYS|NAME|SPEECH