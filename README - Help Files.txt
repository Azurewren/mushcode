             MOUVAR'S MUSHCODE SUITE - VERSION 1.0

1. INTRODUCTION
When you're hoping to start up a MUSH, it's more than a little daunting. You went to Game A, realized they had a pretty neat system for doing something crucially convenient, and wondered how, or where you could get it yourself. Maybe you stumbled around looking for a coder interested in your project, but were disappointed when none were to be found.

This pack is for you. It is the sincerest goal of the author that by using this MUSHcode suite nearly all the aspects of setting up and administrating a game will be child's play compared to starting off with a stock PennMUSH installation.

2. REQUIREMENTS
This MUSHcode suite requires PennMUSH version 1.8.5p4 or newer. It may work in earlier versions, but all @dolist/inlines will need to be replaced with @dolists. None of the code requires SQL.

MUSHcode knowledge is not required, but it definitely helps for doing anything fancy building off of this pack.

This code will NOT function in TinyMUSH or TinyMUX, and it's really not worth your time bothering trying to make it do so. An experienced coder may have some luck porting it to RhostMUSH (which shares many similarities with Penn) however.

3. FEATURES

	a. Infrastructure
	Code Indexing object for central management of code object DBREFs.
	Room, Thing, Player, and Exit Ancestor creating code and basic room layout.
	Custom Colors system for players to change how they see the game.
	Event Handler designed to locate any provided Event trigger on indexed object for future expansions.
	Centralized configuration object for keeping track of restricted and modified attributes and similar settings.
	Global Functions for many common tasks.
	
	b. Administration
	Character and Staff Administration for handling staff lists, players and their alts in accounts. Supports bitless staffers.
	Sitematch / IP logging and login security checker.
	Key / Lock system that simplifies PennMUSH's @lock system, designed to conveniently handle groups, factions, races, and similar setups.
	Channel Management system for simple creation and locking of @channels (integrates with Key / Lock system) and muzzling problem players, among other features.
	Job System inspired by Anomaly Jobs. Categorical organization of player or staff requests, supporting logging, commenting, approval, denying, and similar features.
	Help System that can be used for softcoded help menus, supports sub-menus and can be called many ways to access different help systems (staff help, news, help, etc.)
	Commands that simplify debugging and other common tasks.
	
	c. Player Conveniences
	Watch System for tracking when friends log on and off.
	Myrddin's BBS 4.0.6 Custom. Optimized for PennMUSH and integrates the Key / Lock system (see above.) Comes with a +bbnext that does not ignore board locks.
	Group System for small or medium player factions, supports rank structure, IC and OOC channels, and plenty of customization options.
	Pose Order Tracker (+pot) that stores poses for retrieval with a simple command. Supports privacy options and is easily reconfigured.
	Tel Code for helping players get around a grid. Easily setup and organized by districts/regions.
	Info Files, a shareable player notepad that players can use to track character data or other things, which may be published for other players to read and/or approved by admins for roleplay purposes (equipment lists, character backgrounds, etc.)
	Meet Code for teleporting straight to other players with a quick exchange.
	Who and Where code.
	A frequency-based Radio system that supports logging, recall, and encryption.

4. 


@@ ANCESTORS

+shelp/addmain Building/Room Features=Exits with an alias that consists of part of its name will have that part displayed in colored <>. For example, making an exit named North with the alias n will result in a <N>orth. The alias shortcut color is stored in the attribute VAR`ALIASCOLOR on the ancestor room. Setting one on a local room overrides it.%R%RExits sort and display alphabetically. They can have an 'ORDER' attribute that has a number in it which overrides this sorting based on the number, however if ANY Exit in the room has such an attribute then ALL must have it.

@@ CHANNEL MANAGEMENT OBJECT - CMO

+help/addmain General OOC/+channel=The +channel system is an addon for Penn's built-in @channel system.%R%R[ansi(h,+channel)]%RLists all visible channels and their statuses.%R%R[ansi(h,+channel/muzzle)]%RIf you have been Muzzled, shows your time remaining and on what channel.

+shelp/addmain Administration/+channel=[ansi(h,+channel/muzzle <name>/<channel>=<duration>)]%RMuzzled players cannot speak on a channel. Duration must be a format acceptable by stringsecs() - see [pueblize(help stringsecs(),help stringsecs())] - Example: 5h 30m or 10d 2h%R%R[ansi(h,+channel/unmuzzle <name>/<channel>)]%RRemoves a Muzzle early.%R%R[ansi(h,+channel/add <name>)]%RCreates a channel. Supports ANSI colors!%R%R[ansi(h,+channel/rename <oldname>=<newname>)]%RRenames a channel. Can change color of a channel without renaming it too.%R%R[ansi(h,+channel/lock <channel>=<list of keys>)] and [ansi(h,+channel/unlock <channel>)]%RSets the SEE, SPEAK, and JOIN @clocks of a Channel to use the +key System. See [pueblize(+shelp keys,+shelp +key)]

@@ CHARACTER ACCOUNTS OBJECT - CAO
@@ ACCOUNT

+shelp/addmain Characters/+account=The Account System tracks Players through the SQL database, tracking the status of their PCs. The system attempts to match newly created characters to existing accounts by comparing the IP address to existing login records, but it cannot do so if it is a new character or connecting from an IP address that has no account (or conflicting account information.)%R%R[ansi(h,+account)]%RThis lists all accounts. Beware: it can be very spammy.%R%R[ansi(h,+account/bind  <player>=<account>)]%RThis attempts to link <player> to <account.> <account> may be one of three things: the number of an existing account, the name of a PC with an existing account, or the word NEW (which will create a new account.)%R%R[ansi(h,+account/unbound)]%RThis will list all PCs not bound to an account.%R%R[ansi(h,+account/giveid <player>)]%RThis will give a player an ID if they are not in the database. Which shouldn't normally happen.%R%R[ansi(h,+account/all <account or player>)]%RThis should attempt to show all characters linked to the account that have ever been in the SQL database, using old records of names and the like. May not be accurate all the time.

+help/addmain General OOC/+account=The Account System links Player Characters together to track their status. The game attempts to intelligently assign newly created characters to existing accounts by comparing IP address records if it can, but if it cannot do so then an Administrator must set it manually.%R%R[ansi(h,+account)]%RThis will show you the status of your Player Account, if the character is a part of one.%R%R[ansi(h,+account/email <email>)]%RThis will set your email to <text.> Blank text will remove a set email. Email Addresses are used as contact information for emergency situations.%R%RUse the CODE category for +request to have an account setup for you! Be sure to list your alts in the text of the request, even if they aren't currently active.

+shelp/addmain Characters/Player Management=Characters can be created with the @pcreate command%R[ansi(h,@pcreate <name>=<password>)]%R%RWizards may change the passwords of players with the @newpass command%R[ansi(h,@newpass *<player>=<newpassword>)]%R%RBanning players is handled through the @sitelock command (help @sitelock)%R%RThe simplest way to ban a player is to just [ansi(h,lit(@sitelock/ban/player <name>))]%R%RDeleting characters (WARNING: DESTROYS ALL OBJECTS THEY OWN UNLESS THE OBJECT IS SET SAFE) requires @nuke%R[ansi(h,@nuke *<playername>)]%RRun @nuke this way twice to ensure it happens instantly instead of taking a few minutes.

@@ IP
+shelp/addmain Administration/+ip=[ansi(h,+ip <player>)]%R[ansi(h,+ip/guests <player>)]%R%RThis command shows the most recent login data for <player> and all players with matching IP addresses to that character. By default, it will exclude Guests, but the /guests switch will include them. The /ip switch will allow you to search by raw IP.

+help/addmain General OOC/+ip=[ansi(h,+ip)]%R%RThis command displays the most recent login data for you and any characters with IPs matching yours, excluding Guests. Spot a suspicions login attempt? Please report it to admin for investigation.

@@ APPROVAL
+help/addmain General OOC/+approve=[ansi(h,+approval)]%RThis will show your approval status - if you are approved or unapproved.

+shelp/addmain Characters/+approve=[ansi(h,+approve <name>)]%RThis will approve <name>%R%R[ansi(h,+unapprove <name>)]%RThis will unapprove <name>

@@ STAFF
+shelp/addmain Administration/+staff=Staff are characters able to use Admin commands.%R%RThe Game considers anyone whose dbref returns a 1 on the global function isadmin() to be staff for the purposes of running special softcode commands, accessing channels, etc. At the time of this writing, that would be anyone who has a WIZARD, ROYALTY, or JUDGE flag, or anyone added to the staff list (wizlist.)%R%RPennMUSH itself has FOUR tiers of Staff.%R%RThe [ansi(hr,GOD)] (#1) character, known as One by default, is a special WIZARD character (see below) that nobody can control (set attributes on, tell to run commands, override, etc) but itself. It is the ONLY character able to create player WIZARDS.%R%R[ansi(h,WIZARD)]s are those with the WIZARD flag (set by @set *<name>=WIZARD, on GOD - @set *<name>=!WIZARD to remove) with the power to control ([pueblize(help control,help control)]) any object in the game and use many restricted commands such as @shutdown and @hook and @config/set (only God may use /save). Wizards can see and manipulate virtually anything and everything. The WIZARD flag is dangerous and should not be handed out to anyone but the most trustworthy of staff members who truly need it and, perhaps more importantly, know how to use it.%R%R[ansi(hy,ROYALTY)] Flagged characters have similar power to WIZARDS, but they lack the ability to run dangerous commands like @shutdown or @hook to impact the game. They may not change anything owned by a wizard, so all code objects cannot be touched for instance. (viewed yes, changed no.)%R%RThe [ansi(hy,JUDGE)] Flag confers no special powers inherent to PennMUSH on its own, but the Softcode for this game recognizes it as Staff. This flag exists to be used this way.%R%RLastly, anyone who is on the Staff list can use Staff softcoded commands to edit characters, view sheets, see jobs, and etc.%R%R[ansi(h,+staff)]%RBy itself, lists staff. Identical to wizlist.%R%R[ansi(h,+staff/add <name>\[=<order>\])] and [ansi(h,+Staff/rem <name>)]%RAdds or Removes people from the Staff list. Note that this does NOT revoke WIZARD, ROYALTY, or JUDGE flags. An optional Order is a number in which the staff member will be listed (see below.)%R%R[ansi(h,+staff/order <name>=<order>)]%RChanges the order of a staffer on the list. The order list is low at the top, high at the bottom. Staffers with equal numbers will be sorted within that number by the number of their DBREFs instead.%R%RAliases for [ansi(h,+staff)] include [ansi(h,wizlist)], [ansi(h,+wizlist)], [ansi(h,staff)], [ansi(h,+admin)] and [ansi(h,admin)]

+help/addmain General OOC/+staff=[ansi(h,+staff)]%RShows all Staff and their status.%R%RAliases for [ansi(h,+staff)] include [ansi(h,wizlist)], [ansi(h,+wizlist)], [ansi(h,staff)], [ansi(h,+admin)] and [ansi(h,admin)]

@@ BUILDER
+shelp/addmain Building/+builder=Builder Characters are special characters used to enlarge the grid. They may use @dig, @open, @link, and similar commands freely. Builders are given the following powers (help powers):%R%Rbuilder - enables the @dig, @open, @link, and similar commands.%Rlink_anywhere, open_anywhere - allows builders to manage exit destinations and link them to the grid.%Rno_quota - Builders may create unlimited objects.%Rno_pay - Builders can create objects without needing the hardcoded CPU currency.%Rpick_dbref - Builders may recycle old DBREF numbers for new objects.%R%RBuilders CAN be, but are not automatically considered to be, Staff characters. A WIZARD has no need of this status however - they have most of these powers implicitly.%R%R[ansi(h,+builder)]%RLists all current Builder characters by DBREF, name, and granted powers.%R%R[ansi(h,+builder/add <name>)]%RPromotes a PC to Builder status.%R%R[ansi(h,+builder/rem <name>)]%RRevokes a Builder's priveleges.%R%RNote that rooms, exits, objects, and other things created by (owned by) a character are DESTROYED if that character is deleted. For this reason it is best to simply @newpass unused builders, or alternatively @chown their objects to a buildstaffer character or similar 'safe' location. @chowning can be done easily and conveniently using the following method from a WIZARD character meant to hold the code:%R%R[ansi(h,lit(@dolist lsearch(*buildername)=@chown/preserve %i0=me))]%RIf the player is suspected of shenanigans, use the following instead: [ansi(h,lit(@dolist lsearch(*buildername)={@chown %i0=me;@set %i0=!HALT}))]

@@ CODE OBJECT INDEX - COI
+shelp/addmain Administration/Softcode Readme=*** CODE INDEXING ***%RAll Code Objects are stored in the master room. (help master room)%R%RMost works off of the Code Object Indexer, or COI. This object uses the locate() function to find the other code objects. Almost all other code objects such as that handling accounts and the help system have it as a parent (help @parent) so they can reference and pull code from one another.%R%R*** GOD PLAYER ***%RThe #1 object (God) is also parented to the COI, and is responsible for searching every object referenced on the COI for attributes matching the GFN`* pattern. These are global functions which will always be added!%R%R*** ATTRIBUTE NAMING CONVENTIONS ***%RVAR - Variable. Often used for options like changing settings.%R%RPOT - used exclusively by the Pose Order Tracker to store poses and settings on rooms.%R%RFUN - local functions to be used with u() or similar.%R%RCMD - Softcoded command attributes.%R%RINC - Extensions of softcoded command used for doing most of the code legwork, grabbed using @include.%R%RTRG - Code sections meant to be used with @trigger. Most often these are for automated cleanups started by an object's STARTUP, or similar.%R%R*** EVENT HANDLER ***%RThe Event Handler (help event handler) hunts down all attribute leafs of that type of event and @triggers them, using the list of objects on the COI. For instance, it discovers the attribute PLAYER`CONNECT`WATCH on the Watch System Object <WSO> and triggers it, and the SOCKET`LOGINFAIL`IPLOG attribute on the Account System Object.%R%R*** DATA STORAGE ***%RAll code uses the D attribute - marked WIZARD and MORTAL_DARK - to store player data such as INFO files and stats.

@@ CUSTOM COLORS OBJECT - CCO
+help/addmain General OOC/+color=The Color System allows players to set their own custom colors that they see in place of defaults for many things.%R%R[ansi(h,+color \[<category>\[/<option>=<colorcode>\])]%RUsed as just +color, shows a full list of categories available to +color. Used as +color <category>/<option>=<colorcode>, sets a colorcode. Set a colorcode to NOTHING (example: +color Main/Header1=) to clear it and restore defaults.%R%R[ansi(h,+color/list <category>)]%RShows the current settings in a Category.%R%R[ansi(h,+color/defaults)]%RThis restores ALL default colors.%R%RThis command also responds to [ansi(h,color)] instead of [ansi(h,+color)]%R%RSee [pueblize(help ansi(),help ansi())] for information on color codes.%R%R[ansi(h,pueblize(colordemo,colordemo))] will list all colorname shortcuts.%R%RIn order to see Colors you must have the ANSI, COLOR, and ideally COLOR256 (also known as XTERM256) flags enabled on your character. Most, but not all clients support 256-bit colors. To set these flags if they are not already set:%R%R[pueblize(@set me=ANSI COLOR COLOR256,@set me=ANSI COLOR COLOR256)]%R%RTo use the color system in softcode, the relevant function is [ansi(h,lit(color()))]%RThe first argument must be the person it's pulling color from. The second argument is the text to color. The third argument is the CATEGORY`OPTION, and the fourth is the default color if no custom is found. An example: [ansi(h,lit(color(%#,Blargh,MAIN`HEADER1,hm)))]

@@ GROUP SYSTEM OBJECT -- GSO
+help/addmain General OOC/Groups=The Group System is used to provide a suite of tools to aide PC groups in organization and membership management. Each Group is self-contained, with separate settings, rank structures, and rosters, though a Group may be assigned to another as a 'Division.'%R%R[ansi(h,+groups)]%RThis will list all Groups in the game.%R%RIndividual Groups are used by using [ansi(h,+group <alias>)]. Nearly all Group Commands target the last group you sed [ansi(h,+group <alias>)] on so be aware of this!%R%RAs in the PennMUSH help files, anything contained in brackets \[\] is an optional part of the syntax, such as an argument. one does not type the brackets as part of the command!

+help/addsub Groups/Admin=[ansi(h,+gcreate <ALIAS>=<Name>)]%R%RThis command creates a new Group. Aliases must be unique.%R%R[ansi(h,+galias <newalias>)]%RChanges the Alias of a Group.%R%R[ansi(h,+grename <newname>)]%RRenames a Group.%R%R[ansi(h,+gdiv <alias>)]%RMakes a Group a Division of the targeted one.%R%R[ansi(h,+gundiv)]%RReturns a Group to standalone status.%R%ROnly those with WRITE Admin permissions can use these commands. Additionally, those with READ permissions are considered to be members of any group, able to enable the channels and use viewing commands as normal. Those with WRITE Permissions are able to administrate any Group completely as though they were a member. Additionally, they may use +gset and +gauth to set non-standard <types>. These show up in the set and auth displays as red words instead of white.

+help/addsub Groups/Rank=NOTE: Rank in this system works in reverse. Rank 0 is the highest and considered the Leader position, though a group may have multiple people of this Rank. Mathematically greater numbers are actually of LESSER rank, not greater. This is done so that a Group may define its hierarchy as deep as its management wishes.%R%R[ansi(h,+grank <player>=<target>)]%RUsed to change the rank of a member. You must pass the RANK Auth to use this command, and cannot promote others to your own Rank. Thus, while a Group may have multiple Rank 0s, Admin must set them.%R%R[ansi(h,+gauth \[<option>=<newvalue>\])]%R%RUsed without an argument, this displays all available authorization permission types and their current values. One must possess that rank or higher in order to pass the authorization check. Options showing -1 are restricted by admin policy.%R%RUsed with an argument, changes the option. One must pass the AUTH Authority to use this, and ranks cannot be set higher than your own. Changes can only be be made by one of equal or greater rank to the one to last make the change.

+help/addsub Groups/Channels=[ansi(h,+gicon)] or [ansi(h,+goocon)]%RThis will add you to the group's OOC or IC channel. Use [ansi(h,+gicoff)] and [ansi(h,+goocoff)] to leave it again.%R%R[ansi(h,+gooc <text>)] or [ansi(h,+gic <text>)]%RThis will broadcast to the channel.%R%R[ansi(h,+ggag \[<player>\])]%R%RThis Gags <player> from the Group's Channels. You must pass the GAG Authorization to use this command. A player may not Gag someone of equal or higher rank.%R%RUsed without an argument, displays who has been gagged.%R%R[ansi(h,+gungag <player>)]%RThis will ungag a player. Only those of equal or greater rank to the one who issued a gag can undo it.%R%R[ansi(h,=<alias> <text>)] is a shortcut for a group's OOC channels, while [ansi(h,-<alias> <text>)] reaches the IC channels. This ignores the management system, so you do not have to use +group <alias> to change to that one first. This is handy if you're in multiple groups or are managing divisions!

+help/addsub Groups/Titles=[ansi(h,+gooctitle \[<text or player>\]\[=<text>\])] or [ansi(h,+gictitle \[<text or player>\]\[=<text>\])]%R%RSets your own, or a Target's IC or OOC title to <text>.%R%RYou must pass the IC/OOCTITLEOTHER Auth to use it on others, and must pass IC/OOCTITLE to use it on yourself.%R%RICTITLES show in /who and prefix one's IC channel use, but OOC titles only show on the OOC channel.

+help/addsub Groups/Membership=[ansi(h,+group \[<name>\])]%RDisplays all members of the Group and their current status. With an argument, shows a specific group and switches commands to manage it instead if permissions allow.%R%R[ansi(h,+ginvite \[<player>\])]%R[ansi(h,+gunvinite \[<player>\])]%RUsed with an argument, extends or revokes an invitation for <player> to join the Group. Used without arguments, these will show all standing invites to join a Group.%R%R[ansi(h,+gjoin <name>)] or [ansi(h,+grefuse <name>)]%R is used by said player in response.%R%R[ansi(h,+ginvites)]%RDisplays all invitations extended to you.%R%ROne must pass the INV Auth to send or revoke Invitations.%R%R[ansi(h,+gleave)]%RLeaves the Group.%R%R[ansi(h,+gkick <player>)]%RRemoves <player> from the Group. You must pass the KICK Auth to use this. It may not be used on those of equal or higher Rank.

+help/addsub Groups/Options=[ansi(h,+gset \[<option>=<value>\])]%R%RUsed without an argument, displays the current Group's Options. Used with an argument, changes <option> to <value.> Most options are self explanatory. 0 means disabled, while 1 is enabled, although some options accept text or a number instead of a binary value. You must pass the SET Auth to use this.%R%RSRANK is Start Rank.%RIC and OOC enable or disable the Channels.%RCOLOR is a normal ansi code (see help ansi())%R%ROptions in Red are unique and can only be set or removed by admin.

+help/addsub Groups/Divisions=Divisions are sub-Groups. Codedly these work exactly the same as any other Group, save that they do not show up in the main +groups list but are instead shown when checking an individual group's details with +group.%R%RDivisions are used to further delineate and break up large groups into task forces, branches, departments, member nations, whatever the group's supposed to represent. A few important things to note are:%R%RAnyone who passes the DIV auth in a parent group at any point higher in the chain is considered to have Rank 0 in any child group regardless of the DIV auth levels of the lower groups.%R%RAnyone who passes the DIV auth is able to join and listen to channels as if they were a group member.

@@ INFO FILES OBJECT - IFO
+help/addmain General OOC/+info=The Info system allows Players to store notes about their character. These notes can be used for a number of things, such as tracking details of resources, backgrounds, cheat sheets, or other notes that might be several paragraphs in length.%R%RVIEWING INFOS:%R[ansi(h,+info \[<player>\])]%RThis will show you your own +info files or those of another, provided they are visible to you. Staff may view all files, published or not.%R%R[ansi(h,+info \[<player>/\]<file>)]%RThis will display the contents of a file.%R%R[ansi(h,+info/get \[<player>/\]<file>)]%RShows an unformatted text for easy editing of an +info file.%R%R[ansi(h,+info/published)]%RShows all players who have published Info files.%R%RMANAGING INFOS:%R[ansi(h,+info\[/set\] \[<player>/\]<file>=<contents>)]%RCreates a new file, or overwrites an existing one with new contents. Use /set if another player's name conflicts with the filename.%R%R[ansi(h,+info/delete \[<player>/\]<list|of|files>)]%RDeletes one or more files. Seperate each name with a pipe symbol!%R%R[ansi(h,+info/publish \[<player>/\]<list|of|files>)] or [ansi(h,+info/unpublish \[<player>/\]<list|of|files>)]%RUsed to publish or hide info files. Multiple files can be published at once by seperating their names with the pipe symbol.%R%R[ansi(h,+info/approve \[<player>/\]<list|of|files>)] or [ansi(h,+info/unapprove \[<player>/\]<list|of|files>)]%RApproves or unapproves files on a player. Only staff may use this. As with publish, it can be used to target multiple files if they are seperated by pipes.%R%ROTHER:%R[ansi(h,+info/categories)]%RDisplays a list of common or suggested filenames for the game. Using these names for the appropriate topics will make it easier on staff.%R%RInfo Files may not have more than 18 characters in their name, and they may not contain the Pipe symbol (|) or a slash (/). For everything but setting an info file, partial matches are acceptable - but it will key off of the first possible match. Be wary.

@@ JOB SYSTEM OBJECT - JSO
+help/addmain Commands/+job=+job is used to contact the Storytellers with things you need.%R%R[ansi(h,+job \[<category>\]\[=<#>\])]%RBy itself, shows all categories you may submit jobs to. Giving a Category name displays the latest page of Jobs for that Category. With a page number, shows that page instead. Pages are grouped by 30 jobs. Example usage: [ansi(h,+job XP=3)] would show the third page of your XP +jobs. Note: Categories can be partial matched - using X for XP, or B for BUGS, etc.%R%R[ansi(h,+job/all <category>\[=<page>\])]%RLike above, but shows finished jobs too.%R%R[ansi(h,+job <category>/<#>)]%RShows details of specific Job and all comments and vote information.%R%R[ansi(h,+job/add <category>/<text>)] or [ansi(h,+job/add <category>/<title>=<text>)]%RCreates a new +job to the Storytellers. It will display to them live that you have done so, and you will receive updates as they work on it.%R%R[ansi(h,+job/comment <category>/<#>=<text>)]%RAppends a comment to a job, used to add or revise new information to it. Warning: To prevent shenanigans, comments may never be edited or deleted in any fashion.%R%R[ansi(h,+job/vote <category>/<#>=<vote>)]%RPlayers may vote on any job they can see, aside from their own. This only occurs if a player is made handler of another person's job or a category. <vote> may be Yes, No, or Undecided.%R%R[ansi(h,+job/log <category>/<#>)]%RShows a log of events that happened to a Job.%R%R* Legend for +job display-%R* - Updates or changes made since you last checked the job.%RP - Job is pending.%RA - job was approved.%RD - job was denied.%RC - job was canceled.%R%RNote: Command can also be used with [ansi(h,++job)], [ansi(h,job)], or [ansi(h,+job)] interchangeably.

+shelp/addmain Administration/+job=Note: [ansi(h,+job)] also responds to [ansi(h,job)], [ansi(h,request)], and [ansi(h,+request)]%R%R[ansi(h,+job/approve <category>/<#>=<text>)]%R[ansi(h,+job/deny <category>/<#>=<text>)]%R[ansi(h,+job/cancel <category>/<#>=<text>)]%RApproves, Denies, or Cancels a Job for a given reason.%R%R[ansi(h,+job/claim <category>/\[<#>\]\[=<name>\])]%R[ansi(h,+job/unclaim <category>/\[<#>\]\[=<name>\])]%RAssigns or Unassigns a Handler to a job or category. Without a name, Assigns yourself. Non-staff assigned to a category or job may see it even if it is not theirs, comment, and vote on it. Adding to category lets them do this with everything on it.%R%R[ansi(h,+job/priority <category>\[/<#>\]=<#>)]%RChanges Category or Job's color priority. 1 - lowest, 4 - highest.%R%R[ansi(h,+job/revive <category>/<#>=<text>)]%RReturns a Job to the Pending status, essentially undoing Approve, Deny, or Cancel. Must give a reason.%R%R[ansi(h,+job/vote <category>/<#>=<yes/no/undecided>)]%RPlaces a vote on a Job.%R%RStaff may use all the same commands players do as well, but they see all jobs and can use their commands on jobs of any <#>.%R%R[ansi(h,+job/delete <category>/<#>)]%RDeletes a job. Permanently. Not necessary or ideal unless the Category has over 1500 of them.%R%R*** WIZARD ONLY ***%R[ansi(h,+job/catmake <text>)]%RCreates a new Category. It's set visible by default.%R%R[ansi(h,+job/catdelete <name>)]%RDeletes a category and ALL JOBS related to it. BAD, DO NOT TOUCH.%R%R[ansi(h,+job/catrename <text>=<text>)]%RRenames a Category.%R%R[ansi(h,+job/catvisible <category>=<bool>)]%RSets whether a category's visible to players or not. <bool> must be 1 (true) or 0 (false)

@@ KEY LOCK SYSTEM - KLS
+help/addmain General OOC/+key=The +key command is used to manage PC permissions for various IC and OOC purposes. It is used to enhance the hardcoded @lock system and make it manageable for everyday purposes.%R%R[ansi(h,+key \[<key>\])]%RThe Key command will list all Master Keys in the game and whether you posess one or not. If given a key to examine, it will show details about that key.%R%R[ansi(h,+key/give <name>=<key>)] and [ansi(h,+key/take <name>=<key>)]%RIf you have been given a Master Key by admin, gives a copy to another player or removes their copy.%R%R[ansi(h,+key/lock <target>\[/<locktype>\]=<list of key names>)] and [ansi(h,+key/unlock <target>\[/<locktype>\])]%RSets a Lock via @lock on <target> to use the specified Key types. See [pueblize(help locktypes,help locktypes)] for more information. If a <locktype> is not specified it will set a Basic lock. As an example: +key/lock Exit=WEREWOLF VAMPIRE MAGE would make the exit passable by anyone with a WEREWOLF, VAMPIRE, or MAGE key.

+shelp/addmain Administration/+key=Admin automatically are considered to possess all +keys.%R%R[ansi(h,+key/makemaster <keyname>)] and [ansi(h,+key/destroymaster <keyname>)]%RCreates or Destroys a new Master Key.%R%R[ansi(h,+key/giveauth <name>=<key>)] and [ansi(h,+key/remauth <name>=<key>)]%RGrants or revokes a player's authority to hand out a Key type.

@@ MEET CODE OBJECT - MCO
+help/addmain General OOC/Join and Summon=[ansi(h,join <name>)]%RSends a Join request to <name>, or if you have received a Summon request, travels to <name>.%R%R[ansi(h,summon <name>)]%RSends a Summon request to <name>, or if you have received a Join request, brings <name> to your location.

@@ POSE ORDER TRACKER - POT
+help/addmain General OOC/+pot=+pot, or [ansi(h,Po)]se [ansi(h,T)]racker, is a system that stores poses within the room for easy retrieval for review. Sometimes, poses are lost in spam or scroll, or a player enters late and needs to see what's going on, or was disconnected when someone else posed, and that's what this system's here to aid with. To use it:%R%R'[ansi(h,+pot)]' will show you the last (maximum, or 15 by default) poses in the room.%R%R'[ansi(h,+pot/brief)]' is like +pot, but shows only about one line of the pose.%R%R'[ansi(h,+pot/private <1/0>)]' Set to 0 (default) to make your poses public, or 1 to render them private. It also accepts Yes or No. Poses made while set private will be revealed if you go public!%R%R'[ansi(h,+pot/max <#>)]' To set your maximum shown poses. It accepts only whole, positive numbers!%R%R+pot only functions normally when one is in a room that has its IC attribute set to 1. It will also work in any player-created objects, provided their IC attribute is set to 1. To do this, &IC here=1 WHILE WITHIN THE OBJECT. Please note that Pot stores an arbitrarily massive amount of attributes under the &pot attribute tree, and the system will periodically clean them as long as it's set IC 1.

@@ TEL CODE OBJECT - TCO

+help/addmain General OOC/tel=The Tel System allows players and admin to easily navigate the grid.%R%R[ansi(h,tel \[<destination>\])]%RBy itself, lists all available destinations. Given a destination, sends you there. <destination> must be a dbref, such as #100.

+shelp/addmain Building/tel=[ansi(h,tel/add)] and [ansi(h,tel/del <destination>)]%RAdds and removes destinations to the tel list. Note that all destinations should have a &district attribute on that DBREF, used for sorting. It should match the category they appear in.%R%R[ansi(h,tel/lock)] and [ansi(h,tel/unlock <destination>)] admin lock destinations so that players cannot see or use them.

@@ WATCH SYSTEM OBJECT - WSO
+help/addmain General OOC/Watch=The Watch system alerts you as friends connect and disconnect.%R%R[ansi(h,+watch)]%RWill display all friends on your list and their status.%R%R[ansi(h,+watch/add <name>)] and [ansi(h,+watch/del <name>)]%RAdds and removes players to your friends list.