@@ COMMUNICATIONS - CHANNELS

+help/addmain Communications/Channels=PennMUSH has a rich built-in channel system. Anything said on a channel is received globally by every other connected player on the same channel. This game uses a softcoded add-on called +channel so some commands are hardcoded, others are softcoded. Hardcoded begin with @%R[ansi(hc,See Also:)] [pueblize(help @channel,help @channel)], [pueblize(help @chat,help @chat)]%R[ansi(hc,+Channel Aliases:)] chan, +chan, channel%R%R[ansi(hc,Managing Channels)]%R[align(5 72,,{[ansi(h,+channel)] - Show all visible channels.%R[ansi(h,+channel <channel>)] - Shows info about a channel.%R[ansi(h,@chan/on <channel>)] - Enable a channel. You can speak on it and will receive messages.%R[ansi(h,@chan/off <channel>)] - Disable a channel. You can't speak on it or hear it.%R[ansi(h,@chan/gag \[<channel>\])] - mute a channel. You won't hear messages. This resets on logoff. Leaving <channel> unspecified will mute ALL channels.%R[ansi(h,@chan/ungag \[<channel>\])] - Undoes a gag. Leaving <channel> unspecified unmutes all gagged channels.%R[ansi(h,@chan/who <name>)] - Show who's listening to a channel.%R[ansi(h,@chan/title <channel>=<title>)] - Puts a title before your name when using a channel. Set to nothing to clear it.%R[ansi(h,+channel/alias <channel>=<alias>)] - Sets your alias on <channel> for those that use it. Shows in place of name. Compatible with @chan/title})]%R%R[ansi(hc,Channel Messages)]%R[align(5 72,,{[ansi(h,+<name> <text>)] - speak on a channel. <name> supports partial matches! As an example: [ansi(h,+p Hi everyone!)] would send to the Public channel.%R[ansi(h,@chat <channel>=<message>)] - Alternate way to send messages to a channel.%R[ansi(h,@chan/recall <name>=<#>)] - Show a channel's recent messages. # is number of lines. If # is 0 you'll see ALL remembered lines - VERY SPAMMY!%R[ansi(h,+chan/recall <channel>)] - Shows messages on <channel> since your last logout.})]

+help/addsub Channels/Locks=The [ansi(hc,+clock)] command handles channel locks.%R[ansi(hc,See Also:)] [pueblize(+help +key,+help +key)], [pueblize(help @clock,help @clock)]%R[ansi(hc,Aliases:)] +chanlock, clock, chanlock%R%R[ansi(hc,Locktypes)]%RLocktypes are covered in [pueblize(help @clock,help @clock)] but for simplicity:%R[align(5 72,,{[ansi(h,SEE)] - Who can see the channel.%R[ansi(h,JOIN)] - Who can join the channel.%R[ansi(h,SPEAK)] - Who can speak on the channel.%R[ansi(h,HIDE)] - Who can hide from a channel's @chan/who.%R[ansi(h,MOD)] - Who can Moderate the channel.})]%R%R[ansi(hc,General Commands)]%R[align(5 72,,{[ansi(h,+clock)] - Shows locks for visible channels.})]%R%R[ansi(hc,Storyteller Commands)]%RThese commands may only be used by Storytellers or appointed channel moderators.%R[align(5 72,,{[ansi(h,+clock\[/<locktype>\] <channel>\[=<Key Types>\])] - Sets <channel>'s <locktype> to <Key Types> using the +key system. Setting to nothing unlocks.%RLocktype can be SEE, SPEAK, JOIN, HIDE, or MOD. Leaving <locktype> blank sets the SEE, SPEAK, and JOIN locks. Leaving <Key Types> blank unlocks the locktypes.})]

+help/addsub Channels/Moderators=[ansi(hc,See Also:)] [pueblize(help ansi(),help ansi())], [pueblize(help @channel admin,help @channel admin)]%R%R[ansi(hc,Moderator Commands)]%RThese commands may only used by Storytellers or appointed channel moderators.%R[align(5 72,,{[ansi(h,+channel/muzzle <player>/<channel>=<duration>)] - Restrict <player> from speaking on <channel> for <duration>. Duration uses stringsecs() ([pueblize(help stringsecs(),help stringsecs())]) - Example duration: 5h 30m or 10d 2h.%R[ansi(hw,+channel/muzzle)] - Show active Muzzles on channels you moderate.%R[ansi(h,+channel/unmuzzle <player>/<channel>)] - Releases a Muzzle before it's expired.})]%R%R[ansi(hc,Configuration Commands)]%RThese commands can only be used by Storytellers or appointed channel moderators.%R[align(5 72,,{[ansi(h,@chan/desc <channel>=<text>)] - Sets a channel's description.%R[ansi(h,+channel/config <channel>/<option>=<value>)] - Changes an option for a Channel. Blank values clear the option. Options include:})][align(10 67,,{[ansi(h,alias)] - Set to 1 means channels will use Aliases instead of names and require an /alias to be set to use it.})]

+shelp/addmain Communications/Channels=[ansi(hc,Storyteller Commands)]%RThese commands may only be used by Storytellers.%R[align(5 72,,{[ansi(h,+channel/add <name>)] - Creates a channel. Supports ANSI colors! Be sure to put ansi functions in brackets. Example: +channel/add \[ansi(hc,Example)\].%R[ansi(h,+channel/del <channel>)] - Deletes a channel.%R[ansi(h,+channel/rename <channel>=<newname>)] - Renames a channel. Change color by renaming to itself.})]

@@ COMMUNICATIONS - BBS

+help/addmain Communications/BBS=The BBS is a global, multi-threaded board with a rich set of features that grew from a rewrite of Myrddin's classical BBS. It shares almost identical command syntax and appearance.%R%R[ansi(hc,Reading Posts)]%R[align(5 72,,{[ansi(h,+bbread)] - Show all message boards.%R[ansi(h,+bbread <board>)] - Shows a board's messages. <board> can be its name (supports partial matches) or number.%R[ansi(h,+bbread <board>/<list>)] - Read a message. <list> is comma-seperated. Entries can be single numbers, number ranges (ie. 1-6), and u (for 'all unread'), in any combination or order - duplicates will not be shown.%R[ansi(h,+bbnext)] - shows first available unread message.%R[ansi(h,+bbnew)] - Same as +bbnext.%R[ansi(h,+bbcatchup <board>)] - Mark all messages on a board read. +bbcatchup ALL sets ALL boards 'read.'%R[ansi(h,+bbscan)] - Lists unread messages.})]%R%R[ansi(hc,Writing Posts)]%R[align(5 72,,{[ansi(h,+bbpost <board>/<title>)] - Begins writing a post.%R[ansi(h,+bbwrite <text>)] - Writes to post in progress. [ansi(h,+bb <text>)] also works.%R[ansi(h,+bbproof)] - Show post in progress.%R[ansi(h,+bbedit <type>=<search>/<replace>)] - Edits post in progress. <type> must be TEXT or TITLE. Any text matching <search> will be replaced with <replace>.%R[ansi(h,+bbtoss)] - Erases a post in progress.%R[ansi(h,+bbpost)] - Submits finalized post.%R[ansi(h,+bbpost <board>/<title>=<text>)] - Quick posts to a board.%R[ansi(h,+bbedit <board>/<#>=<search>/<replace>)] - Edits a post on the board. Must be original poster or staff.%R[ansi(h,+bbmove <board>/<#>=<board>)] - Relocates a post. Must be original poster or staff.%R[ansi(h,+bbremove <board>/<list>)] - Removes a list of posts. <list> works like with +bbread. Must be original poster or staff.})]%R%R[ansi(hc,Board Membership)]%R[align(5 72,,{[ansi(h,+bblist)] - Shows all visible boards.%R[ansi(h,+bbleave <board>)] - Leave a board. You won't hear notices from it.%R[ansi(h,+bbjoin <board>)] - Re-join a board you've left.})]%R%R[ansi(hc,Misc)]%R[align(5 72,,{[ansi(h,+bbsearch <board>=<player>)] - Search for posts by a specific person.})]

+help/addsub BBS/Timeouts=The BBS supports timeouts by global scale, board scale, and individual post scale.%R%R[ansi(hc,Duration Entries)]%R[align(5 72,,{Anything that requires a <duration> lets you use a stringsecs compatible ([pueblize(help stringsecs,help stringsecs)]) entry. Example: 7w 5m (for 7 weeks, 5 minutes) or 30d (30 days).})]%R%R[ansi(hc,Global Timeouts)]%RThese commands are staff only.%R[align(5 72,,{[ansi(h,+bbconfig autotimeout=<boolean>)] - If set 0, timeouts are not processed. If set 1, they are.%R[ansi(h,+bbconfig interval=<duration>)] - How often timeouts are checked for removal. Recommended: 1d or 12h%R[ansi(h,+bbconfig timeout=<duration>)] - Default timeout of all boards if they aren't set individually.})]%R%R[ansi(hc,Board Timeouts)]%RThese commands are staff only.%R[align(5 72,,{[ansi(h,+bbconfig <board>/timeout=<duration>)] - Default timeout for posts on <board>. Set 0 for no timeout. Set null to use global default.})]%R%R[ansi(hc,Post Timeouts)]%R[align(5 72,,{[ansi(h,+bbtimeout <board>/<list>=<duration>)] - Change timeout for a list of posts. Players can only change for their own posts, and only less than board's timeout. Admin may change any post's timeout, and set a post static by setting it to 0.})]

+shelp/addmain Communications/BBS=These commands are staff only.%R%R[ansi(hc,Managing Boards)]%R[align(5 72,,{[ansi(h,+bbnewgroup <name>)] - Creates a new board.%R[ansi(h,+bbcleargroup <board>)] - Deletes a board and all posts.%R[ansi(h,+bborder <new order>)] - Reorders board display order. Must use all board numbers in new order. Example: If you had five boards, and wanted to make the final board the first, you'd use +bborder 5 1 2 3 4%R[ansi(h,+bbconfig)] - Shows values of all Global Config parameters.%R[ansi(h,+bbconfig <parameter>=<value>)] - Set <parameter> to value.%R%R[ansi(h,+bbconfig <board>/<parameter>=<value>)] - Sets a board's <option> to <value>. Entering no <value> clears the option. Available Options:})]%R[align(10 67,,{[ansi(h,anonymous)] - Set to <name> makes all posts appear to be from <name> as long as it's set. Admin still see real poster.%R[ansi(h,timeout)] - See [pueblize(+help BBS/Timeouts,+help BBS/Timeouts)]})]%R%R[ansi(hc,Importing from Myrddin)]%RWIZARD ONLY! These commands could seriously damage the boards if misused or problems occur. It's recommended you make a backup of the game before using these! These commands were designed and tested solely for Myrddin's BBS version 4.0.6 with the yearly patch from MUSHcode.com. Any mods to how posts are STORED (but not displayed) could cause this to fail. You're on your own with these commands.%R%R[align(5 72,,{[ansi(h,+bbconvert <board>=<DBREF>)] - Converts a single old Board object's messages and reposts them in order on <board>.%R[ansi(h,+bbimport <bbpocket>)] - Converts an entire Myrddin's BBS. Boards are created in order and added to existing, all posts converted. Note that board locks and settings are NOT converted in the process, and you might end up with boards of the same name when it's done depending on how you started.})]

+shelp/addsub BBS/Locks=BBS boards can be locked so that only certain people may see or post to them. A board set for only ADMIN to write but anyone may read could serve as public announcements. A board set to only one group able to WRITE and READ is a private board. The BBS locks rely on the Key Types made with +key! Only Admin may use these commands!%R[ansi(hc,See Also:)] [pueblize(+help +key,+help +key)]%R%R[ansi(hc,Locktypes)]%R[align(5 72,,{[ansi(h,write)] - Controls who may post to a board.%R[ansi(h,read)] - Controls who can see a board and read its posts. Boards you cannot see will not be displayed on +bbread!})]%R%R[ansi(hc,Managing BBLocks)]%R[align(5 72,,{[ansi(h,+bblock <board>/<locktype>=<Key Types>)] - Locks Board. <lock> can be READ or WRITE. Examples: +bblock 4/WRITE=ADMIN%R[ansi(h,+bbunlock <board>/<locktype>)] - Unlocks a board.})]


@@ COMMUNICATIONS - @MAIL
+help/addmain Communications/@mail=@mail invokes PennMUSH's hardcoded mail system. It's kind of like email but far simpler.%R[ansi(hc,See Also:)] [pueblize(help @mail,help @mail)]%R%R[ansi(hc,Reading Mail)]%R[align(5 72,,{[ansi(h,@mail)] - list your Inbox.%R[ansi(h,@mail <#>)] - Show a message.})]%R%R[ansi(hc,Sending Mail)]%R[align(5 72,,{[ansi(h,@mail <recipient>=<subject>/<message>)] - Sends <recipient> a message.%R[ansi(h,@mail/fwd <#>=<recipient>)] - Forward a message to <recipient>})]%R%R[ansi(hc,Deleting Mail)]%R[align(5 72,,{[ansi(h,@mail/clear <#>)] - Marks a message for deletion. Will be processed on disconnect.%R[ansi(h,@mail/unclear <#>)] - Unmarks a message mistakenly marked for deletion.%R[ansi(h,@mail/purge)] - Force delection of cleared mail NOW instead of at logout.})]%R%RPennMUSH supports a great many features with its @mail system, such as sending to many recipients simultaneously or mass-reading/deleting many messages at once. Check its related hardcoded helpfile at [pueblize(ansi(h,help @mail),help @mail)] for more information!

@@ COMMUNICATIONS - +RADIO
+help/addmain Communications/+radio=The Radio System is a customizable series of soft-channels meant to represent in-character radio frequencies, IC chat rooms, and other venues of instant communication.%R%R[ansi(hc,Radio Concepts)]%R[align(5 72,,{[ansi(h,slots)] - Each player has 24 Radio slots: one for each letter of the alphabet. A Slot can be linked to a frequency, encrypted with a shared key, and used like a Channel.%R[ansi(h,encryption keys)] - An encryption key is a word or short phrase used to encode and decode radio messages. They are case-sensitive and must match on both ends if set at all!%R[ansi(h,alias)] - An ALIAS is an alternate name you will appear as on a channel. Staff will also see the real sender. Don't abuse this (for instance, don't try to spoof other players.)%R[ansi(h,frequency)] - a frequency. Must be <number>.<number> format such as 99.5 or 101.1})]%R%R[ansi(hc,Basic Commands)]%R[align(5 72,,{[ansi(h,+radio)] - Display your configured channels.%R[ansi(h,+radio/freq <slot>=<frequency>)] - set a slot to a frequency.%R[ansi(h,+radio/name <slot>=<display name>)] - Assigns a name to a slot. This only affects how you see it. Useful for labeling!%R[ansi(h,+radio/alias <slot>=<new alias>)] - Sets your ALIAS on a Slot. Set to nothing to clear it.%R[ansi(h,+radio/toggle <slot>)] - Turns a slot on or off. Disabled slots can't send or receive messages.%R[ansi(h,+radio/wipe <slot>)] - Erases all of a slot's settings.})]%R%R[ansi(hc,Sending Messages)]%R[align(5 72,,{[ansi(h,+radio <slot>=<speech>)] - Send a message over <slot>'s Frequency.%R[ansi(h,.<slot> <speech>)] - Shortcut for sending messages. Inspired by hardcoded channels. Example: [ansi(h,.a hello!)]})]%R%R[ansi(hc,Misc)]%R[align(5 72,,{[ansi(h,+radio/recall <slot>=<#>)] - recalls <#> of lines from <slot>'s frequency. Encryption keys needed. If <#> is blank, defaults to 10 lines. If 0, shows ALL recorded messages.})]

+shelp/addmain Communications/+radio=[ansi(hc,Staff Commands)]%R[align(5 72,,{[ansi(h,+radio/allfreq)] - Analyzes logged messages to show all frequencies in use and who is using them. Also shows what encryption keys are in use for those frequencies. It cannot determine what Key is the 'legit' one though.})]

@@ COMMUNICATIONS - BASIC
+help/addmain Communications/Basic=These are basic communications methods that show only to the local room.%R%R[ansi(hc,Concepts)]%R[align(5 72,,{[ansi(h,speech)] - <speech> is always text. By default, it's considered. 'spoken.' Also note that Speech beginning with a " will always be interpreted as 'spoken,' speech beginning with a : is 'posed' and will show as '<yourname> <speech>', and speech beginning with a ; is 'semiposed' and will show as '<yourname><speech>'. use \%R to make a LINEBREAK and \%T to do a TAB/INDENT.%R[ansi(h,IC)] - In-character. Part of roleplay. The actions of your character.%R[ansi(h,OOC)] - Out of character. Not part of the game's story or actions of your character.})]%R%R[ansi(hc,Basic Commands)]%RThese are IC in most rooms!%R[align(5 72,,{[ansi(h,say <text>)] - Sends a message to the local room.%R[ansi(h,:<text>)] - Poses/emotes to the room.%R[ansi(h,;<text>)] - Semiposes to the room.%R[ansi(h,@emit <text>)] - Emits text to the room without a beginning name. Mostly used for roleplay.})]%R%R[ansi(hc,OOC Commands)]%RThese are ALWAYS considered Out-of-character communications.%R[align(5 72,,{[ansi(h,osay <speech>)] - Equivalent to say.%R[ansi(h,ooc <speech>)] - alias of osay%R[ansi(h,+ooc <speech>)] - Alias of Osay.%R[ansi(h,think <text>)] - Only you see this text. A personal 'echo.' Useful for testing formatting and colors, etc.})]%R%RInterested in coloring your text? Check out [pueblize(ansi(h,help ansi\(\)),help ansi\(\))]. You must enclose uses of ansi() in brackets, such as \[ansi()\]. It's also helpful to enclose your actual text in curly braces \{\} if you're going to include commas in it. An example: \[ansi(hr,\{behold, this text is red\})\] results in [ansi(hr,{behold, this text is red})]%R%RLooking for more advanced formatting tricks? You might be interested in [pueblize(ansi(h,help center()),help center())], [pueblize(ansi(h,help ljust()),help ljust())], [pueblize(ansi(h,help rjust()),help rjust())], [pueblize(ansi(h,help space()),help space())], and [pueblize(ansi(h,help repeat()),help repeat())]

@@ COMMUNICATIONS - PAGE
+help/addmain Communications/Page=Page is Penn's built-in private message system.%R[ansi(hc,See Also:)] [pueblize(help page,help page)]%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,page)] - Show who you last paged.%R[ansi(h,page <recipients>=<speech>)] - Sends a message to <recipients.> Recipients is a space-seperated list of names. Enclose multi-word names in quotations such as "Firstname Lastname".%R[ansi(h,page <speech>)] - Sends a message to the last people you paged. Note that if you include a = it will consider everything before it to be <recipients> like the above command, so you can't use = with this style of paging.})]

@@ COMMUNICATIONS - +JOB
+help/addmain Communications/+job=+job is used to contact the Storytellers, similar to trouble tickets.%R[ansi(hc,Aliases:)] job, request, +request%R%R[ansi(hc,Basic Commands)]%R[align(5 72,,{[ansi(h,+job)] - Shows all Job Categories and their statistics.%R[ansi(h,+job <category>)] - Shows all your pending jobs for <Category>.%R[ansi(h,+job/all <category>)] - Shows all your jobs, even finished ones.%R[ansi(h,+job\[/all\] <category>=<page>)] - Shows a specific page, works with /all.%R[ansi(h,+job <category>/<#>)] - Display's a job, showing comments, votes, etc.%R[ansi(h,+job/add <category>/<text>)] - Creates a new job in <category>.%R[ansi(h,+job/add <category>/<title>=<text>)] - Creates a new job but uses a custom title.%R[ansi(h,+job/comment <category>/<#>=<text>)] - Appends a comment to a job. These can't be edited or deleted for security purposes.%R[ansi(h,+job/log <category>/<#>)] - Show events that happened to a job.})]%R%R[ansi(hc,Handler Commands)]%RShould you be appointed Handler to a job (or whole category):%R[align(5 72,,{[ansi(h,+job <category>)] - Shows your jobs and any you handle. If you handle the category, shows them all.%R[ansi(h,+job <category>/<#>)] - You can check any jobs you handle.%R[ansi(h,+job/vote <category>/<#>=<vote>)] - Vote on a job. <vote> can be Yes, No, or Undecided. Cannot vote on your own jobs!})]%R%RLegend for +job display-%R* - Updates or changes made since you last checked the job.%RP - Job is pending.%RA - job was approved.%RD - job was denied.%RC - job was canceled.

+shelp/addmain Communications/+job=[ansi(hc,Finishing a Job)]%R[align(5 72,,{[ansi(h,+job/approve <category>/<#>=<text>)]%R[ansi(h,+job/deny <category>/<#>=<text>)]%R[ansi(h,+job/cancel <category>/<#>=<text>)] - Approves, Denies, or Cancels a Job for a given reason.})]%R%R[ansi(hc,Handlers)]%R[align(5 72,,{[ansi(h,+job/claim <category>)] - Assign yourself to handle a category.%R[ansi(h,+job/unclaim <category>)] - Remove your handler status from a category.%R[ansi(h,+job/claim <category>/<#>)] - Claims a Job. You're responsible for finishing it!%R[ansi(h,+job/unclaim <category>/<#>)] - Remove your handler status from a job.%R[ansi(h,+job/claim <category>=<player>)] - Assign someone else to handle a category.%R[ansi(h,+job/unclaim <Category>=<player>)] - Remove <player>'s handler status from a category.%R[ansi(h,+job/claim <category>/<#>=<player>)] - Assign <player> to handle a job.%R[ansi(h,+job/unclaim <category>/<#>=<player>)] - Remove <player>'s handler status from a job.})]%R%R[ansi(hc,Misc)]%R[align(5 72,,{[ansi(h,+job/revive <category>/<#>=<text>)] - Returns a Job to the Pending status, essentially undoing Approve, Deny, or Cancel. Must give a reason.%R[ansi(h,+job/delete <category>/<#>)]%RDeletes a job. Permanently. Not necessary or ideal unless the Category has over 1500 of them.})]%R%R[ansi(hc,Wizard Commands)]%R[align(5 72,,{[ansi(h,+job/catmake <text>)] - Creates a new Category. It's set visible by default.%R[ansi(h,+job/catdelete <name>)] - Deletes a category and ALL JOBS related to it. BAD, DO NOT TOUCH.%R[ansi(h,+job/catrename <text>=<text>)] - Renames a Category.%R[ansi(h,+job/catvisible <category>=<bool>)] - Sets whether a category's visible to players or not. <bool> must be 1 (true) or 0 (false)%R[ansi(h,+job/priority <category>=<number>)] - Sets the priority of a board. Whole numbers, matched by colors on the Job System Object.})]



@@ CHARACTER - +INFO
+help/addmain Character/+info=The Info system allows Players to store notes about their character. These notes can be used for a number of things, such as tracking details of resources, backgrounds, cheat sheets, or other notes that might be several paragraphs in length.%R%R[ansi(hc,Concepts)]%R[align(5 72,,{[ansi(h,infonames)] - Info files can't be very long, may not contain special characters, and are not case sensitive.%R[ansi(h,filelists)] - Some commands let you specify a list of files. Seperate their names with | symbols, such as file1|file2.%R[ansi(h,published)] - Published files are visible globally to all players.%R[ansi(h,approved)] - Approved files have been verified by staff and are read-only.})]%R%R[ansi(hc,Managing Infos)]%R[align(5 72,,{[ansi(h,+info <infoname>=<text>)] - Creates or replaces an info file.%R[ansi(h,+info/set <infoname>=<text>)] - Like above but forces infos to set if the infoname conflicts with a player's name.%R[ansi(h,+info/delete <filelist>)] - Deletes a file or series of files.%R[ansi(h,+info/publish <filelist>)] - Publishes one or many info files.%R[ansi(h,+info/unpublish <filelist>)] - Makes one or more files no longer published.})]%R%R[ansi(hc,Viewing Infos)]%R[align(5 72,,{[ansi(h,+info)] - Show all of your Info files.%R[ansi(h,+info <infoname>)] - Display an info's contents.%R[ansi(h,+info/published)] - Show all players with published info files.%R[ansi(h,+info <player>)] - Show a player's visible files.%R[ansi(h,+info <player>/<infoname>)] - Display a player's info contents.})]%R%R[ansi(hc,Misc)]%R[align(5 72,,{[ansi(h,+info/categories)] - Shows a list of common or staff-recommended Info file names for our game.})]

+shelp/addmain Character/+info=Staff have many additional abilities with +info. For starters, Staff may target ANY info command on ANY player by using <player>/<infoname> where a player would just use <infoname>, and can see every Info file - published or not. This means staff can create and edit info files, publish them, delete them, etc. In addition:%R%R[ansi(hc,Staff Commands)]%R[align(5 72,,{[ansi(h,+info/approve <player>/<filelist>)] - Approves one or more info files.%R[ansi(h,+info/unapprove <player>/<filelist>)] - Unapproves one or more info files.})]



@@ CHARACTER - +ACCOUNT
+help/addmain Character/+account=The account system tracks players (and their alts) and their current status in the game (unapproved, approved, builder, admin, etc.).%R%R[ansi(hc,Player Commands)]%R[align(5 72,,{[ansi(h,+account)] - Shows your account if you have one.%R[ansi(h,+account/email <email>)] - Sets your account's email.%R[ansi(h,+account/new)] - For new players. Enter this to start a new account on our game.%R[ansi(h,@password <old>=<new>)] - Change your password. If you forget your password, staff will send a new one to your <email> on request - or if your Guest IP matches your previous logins.%R[ansi(h,+ip)] - Shows your recent logins. Please report any suspicious login attempts to staff immediately!})]

+shelp/addmain Character/+account=[ansi(hc,Staff Commands)]%R[align(5 72,,{[ansi(h,+account)] - Shows all accounts in the system.%R[ansi(h,+account <#>)] - Shows a specific account. <#> can also be a player if they have an account.%R[ansi(h,+account/bind <player>=<#>)] - Binds <player> to an account, removing them from any other account they're in. <#> can be the name of an character (if they have an account), the word NEW (makes a new account), or the number of an existing account.%R[ansi(h,+account/unbind <player>)] - Removes a player from any account they're in.%R[ansi(h,+account/unbound)] - Displays all unbound characters. Some are best left that way.%R[ansi(h,@newpass *<name>=<newpassword>)] - Set a new password for <name>. Note the asterisk, this is necessary! This command is WIZARD only.%R[ansi(h,+ip <player>)] - Checks a player's logins and anyone with matching IPs.%R[ansi(h,+ip/guests <player>)] - Includes Guests in the IP lookup.%R[ansi(h,+ip/ip <ip>)] - Checks an IP for any matching players. Note that ::ffff: must be prepended to any IPv4 addresses if they're showing up in normal uses of +ip!})]

@@ CHARACTER - DESC
+help/addmain Character/+desc=Your character's DESCRIPTION (or @desc) is what others will see when they [ansi(h,look)] at you. These commands are used to manage your DESCRIPTION.%R%R[ansi(hc,See Also:)] [pueblize(help @desc,help @desc)], [pueblize(help look,help look)]%R%R[ansi(hc,Basic Commands)]%R[align(5 72,,{[ansi(h,@desc me=<text>)] - Sets your current description. Use \%R for linebreaks and \%T for indents.%R[ansi(h,&short-desc me=<text>)] - Sets your short-desc shown in the room display.})]%R%R[ansi(hc,Multidescer Commands)]%RThe Multidescer stores your Descriptions for later retrieval. Handy for maintaining a versatile 'wardrobe' of appearances!%R[ansi(hc,Aliases:)] desc%R[align(5 72,,{[ansi(h,+desc)] - Shows all your saved descriptions.%R[ansi(h,+desc <name>)] - Sets your desc to a stored one.%R[ansi(h,+desc/noisy <name>)] - Like above but emits to the room. Useful for dramatics!%R[ansi(h,+desc/save <name>)] - Saves your currently worn description to a <name>.%R[ansi(h,+desc/save <name>=<text>)] - Creates a new saved desc with specified text.%R[ansi(h,+desc/rename <name>=<newname>)] - Renames a saved desc.%R[ansi(h,+desc/view <name>)] - Shows you a saved desc.})]

@@ SHELP - CHARACTER - APPROVAL
+shelp/addmain Character/+approve=[ansi(h,+approve <name>)]%RThis will approve <name>%R%R[ansi(h,+unapprove <name>)]%RThis will unapprove <name>%R%RStaff are always considered 'approved' but may need to have the UNREGISTERED flag removed with @set if they intend to use @powers.

@@ SHELP - ADMINISTRATION
+shelp/addmain Administration/+staff=[ansi(hc,Concepts)]%RStaff are characters able to use Admin commands.%R%RAnyone whose dbref returns 1 via the isadmin() global function gains staff benefits in softcode - but not necessarily hardcode.%R%RPennMUSH has FOUR Staff tiers.%R%R1. The [ansi(hr,GOD)] (#1) character is a special WIZARD character that nothing can touch or command but itself. It's the only character able to use @config/save and several VERY dangerous features. Additionally, it's the only character able to set or remove the WIZARD flag on other Player Characters. Most game runners use #1's STARTUP to initialize game-specific settings and leave it sitting somewhere safe until needed.%R%R2. [ansi(h,WIZARD)] flagged characters can see and manipulate virtually anything in the game and use many dangerous commands such as @shutdown and @hook and @config/set. Wizards can see and manipulate virtually anything and everything. See [pueblize(help WIZARD,help WIZARD)]%R%R3. [ansi(hy,ROYALTY)] characters have are 'see but not touch' compared to WIZARDS - they enjoy several conveniences in getting around and solving problems but can't impact the game's structure or hardcode. See [pueblize(help ROYALTY,help ROYALTY)]%R%R4. The [ansi(hy,JUDGE)] Flag confers no special PennMUSH powers, but this game's softcode recognizes it as Staff.%R%RLastly, anyone who is on the Staff list can use Staff softcoded commands to edit characters, view sheets, see jobs, and etc. Look into powers ([pueblize(help @power,help @power)]) for giving them special powers without a ROY bit etc.%R%R[ansi(hc,Staff Commands)]%R[align(5 72,,{[ansi(h,+staff)] - By itself, lists staff. Identical to wizlist.%R[ansi(h,+staff/add <name>\[=<order>\])] and [ansi(h,+Staff/rem <name>)] - Adds or Removes people from the Staff list. Note that this does NOT grant or revoke WIZARD, ROYAL, JUDGE, @powers, etc. An optional Order is a number in which the staff member will be listed (see below.)%R[ansi(h,+staff/order <name>=<order>)] - Changes the display order of players on the Staff list. Lower numbers show first. Equal order numbers sort by DBREF.})]%R%R[ansi(hc,Staff List Display)]%R[align(5 72,,{[ansi(h,+staff/on)] - Go 'On duty'%R[ansi(h,+staff/off)] - Go 'off duty'%R[ansi(h,+staff/vac)] - Go 'on vacation.' Use again to come off it.%R[ansi(h,&position me=<text>)] - to set position.%R[ansi(h,&status me=<text>)] - sets Status display.})]

+shelp/addmain Administration/Player Management=WIZARDS have a great deal of hardcoded control over players for security and management. Most of these commands can only be used by them.%R%R[align(5 72,,{[ansi(h,@pcreate <name>=<password>)] - Creates a player.%R%R[ansi(h,@newpass *<name>=<newpassword>)] - Changes a password. the * is necessary for hardcoded command lookups.%R%R[ansi(h,@sitelock/ban/player <name>)] - Bans a player. Be very careful with this! Check [pueblize(ansi(h,help @sitelock),help @sitelock)] for more info.%R%R[ansi(h,@nuke *<name>)] - Deletes a character AND EVERYTHING THEY OWN, which by default includes EVERYTHING THEY MADE. use [ansi(h,@search *<name>)] to see what that would be before you @nuke! use [ansi(h,@chown <dbref>=me)] to save objects.})]

@@ COMMUNITY - +STAFF

+help/addmain Community/+staff=+staff lists the game's administrators and their current status.%R[ansi(hc,See Also:)] [pueblize(help JUDGE,help JUDGE)], [pueblize(help ROYALTY,help ROYALTY)], [pueblize(help WIZARD,help WIZARD)]%R[ansi(hc,Aliases:)] staff, wizlist, +wizlist, admin, +admin%R%R[align(5 72,,{[ansi(h,+staff)] - Show game's staff members.})]

@@ COMMUNITY - WHO
+help/addmain Community/+who=[ansi(hc,Aliases:)] who%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+who)] - Show all visible, connected players.})]

@@ COMMUNITY - WATCH
+help/addmain Community/Watch=The Watch system alerts you as friends connect and disconnect.%R[ansi(hc,Aliases:)] +friend, friend, watch, wf, +wf%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+watch)] - Will display all friends on your list and their status.%R[ansi(h,+watch/add <name>)] - Adds a player to your watch list.%R[ansi(h,+watch/del <name>)] - Removes a player from your watch list.})]

@@ SHELP - BUILDING
+shelp/addmain Building/+builder=Builder Characters are special characters used to enlarge the grid. They may use @dig, @open, @link, and similar commands freely.%R%R[ansi(hc,Builder Powers)]%RThese are granted to a builder by the +builder command:%R[align(5 72,,{[ansi(h,builder)] - enables the @dig, @open, @link, and similar commands.%R[ansi(h,link_anywhere\, open_anywhere)] - allows builders to manage exit destinations and link them to the grid.%R[ansi(h,no_quota)] - Builders may create unlimited objects.%R[ansi(h,no_pay)] - Builders can create objects without needing the hardcoded CPU currency.%R[ansi(h,pick_dbref)] - Builders may recycle old DBREF numbers for new objects.})]%R%RWIZARDS enjoy these powers automatically except for no_pay which is rarely needed except for code-heavy projects.%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+builder)] - Lists all current Builder characters by DBREF, name, granted powers, and number of objects owned.%R[ansi(h,+builder <player>)] - Shows everything <player> has made - whether they are or are not a Builder.%R[ansi(h,+builder/add <name>)] - Promotes a PC to Builder status.%R[ansi(h,+builder/rem <name>)] - Revokes a Builder's priveleges.})]%R%RNote that rooms, exits, objects, and other things created by (owned by) a character are DESTROYED if that character is deleted. For this reason it is best to simply @newpass unused builders, or alternatively @chown their objects to a buildstaffer character or similar 'safe' location. @chowning can be done easily and conveniently using the following method from a WIZARD character meant to hold the code:%R%R[ansi(h,lit(@dolist lsearch(*buildername)=@chown/preserve %i0=me))]%R%RIf the player is suspected of shenanigans, use the following instead:%R[ansi(h,lit(@dolist lsearch(*buildername)={@halt %i0;@chown %i0=me;@wipe %i0=STARTUP;@wipe %i0=ACONNECT;@set %i0=NO_COMMAND;@restart %i0}))]

+shelp/addmain Building/Room Features=Exits with an alias that consists of part of its name will have that part displayed in colored <>. For example, making an exit named North with the alias n will result in a <N>orth. The alias shortcut color is stored in the attribute VAR`ALIASCOLOR on the ancestor room. Setting one on a local room overrides it.%R%RExits sort and display alphabetically. They can have an 'ORDER' attribute that has a number in it which overrides this sorting based on the number, however if ANY Exit in the room has such an attribute then ALL must have it.

@@ COMMUNITY - GROUPS
+help/addmain Community/Groups=The Group System provides organization for players, usually for IC factions, etc. Think of it like an MMORPG Guild system. Staff are considered members of all groups and can use any group resource.%R%R[ansi(hc,Concepts)]%R[align(5 72,,{[ansi(h,alias)] - a 3-character ID code unique to a group for easy targeting.%R[ansi(h,rank)] - Rank 0 is a group leader, with all numerically higher numbers considered progressively lower in rank. This way the rank structure can extend as far as a group leader wishes. Many commands can be restricted by rank. Staff are considered Rank -1 for code purposes.%R[ansi(h,ictitles)] - IC titles represent ranks, aliases, etc, and display on the group's +gwho and IC radio.%R[ansi(h,ooctitles)] - OOC titles are more for casual purposes and humor compared to IC titles, and only show on the group's OOC channel.%R[ansi(h,managing)] - While you can be in many groups at once, group commands can only affect one at a time. The group you are MANAGING is which one they will affect.})]%R%R[ansi(hc,Basic Commands)]%R[align(5 72,,{[ansi(h,+groups)] - List all groups in the game.%R[ansi(h,+group <group>)] - Show info about a group. <group> can be its name or alias. This command changes which group you're MANAGING if you have permission to use the group's resources.})]%R%R[ansi(hc,Title Commands)]%RYou must meet the IC/OOCTITLE Permissions to use these on yourself, and IC/OOCTITLEOTHER to use them on others.%R[align(5 72,,{[ansi(h,+gooctitle <text>)] - Set your own OOC title.%R[ansi(h,+gooctitle <player>=<text>)] - Set someone else's OOC title if your rank exceeds them.%R[ansi(h,+gictitle <text>)] - Set your own OOC title.%R[ansi(h,+gictitle <player>=<text>)] - Set someone else's OOC title if your rank exceeds them.})]

+shelp/addmain Community/Groups=[ansi(hc,Staff Commands)]%R[align(5 72,,{[ansi(h,+gcreate <ALIAS>=<Name>)] - This command creates a new Group. Aliases must be unique.%R[ansi(h,+galias <newalias>)] - Changes the Alias of a Group.%R[ansi(h,+grename <newname>)] - Renames a Group.})]%R%RStaff may use +gset and +gperm to set non-standard <types>. These show up in the set and auth displays as red words instead of white. Staff may also restrict <types> beyond a Group Leader's level by setting them to -1

+help/addsub Groups/Membership=[ansi(hc,Adding Members)]%RYou must meet the ADD Permission to use this command.%R[align(5 72,,{[ansi(h,+gadd <player>)] - Adds player to a group, skipping the invite process.})]%R%R[ansi(hc,Inviting Members)]%RYou must meet the INV Permission to use these commands.%R[align(5 72,,{[ansi(h,+ginvite)] - Show all extended invitations.%R[ansi(h,+ginvite <player>)] - Send an invite.%R[ansi(h,+guninvite <player>)] - Revoke a pending invitation.})]%R%R[ansi(hc,Joining Groups)]%R[align(5 72,,{[ansi(h,+ginvites)] - Shows all groups who've invited you to join.%R[ansi(h,+gjoin <group>)] - Accepts an offered invite.%R[ansi(h,+grefuse <group>)] - Rejects an offered invite.})]%R%R[ansi(hc,Removing Members)]%R[align(5 72,,{[ansi(h,+gleave)] - Leaves a group.%R[ansi(h,+gkick <player>)] - Removes <player> from group. You must be superior in rank and meet the KICK Permissions.})]%R%R[ansi(hc,Rank)]%RYou must meet the PROMOTE Permission to use these commands.%R[align(5 72,,{[ansi(h,+grank <player>=<ranknum>)] - Reassigns a player's rank to anything below your own. Groups can have multiple rank 0s if set by admin.})]

+help/addsub Groups/Permissions=[ansi(hc,Permission Commands)]%R[align(5 72,,{[ansi(h,+gperm)] - shows the group's Permission settings. Options showing -1 are admin-restricted.%R[ansi(h,+gperm <option>=<value>)] - Changes the minimum rank required to use a group feature. You must pass the PERM Permission to use this. You cannot restrict features beyond your own rank, or unrestrict features set to above your rank.})]

+help/addsub Groups/Options=[ansi(hc,Option Commands)]%R[align(5 72,,{[ansi(h,+gset)] - Shows the group's configuration.%R[ansi(h,+gset <option>=<value>)] - Changes an option's value if you pass the SET Permission. Options displaying 0/1 are boolean switches (0 = off/false, 1 = On/True), while COLOR requires a valid color entry.})]

+help/addsub Groups/Channels=Groups have both IC and OOC softcoded channels that work much like normal @channels. They can be disabled with +gset%R%R[ansi(hc,Basic Commands)]%R[align(5 72,,{[ansi(h,+gicon)] - Joins the group's IC channel.%R[ansi(h,+gicoff)] - Leaves group's IC channel.%R[ansi(h,+goocon)] - Joins the group's OOC channel.%R[ansi(h,+goocoff)] - Leaves the group's OOC channel.})]%R%R[ansi(hc,Moderator Commands)]%RGagged players cannot use a group's channels. You must meet GAG Permissions to use this, and cannot A) Gag anyone not of lesser rank or B) Ungag anyone gagged by a member of higher rank.%R[align(5 72,,{[ansi(h,+ggag)] - Show all gagged players.%R[ansi(h,+ggag <player>)] - Gags a player from group channels.%R[ansi(h,+gungag <player>)] - Removes an existing gag.})]%R%R[ansi(hc,Sending Messages)]%R[align(5 72,,{[ansi(h,+gooc <speech>)] - speaks over the group's OOC channel.%R[ansi(h,+gic <speech>)] - Speaks over the group's OOC channel.%R[ansi(h,+gradio <speech>)] - Alternate for +gic%R%R[ansi(h,=<alias> <speech>)] - Shortcut for a specific group's OOC channels.%R[ansi(h,-<alias> <speech>)] - Shortcut for a group's IC channels.})]

+help/addsub Groups/Boards=Each Group has its own set of Boards that use much of the same conventions as the Global BBS. The commands and features are completely identical, with one difference: they all begin with [ansi(h,+gb)] instead of [ansi(h,+bb)]!%R[ansi(hc,See Also:)] [pueblize(+help BBS,+help BBS)]%R%R[ansi(hc,Managing Boards)]%RYou must meet the BBADMIN Permission to use these commands. Anyone meeting BBADMIN Permissions passes all group board locks and can use +gbremove, +gbedit, etc on any post.%R[align(5 72,,{[ansi(h,+gbnewgroup <name>)] - Creates a new board.%R[ansi(h,+gbcleargroup <board>)] - Deletes a board and all posts.%R[ansi(h,+gborder <new order>)] - Reorders board display order. Must use all board numbers in new order. Example: If you had five boards, and wanted to make the final board the first, you'd use +gborder 5 1 2 3 4%R[ansi(h,+gbconfig <board>/<parameter>=<value>)] - Sets a board's <option> to <value>. Entering no <value> clears the option. Available Options:})]%R[align(10 67,,{[ansi(h,anonymous)] - Set to <name> makes all posts appear to be from <name> as long as it's set. BBADMIN still see real poster.%R[ansi(h,timeout)] - See [pueblize(+help BBS/Timeouts,+help BBS/Timeouts)]})]%R%R[ansi(hc,Securing Boards)]%RGroup Boards can be locked so that only certain people of a certain rank or better may see or post to them.%R%R[ansi(hc,Locktypes)]%R[align(5 72,,{[ansi(h,write)] - Controls who may post to a board.%R[ansi(h,read)] - Controls who can see a board and read its posts. Boards you cannot see will not be displayed on +gbread!})]%R%R[ansi(hc,Managing BBLocks)]%R[align(5 72,,{[ansi(h,+gblock <board>/<locktype>=<rank>)] - Locks Board. Examples: +gblock 4/WRITE=1%R[ansi(h,+gbunlock <board>/<locktype>)] - Unlocks a board.})]


@@ CODE OBJECT INDEX - COI
+shelp/addmain Administration/Softcode Readme=*** CODE INDEXING ***%RAll Code Objects are stored in the master room. (help master room)%R%RMost works off of the Code Object Indexer, or COI. This object uses the locate() function to find the other code objects. Almost all other code objects such as that handling accounts and the help system have it as a parent (help @parent) so they can reference and pull code from one another.%R%R*** GOD PLAYER ***%RThe #1 object (God) is also parented to the COI, and is responsible for searching every object referenced on the COI for attributes matching the GFN`* pattern. These are global functions which will always be added!%R%R*** ATTRIBUTE NAMING CONVENTIONS ***%RVAR - Variable. Often used for options like changing settings.%R%RPOT - used exclusively by the Pose Order Tracker to store poses and settings on rooms.%R%RFUN - local functions to be used with u() or similar.%R%RCMD - Softcoded command attributes.%R%RINC - Extensions of softcoded command used for doing most of the code legwork, grabbed using @include.%R%RTRG - Code sections meant to be used with @trigger. Most often these are for automated cleanups started by an object's STARTUP, or similar.%R%R*** EVENT HANDLER ***%RThe Event Handler (help event handler) hunts down all attribute leafs of that type of event and @triggers them, using the list of objects on the COI. For instance, it discovers the attribute PLAYER`CONNECT`WATCH on the Watch System Object <WSO> and triggers it, and the SOCKET`LOGINFAIL`IPLOG attribute on the Account System Object.%R%R*** DATA STORAGE ***%RAll code uses the D attribute - marked WIZARD and MORTAL_DARK - to store player data such as INFO files and stats.




@@ NAVIGATION - MEET
+help/addmain Navigation/+meetme=The [ansi(h,+meetme)] system lets players warp across the game to directly join other players no matter where they are.%R[ansi(hc,Meetme Aliases:)] Meetme, +meetme%R[ansi(hc,Join aliases:)] Join, +join, mjoin, +mjoin%R[ansi(hc,Summon Aliases:)] Summon, +msummon, msummon%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+meetme <player>)] - Extends an invitation for another player to +join or +summon you.%R[ansi(h,+join <player>)] - Warp to a player.%R[ansi(h,+summon <player>)] - Bring <player> to you.%R%RStaff can skip the invite process and simply join or summon players. However they can still extend invites.})]

@@ NAVIGATION - +RECALL
+help/addmain Navigation/+recall=[ansi(hc,+recall)] simply returns you to the Player Nexus.

@@ POSE ORDER TRACKER - POT
+help/addmain General OOC/+pot=+pot, or [ansi(h,Po)]se [ansi(h,T)]racker, is a system that stores poses within the room for easy retrieval for review. Sometimes, poses are lost in spam or scroll, or a player enters late and needs to see what's going on, or was disconnected when someone else posed, and that's what this system's here to aid with. To use it:%R%R'[ansi(h,+pot)]' will show you the last (maximum, or 15 by default) poses in the room.%R%R'[ansi(h,+pot/brief)]' is like +pot, but shows only about one line of the pose.%R%R'[ansi(h,+pot/private <1/0>)]' Set to 0 (default) to make your poses public, or 1 to render them private. It also accepts Yes or No. Poses made while set private will be revealed if you go public!%R%R'[ansi(h,+pot/max <#>)]' To set your maximum shown poses. It accepts only whole, positive numbers!%R%R+pot only functions normally when one is in a room that has its IC attribute set to 1. It will also work in any player-created objects, provided their IC attribute is set to 1. To do this, &IC here=1 WHILE WITHIN THE OBJECT. Please note that Pot stores an arbitrarily massive amount of attributes under the &pot attribute tree, and the system will periodically clean them as long as it's set IC 1.

@@ TEL CODE OBJECT - TCO

+help/addmain Navigation/tel=The Tel System allows players and admin to easily navigate the grid.%R%R[ansi(h,tel \[<destination>\])]%RBy itself, lists all available destinations. Given a destination, sends you there. <destination> must be a dbref, such as #100.

+shelp/addmain Building/tel=[ansi(h,tel/add)] and [ansi(h,tel/del <destination>)]%RAdds and removes destinations to the tel list. Note that all destinations should have a &district attribute on that DBREF, used for sorting. It should match the category they appear in.%R%R[ansi(h,tel/lock)] and [ansi(h,tel/unlock <destination>)] admin lock destinations so that players cannot see or use them.


@@ TECHNICAL - +COLOR
+help/addmain Technical/+color=The [ansi(hc,+color)] system allows players to set their own private color scheme for many features on this game, such as the BBS display or custom colors that they see in place of defaults for many things.%R[ansi(hc,See Also:)] [pueblize(help ansi(),help ansi())]%R%R[ansi(hc,Manging Color Schemes)]%R[align(5 72,,{[ansi(h,+color)] - List all Available scheme categories.%R[ansi(h,+color <category>)] - List all options within a category.%R[ansi(h,+color <category>/<option>=<code>)] - Set a new color setting.%R[ansi(h,+color <category>/<option>=)] - Clear a color option, restoring defaults.%R[ansi(h,+color/list <category>)] - Show every option you've set in a category.})]%R%R[ansi(hc,Miscellaneous)]%R[align(5 72,,{[ansi(h,+color/mode)] - Link your color scheme to your account so it's shared by all alts. The scheme stored on an account is seperate from a character's so you'll need to change it seperately.%R[ansi(h,+colordemo)] - Shows all color names for 256-bit ANSI features.%R[ansi(h,+color/defaults)] - Restores all of your Color settings to default.})]%R%RIn order to see Colors you must have the ANSI, COLOR, and ideally COLOR256 (also known as XTERM256) flags enabled on your character. Most, but not all clients support 256-bit colors. To set these flags if they are not already set:%R%R[pueblize(@set me=ANSI COLOR COLOR256,@set me=ANSI COLOR COLOR256)]

@@ TECHNICAL - +KEY
+help/addmain Technical/+key=The [ansi(hc,+key)] System builds on PennMUSH's built-in @locks by creating 'Key Types' - simple names that can represent groups of people, or specified circumstances (such as races, approval status, group membership, etc) in which someone would pass a lock. Note: Staff 'pass' all Key Types and can do whatever they need with them (they are considered owners, handlers, etc.).%R[ansi(hc,See Also:)] [pueblize(help @lock,help @lock)], [pueblize(help locktypes,help locktypes)]%R%R[ansi(hc,Concepts)]%R[align(5 72,,{[ansi(h,Key Types)] - Key Types, referred to as <keys> in the help below, must be short words such as WIZARD or VAMPIRE or UNION. Each can have many options set to determine who can use and administrate it.%R[ansi(h,Owner)] - The OWNER of a Key Type has full control over its configuration.%R[ansi(h,Handler)] - Handlers are players approved to assign Holdership of a Key. They also pass the Key themselves.%R[ansi(h,Holders)] - Key Holders are individuals approved to 'pass' a key. This is in ADDITION to anyone who passes config options.})]%R%REach Key Type is actually three separate key names. When you +key/make Whatever, this creates the Whatever group, but when using +lock or similar commands you may also use WHATEVER-HANDLER and WHATEVER-OWNER for finer control. Note that anyone 'higher up' the authority check passes lower ones. OWNERS pass WHATEVER-HANDLER for instance. HANDLERS pass the basic WHATEVER.%R%R[ansi(hc,Viewing Key Types)]%R[align(5 72,,{[ansi(h,+key)] - List all Key Types.%R[ansi(h,+key <key>)] - Show info about a Key Type.})]%R%R[ansi(hc,Managing Key Types)]%R[align(5 72,,{[ansi(h,+key/make <name>)] - Creates a new Key Type owned by you.%R[ansi(h,+key/chown <key type>=<player>)] - Changes ownership of a Key Type. Owner only.%R[ansi(h,+key/auth <key>=<player>)] - Authorize a player to control key holders. Owner only.%R[ansi(h,+key/revoke <key>=<name>)] - Revokes authorization for controlling key holders. Owner only.%R[ansi(h,+key/add <key>=<name>)] - Add player to the Holders list. Handler/Owner only.%R[ansi(h,+key/rem <key>=<name>)] - Remove player from Holders list. Handler/Owner only.})]%R%R[ansi(hc,Locks)]%R[align(5 72,,{[ansi(h,+lock\[/<locktype>\] <target>=<list of key names>)] - Sets a Lock via @lock on <target> to use the specified Key types. See [pueblize(help locktypes,help locktypes)] for more information. User: locks are acceptable. If a <locktype> is not specified it will set a Basic lock. As an example: +lock Exit=WEREWOLF VAMPIRE MAGE would make the exit passable by anyone with a WEREWOLF, VAMPIRE, or MAGE key. Locks set to nothing are unlocked.})]

+help/addsub +key/Config=[ansi(hc,Configuring Keys)]%R[align(5 72,,{[ansi(h,+key/config <key>/<option>=<value>)] - Changes an option for a Key Type. Owner Only. Blank values clear the option. Options include:})]%R[align(10 67,,{[ansi(h,builder)] - Set to 1 means Builders always pass this lock.%R[ansi(h,approved)] - Set to 1 means you must be approved to MAYBE pass the lock (you must still pass one of the other checks.) Note: Admin and Builders are always considered 'approved for play'.%R[ansi(h,SPLAT)] - Set this to a list of Splat names (Exalted games only) and anyone who is one of them will pass the lock.%R[ansi(h,SPHERE)] - Set this to a list of Shere names (WoD games only) and anyone who is one of them will pass the lock.%R[ansi(h,GROUP)] - Set to a list of group names (entered by a space seperated list of group aliases) and anyone who's a member of any group and passes their LOCK auth will pass the lock.%R[ansi(h,KEY)] - Set to a list of other key names, anyone who passes one will pass the lock.})]

@@ TECHNICAL - Extra
+help/addmain Technical/Pueblo=Pueblo is an extra feature that lets Pueblo-compatible clients support special text features. Namely, clicking on text that shows up on your screen.%R%R[mudname()] is a Pueblo-enhanced world. While it is hardly necessary, it is nevertheless handy.%R%RPueblo-enabled clients are rare, however. For Windows, there is MUSHclient and the old original Pueblo.%R%RMUSHclient enables Pueblo by default. It can be turned off or otherwise modified by going to your client's configuration. In MUSHclient, that's Game > Configure > MXP/Pueblo (also accessible via ctrl+alt+U).%R%RWe highly recommend turning off local echo text and custom link colors as we use our own colors and otherwise all you will see is hyperlink blue.%R%RPueblo is detected and enabled upon connection to the MUSH. If you change whether it is on or off in your client, you will not see the results until you disconnect and reconnect that character.

+help/addmain Technical/Room Objects=Players are allowed - and encouraged - to create their own rooms. Most rooms on the game were created using @dig, making them full-fledged Rooms. @dig however, requires admin powers to use, because of how easily it can mess up the game's rooms if misused. However, there is another way to create what are essentially 'rooms.'%R%RPlayers may make Objects, place these in a room, give them a room description and allow others to enter them. They work in almost all ways like a true Room, save that they can be personalized, restricted, and so on. The following is a basic tutorial on how these work.%R%RCONCEPT EXPLANATION: Targeting objects and DBrefs. All things - rooms, players, exits, and so on - have a DBREF, or 'Database Reference.' It is like an ID code. When you use commands such as 'look <name>' PennMUSH checks to see if there is anything of that name in the same location as you. You could, in theory, also use look #800 to look at object #800. Such things are interchangeable for code purposes. Some words can be used to substitute things-- such as 'me' or 'here.' 'me' will always be YOUR dbref, which is why &short-desc me=<your short desc> works. here will refer to your current location. For the purposes of this tutorial, <target> will refer to the object's name or DBREF (if you are outside it or have it in your inventory) or using here (if you are inside it.)%R%R[ansi(h,@create <name>)] - this will make an object and place it in your inventory.%R[ansi(h,@nuke <name or DBREF>)] - this will destroy an object. Using just once will mark it for destruction, which can be undone with [ansi(h,@undestroy <name or dbref>)] if it is typed quickly. Using twice will annihilate object. This cannot be undone.%R%R[ansi(h,@set <target>=ENTER_OK)] - this will set a flag on the object that will allow other people to enter it. Using !ENTER_OK instead will remove the flag. (You may always enter your own objects.)%R%R[ansi(h,inventory)] - this will show what's in your inventory.%R[ansi(h,drop <target>)] - this will remove an object from your inventory and place it in the room.%R[ansi(h,get <target>)] - this will retrieve an object, if you have permission.%R[ansi(h,@lock/Basic <target>=me)] - this will prevent other players from picking up and walking off with your object.%R[ansi(h,\(\IMPORTANT: see +help +key for more advanced tricks!))]%R%R[ansi(h,@desc <target>=<text here>)] - the same as @describe'ing yourself. This will be what others see if they look at or are inside the object. You may also use @idesc for 'internal description,' in which case @desc will be seen by those looking at the object, rather than being both the external description and a room description.%R%R[ansi(h,&IC <target>=1)] - this will enable +pot to work in an object.%R%RYou may only have a few objects in existence at once. If you have lost track of them:%R[ansi(h,@search)] - this will show all objects you own and their DBREFs.%R[ansi(h,@tel <target>=me)] - this will retrieve an object.%R%RUsing them:%R[ansi(h,enter <target>)] - this will enter an object as though it were a room.%R[ansi(h,leave <target>)] - This will leave the object.

+help/addmain Technical/Connection Troubles=Every now and then, someone joins the game who might have problems staying connected. The following advice will help you if that problem matches this symptom: you type nothing for a minute or two, and the game stops sending you text-- when you type something, it suddenly says you're disconnected.%r%rThis is a problem typical of those behind NAT (Network Address Translation)... in other words, routers and large networks.%r%rTo solve this problem:%r%r[ansi(h,@set me=KEEPALIVE)]%rThis will tell the game to work harder to keep the connection to your character open. There is also the option of setting a timer in your client (check your client's Help files for instructions on doing so) that sends IDLE (all capitals! iDLE or idle will not work) to the game every minute or two.%r%rThis will only solve problems related to a lack of activity causing the hardware to invisibly disconnect you. There are some problems it cannot solve.

+help/addmain Technical/+charset=[ansi(hc,See Also:)] [pueblize(help chr(),help chr())]%R%R[ansi(h,Commands)]%R[align(5 72,,{[ansi(h,+charset)] - Display most special characters the game supports.})]

+help/addmain Technical/QUIT=[ansi(hc,Aliases:)] logoff, logout%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,QUIT)] - Disconnect safely from the game.})]%R%RDon't worry, PennMUSH saves are independent of safe logoffs. This just doesn't leave a ghost connection hanging.

@@ ROLEPLAYING - +flip
+help/addmain Roleplaying/+flip=[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+flip)] - Flip a coin!})]

@@ COMMUNICATIONS - +beep
+help/addmain Communications/+beep=[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+beep <player>)] - (Hopefully) makes a noise the other player can hear to try and get their attention. Use with moderation as this can be annoying - beeping someone more than once in a while could be considered harassment. You have been warned!%R%RNot all clients can make beeps though, and some players might disable it.})]

@@ ROLEPLAYING - +XP
+help/addmain Roleplaying/+xp=[ansi(hc,Aliases:)] xp%R%R[ansi(hc,Commands)]%R[align(5 72,,{[ansi(h,+xp)] - Show how much XP you have.%R[ansi(h,+xp/gained)] - Show details on your gained XP.%R[ansi(h,+xp/spent)] - Show details on your XP spends.})]

+shelp/addmain Character/+xp=[ansi(hc,Viewing Commands)]%R[align(5 72,,{[ansi(h,+xp <name>)] - check a player's XP totals.%R[ansi(h,+xp/gained <name>)] - Check a player's gained XP details.%R[ansi(h,+xp/spent <name>)] - Check a player's XP spend details.})]%R%R[ansi(hc,Managing Commands)]%R[align(5 72,,{[ansi(h,+xp/delgained <name>=<#>)] - Remove a player's gained entry.%R[ansi(h,+xp/delspent <name>=<#>)] - Remove a player's spent entry.%R[ansi(h,+xp/award <list of player>=<amount>/<reason>)] - Awards XP to one or more players. Reason is optional.%R[ansi(h,+xp/spend <list of players>=<amount>/<reason>)] - Spend one or more players' XP. Reason is optional.%R%RNOTE: 'Current XP' is defined as 'gained - spent' while 'Total' is 'total gained ever.' To 'refund' XP, don't award it - delete the relevant spend records then make new ones.})]