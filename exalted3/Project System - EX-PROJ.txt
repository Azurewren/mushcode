@switch/inline isdbref(u(ex-proj))=0,{@tel create(Project System <EX-PROJ>)=config(master_room)}
&ex-proj u(coi)=locate(config(master_room),Project System <EX-PROJ>,TXxi)
@parent u(ex-proj)=u(coi)
@set u(ex-proj)=WIZARD !NO_COMMAND

&CMD`+PROJECT u(ex-proj)=$^(?s)(?\:\+)?project(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%1,setunion(get(u(ex-proj)/VAR`PLAYFLAGS),if(isadmin(%#),get(u(ex-proj)/VAR`ADMINFLAGS)),|,|),|,CRM,switch,switch;@include u(ex-proj)/INC`[strfirstof(%q<switch>,MAIN)]=%2,%3
@set u(ex-proj)/CMD`+PROJECT=regexp

&VAR`PLAYFLAGS u(ex-proj)=NEW|DESC|OLD|LOG|FINISH|UNFINISH|GET|RENAME|DELETE|ADDPARTNER|REMPARTNER|DURATION|START|STOP|ADD|TIMEDIV|ROLL
&VAR`ADMINFLAGS u(ex-proj)=APPROVE|UNAPPROVE

&VAR`MSGHEAD u(ex-proj)=PROJECT
&RFN`MSGHEAD u(ex-proj)=msghead(v(VAR`MSGHEAD))
&RFN`HEADER u(ex-proj)=header(%0,,PROJECT`BORDER,PROJECT`BORDERDOT,PROJECT`BORDERTEXT,1)
&RFN`SEPARATOR u(ex-proj)=separator(%0,,PROJECT`BORDER,PROJECT`BORDERDOT,PROJECT`BORDERTEXT,1)
&RFN`SUBHEADER u(ex-proj)=subheader(%0,,PROJECT`BORDER,PROJECT`BORDERDOT,PROJECT`BORDERTEXT,1)

&DO`ANNOUNCE u(ex-proj)=@switch/inline t(strlen(%1))=1,{@include u(ccs)/INC`CMSG=%1,%#,v(VAR`MSGHEAD),u(cmo`staffrep)};@switch/inline strmatch(%#,%0)=0,{@include u(ccs)/INC`MSG=v(VAR`MSGHEAD),setdiff(%0,%# %:),%2;@include u(ccs)/INC`MSG=v(VAR`MSGHEAD),%#,%3},1,{@include u(ccs)/INC`MSG=v(VAR`MSGHEAD),%0,%2}
@@ %0 - player being modified. %1 - message for admin channel. %2 - message for player. %3 - message for admin.

&INC`TARGET u(ex-proj)=@switch/inline strmatch(%0,*/*)=1,{@include u(ccs)/INC`CHECKPC=before(%0,/),1,v(VAR`MSGHEAD);th setq(target,%q<t1>)},0,{th setq(target,%#)}

&INC`FILENAME u(ex-proj)=th setq(filename,if(strmatch(%0,*/*),after(%0,/),%0))

&FUN`LIST u(ex-proj)=sort(iter(if(or(isadmin(%1),strmatch(objid(%0),objid(%1))),lattr(%0/D`PROJECT`*),filterbool(#lambda/match(get(%0/\%0`PARTNERS),objid(%1)),lattr(%0/D`PROJECT`*))),last(%i0,`),%b,|),i,|,|)
&FUN`LIST`UNFINISHED u(ex-proj)=filterbool(#lambda/not(getstat(%0/D`PROJECT`\%0`FLAGS,Finished)),u(FUN`LIST,%0,%1),|,|)
&FUN`LIST`FINISHED u(ex-proj)=filterbool(#lambda/getstat(%0/D`PROJECT`\%0`FLAGS,Finished),u(FUN`LIST,%0,%1),|,|)

&INC`APPROVE u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`FILENAME;@assert strlen(%q<filename>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Info name empty.;@dolist/delimit | %q<filename>={@include u(ex-proj)/INC`PARTIALMATCH=%i0;@break getstat(%q<target>/%q<attr>`FLAGS,Approved)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Project %i0 is already approved!;th setstat(%q<target>/%q<attr>`FLAGS,Approved,1);th setstat(%q<target>/%q<attr>`FLAGS,ApprovedBy,%#);th setstat(%q<target>/%q<attr>`FLAGS,ApprovedOn,secs());th setq(msg,Project %i0: '[get(%q<target>/%q<attr>)]' was approved.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{%n approved the Project!}}

&INC`UNAPPROVE u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`FILENAME;@assert strlen(%q<filename>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Info name empty.;@dolist/delimit | %q<filename>={@include u(ex-proj)/INC`PARTIALMATCH=%i0;@assert getstat(%q<target>/%q<attr>`FLAGS,Approved)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Project %i0 is not approved!;th setstat(%q<target>/%q<attr>`FLAGS,Approved,0);th delstat(%q<target>/%q<attr>`FLAGS,ApprovedBy);th delstat(%q<target>/%q<attr>`FLAGS,ApprovedOn);th setq(msg,Project %i0: '[get(%q<target>/%q<attr>)]' was unapproved.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{%n unapproved the Project!}}

&VAR`ANNOUNCEAPPROVE u(ex-proj)=1
&VAR`ANNOUNCECHANNEL u(ex-proj)=Staff Reports

&INC`DELETE u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@break getstat(%q<target>/%q<attr>`FLAGS,Approved)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Approved Projects must be unapproved by admin first.;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was deleted.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@wipe %q<target>/%q<attr>

&INC`PARTIALMATCH u(ex-proj)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Project name empty.;@include u(ccs)/INC`PARTIAL=%0,u(u(ex-proj)/FUN`LIST,%q<target>,%#,1),|,v(VAR`MSGHEAD),filename,filename;th setq(attr,D`PROJECT`%q<filename>)

&INC`MAIN u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`LIST=%0,%1,UNFINISHED
&INC`OLD u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`LIST=%0,%1,FINISHED

&INC`LIST u(ex-proj)=@include u(ex-proj)/INC`FILENAME;@switch/inline gt(strlen(%q<filename>),0)=1,{@include u(ex-proj)/INC`LIST`CONTENTS},0,{@include u(ex-proj)/INC`LIST`PROJECTS}

&INC`LIST`PROJECTS u(ex-proj)=@nspemit %#=u(RFN`HEADER,name(%q<target>)'s Projects)%R[align(4 17 17 17 13 5,ID,Name,Duration,Remaining,RL Finish,Com)];@nspemit %#=u(RFN`SEPARATOR);@dolist/inline/delimit | [u(FUN`LIST`%2,%q<target>,%#)]={@nspemit %#=align(>4 17 17 17 13 5,pueblize(%i0,setr(comm,+project [if(strmatch(%#,%q<target>),,name(%q<target>)/)]%i0)),pueblize(left(get(%q<target>/D`PROJECT`%i0),17),%q<comm>),if(setr(fin,or(and(eq(0,get(%q<target>/D`PROJECT`%i0`REMAINING)),get(%q<target>/D`PROJECT`%i0`DURATION)),getstat(%q<target>/D`PROJECT`%i0`FLAGS,Finished))),Finished!,u(FUN`DISPTIME,get(%q<target>/D`PROJECT`%i0`DURATION))),if(%q<fin>,Finished!,u(FUN`DISPTIME,get(%q<target>/D`PROJECT`%i0`REMAINING)))[if(strfirstof(getstat(%q<target>/D`PROJECT`%i0`FLAGS,Active),1),,-Halt)],if(%q<fin>,Finished!,if(get(%q<target>/D`PROJECT`%i0`REMAINING),timefmt($I:$M$p $m/$d,add(secs(),div(get(%q<target>/D`PROJECT`%i0`REMAINING),3)),%#))),nattr(%q<target>/D`PROJECT`%i0`COMMENT`*))};@nspemit %#=header(Current Time: [timefmt($I:$M$p $m/$d,secs(),%#)])

&INC`LIST`CONTENTS u(ex-proj)=@include u(ex-proj)/INC`PARTIALMATCH=%q<filename>;@nspemit %#=header(name(%q<target>)'s [get(%q<target>/%q<attr>)] Project);@nspemit %#=get(%q<target>/%q<attr>`DESC);@nspemit %#=u(RFN`SUBHEADER)%R[ansi(h,Last set by:)] [name(getstat(%q<target>/%q<attr>`FLAGS,SetBy))] [ansi(h,On:)] [convsecs(getstat(%q<target>/%q<attr>`FLAGS,SetOn))];@switch/inline gt(getstat(%q<target>/%q<attr>`FLAGS,Approved),0)=1,{@nspemit %#=ansi(h,Approved by:) [name(getstat(%q<target>/%q<attr>`FLAGS,ApprovedBy))] [ansi(h,On:)] [convsecs(getstat(%q<target>/%q<attr>`FLAGS,ApprovedOn))]};@switch/inline hasattrval(%q<target>/%q<attr>`PARTNERS)=1,{@nspemit %#=ansi(h,Partners:) [itemize(iter(get(%q<target>/%q<attr>`PARTNERS),name(%i0),%b,|),|,and,\,)]};@dolist/inline sortkey(#lambda/last(\%0,`),lattr(%q<target>/%q<attr>`COMMENT`*))={@nspemit %#=subheader(name(get(%q<target>/%i0`BY)) commented on [convsecs(get(%q<target>/%i0`ON))]);@nspemit %#=get(%q<target>/%i0)};@nspemit %#=u(RFN`HEADER)

&INC`MAKELOG u(ex-proj)=@assert isdbref(%0);@assert isdbref(%1);@assert hasattr(%0/D`PROJECT`%2);@assert strlen(%3);&[setr(log,D`PROJECT`%2`LOG`[nextslot(%0,D`PROJECT`%2`LOG)])] %0=secs();&%q<log>`BY %0=objid(%1);&%q<log>`CONTENTS %0=%3
@@ %0 - Project holder. %1 - enactor. %2 - Project slot. %3 - message.

&INC`LOG u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`FILENAME;@include u(ex-proj)/INC`PARTIALMATCH=%q<filename>;@nspemit %#=header(Log for [name(%q<target>)] Project %q<filename>: [get(%q<target>/D`PROJECT`%q<filename>)]);@dolist/inline sortkey(#lambda/last(\%0,`),lattr(%q<target>/D`PROJECT`%q<filename>`LOG`*))={@nspemit %#=subheader(By [name(get(%q<target>/%i0`BY))] on [convsecs(get(%q<target>/%i0))]);@nspemit %#=get(%q<target>/%i0`CONTENTS)};@nspemit %#=u(RFN`HEADER)

&INC`NEW u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`FILENAME;@assert strlen(%q<filename>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Project name empty.;@assert or(isadmin(%#),strmatch(%q<target>,%#))=@nspemit %#=u(RFN`MSGHEAD) ERROR: You may not change another's Projects.;@break gt(strlen(%q<filename>),18)=@nspemit %#=u(RFN`HEADER) ERROR: Project names are limited to 18 characters or less.;@break regmatchi(%q<filename>,\\|)=@nspemit %#=u(RFN`HEADER) ERROR: Pipe symbols are not allowed in Project names.;@break regmatchi(%q<filename>,\/)=@nspemit %#=u(RFN`HEADER) ERROR: Slashes symbols are not allowed in Project names.;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Text field empty.;&[setr(attr,D`PROJECT`[setr(newnum,add(1,default(%q<target>/D`PROJECT,0)))])] %q<target>=%q<filename>;&%q<attr>`DESC %q<target>=%1;&D`PROJECT %q<target>=%q<newnum>;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was created.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,last(%q<attr>,`),{[name(%#)] created the Project: %0-%R%1}

&INC`DESC u(ex-proj)=@include u(ex-proj)/INC`PREPARE;&%q<attr>`DESC %q<target>=%1;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]''s desc was changed.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] changed the Project's Desc to:%R%1}

&INC`VISIBLE u(ex-proj)=@assert words(setr(players,lsearch(all,eplayer,\[words(wildgrepi(##,D`PROJECT`*`PARTNERS,*%:*))\])))=@nspemit %#=u(RFN`MSGHEAD) ERROR: No Players have partnered Projects with you.;@nspemit %#=u(RFN`HEADER,Partnered Projects Infos);@nspemit %#=table(iter(%q<players>,left(pueblize(name(%i0),+project [name(%i0)]),22)\([words(wildgrepi(%i0,D`PROJECT`*`PARTNERS,*%:*))]\)),25,78,|);@nspemit %#=u(RFN`HEADER)

&INC`RENAME u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@break gt(strlen(%1),18)=@nspemit %#=u(RFN`HEADER) ERROR: Project names are limited to 18 characters or less.;@break regmatchi(%1,\\|)=@nspemit %#=u(RFN`HEADER) ERROR: Pipe symbols are not allowed in Project names.;@break regmatchi(%1,\/)=@nspemit %#=u(RFN`HEADER) ERROR: Slashes symbols are not allowed in Project names.;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was renamed to %1.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};&%q<attr> %q<target>=%1;@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] changed the Project's name to:%R%1}

&INC`START u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@break strfirstof(getstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That Project is already active!;th setstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active,1);th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was activated.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] activated the Project}

&INC`STOP u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@assert strfirstof(getstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active),1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That Project is not active!;th setstat(%q<target>/D`PROJECT`%q<filename>`FLAGS,Active,0);th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was paused.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] paused the Project}

&INC`DURATION u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Duration field empty.;@assert or(strmatch(%1,X),valnum(u(FUN`EVALTIME,%1)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Duration must be in EVALTIME or X for Indefinite!;th setq(entry,);&%q<attr>`DURATION %q<target>=setr(time,if(strmatch(%1,X),X,u(FUN`EVALTIME,%1)));&%q<attr>`REMAINING %q<target>=%q<time>;th setstat(%q<target>/%q<attr>`FLAGS,Reported,0);th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was scheduled for: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))].);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] changed the Project's Duration to: [u(FUN`DISPTIME,u(FUN`EVALTIME,%1))]}

&INC`PREPARE u(ex-proj)=@include u(ex-proj)/INC`TARGET;@include u(ex-proj)/INC`FILENAME;@include u(ex-proj)/INC`PARTIALMATCH=%q<filename>;@assert strlen(%q<filename>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Project name empty.;@assert or(isadmin(%#),strmatch(%q<target>,%#),%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You may not change another's Projects.;@assert or(%2,isadmin(%#),not(getstat(%q<target>/%q<attr>`FLAGS,Approved)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: That Project may not be changed by you.

&INC`ADD u(ex-proj)=@include u(ex-proj)/INC`PREPARE=%0,%1,1;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Comment field empty.;&[setr(cattr,%q<attr>`COMMENT`[nextslot(%#,%q<attr>`COMMENT)])] %q<target>=%1;&%q<cattr>`ON %q<target>=secs();&%q<cattr>`BY %q<target>=%:;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' received a new comment.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/%q<attr>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a comment: %1}

&INC`DROLL u(ex-proj)=@include u(ex-proj)/INC`ROLL=%0,%1,d
&INC`ROLL u(ex-proj)=@include u(ex-proj)/INC`PREPARE=%0,%1,1;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Comment field empty.;@switch/inline t(strlen(after(%1,|)))=1,{@assert u(u(srs)/FUN`FLAGCHECK,after(%1,|))=@nspemit %#=u(RFN`MSGHEAD) ERROR: [itemize(iter(%q<errcheck>,ansi(h,%i0),|,|),|,and,\,)]};@include u(srs)/INC`INIT=,%2;@assert strlen(setr(inflate,u(u(srs)/FUN`NORMALIZE,setr(string,before(%1,|)))))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Could not format roll formula. Please contact a coder.;@assert strlen(setr(findnames,u(u(srs)/FUN`FINDNAMES,%q<inflate>,%q<t1>)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Could not perform name finding. Please contact a coder.;@assert gt(setr(totaldice,ulocal(u(srs)/FUN`CALC,setr(calcdice,u(u(srs)/FUN`CALCDICE,%q<findnames>,%q<t1>)))),0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: You have no dice to roll! Check your spelling and ensure that penalties aren't reducing your roll to nothing.;th setq(resformat,u(u(srs)/FUN`RESFORMAT));&[setr(cattr,%q<attr>`COMMENT`[nextslot(%#,%q<attr>`COMMENT)])] %q<target>=%q<resformat>;&%q<cattr>`ON %q<target>=secs();&%q<cattr>`BY %q<target>=%:;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' received a new dice roll.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/%q<attr>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a dice roll: %q<resformat>}


&INC`ADDPARTNER u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Name field empty.;@include u(ccs)/INC`CHECKPC=%1,1,PROJECT;@break match(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: [subj(%q<t1>)] is already a Project partner!;&D`PROJECT`%q<filename>`PARTNERS %q<target>=filterbool(#lambda/isobjid(\%0),setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>));th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' gained a new Partner: %q<t1name>);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a partner: %q<t1name>}

&INC`REMPARTNER u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Name field empty.;@include u(ccs)/INC`CHECKPC=%1,1,PROJECT;@assert match(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<t1objid>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: [subj(%q<t1>)] is not a Project partner!;th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' lost a Partner: %q<t1name>.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] added a partner: %q<t1name>}

&INC`FINISH u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@break getstat(%q<target>/%q<attr>`FLAGS,Finished)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That project is already finished!;th setstat(%q<target>/%q<attr>`FLAGS,Finished,1);th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was finished.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] finished the project.}

&INC`UNFINISH u(ex-proj)=@include u(ex-proj)/INC`PREPARE;@assert getstat(%q<target>/%q<attr>`FLAGS,Finished)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That project is not finished!;th setstat(%q<target>/%q<attr>`FLAGS,Finished,0);th setq(msg,Project [last(%q<attr>,`)]: '[get(%q<target>/%q<attr>)]' was unfinished.);@include u(ex-proj)/DO`ANNOUNCE=setunion(get(%q<target>/D`PROJECT`%q<filename>`PARTNERS),%q<target>),{ansi(h,name(%q<target>))'s %q<msg>},{Your %q<msg>},{ansi(h,name(%q<target>))'s %q<msg>};@include u(ex-proj)/INC`MAKELOG=%q<target>,%#,%q<filename>,{[name(%#)] Unfinished the project.}

&INC`TIMEDIV u(ex-proj)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) No time entered to divide!;@assert valnum(setr(time,u(FUN`EVALTIME,%0)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Entered time must be in DURATION format!;@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No value entered to divide the duration by.;@assert valnum(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Divisor must be a whole, positive number.;@nspemit %#=u(RFN`MSGHEAD) [u(FUN`DISPTIME,u(FUN`EVALTIME,%0))] Divided by %1: [u(FUN`DISPTIME,div(u(FUN`EVALTIME,%0),%1))]

&FUN`EVALTIME u(ex-proj)=lmath(add,iter(%0,switch(%i0,*s,before(%i0,s),*m,mul(before(%i0,m),u(mi)),*h,mul(before(%i0,h),u(ho)),*d,mul(before(%i0,d),u(da)),*w,mul(before(%i0,w),u(we)),*mo,mul(before(%i0,mo),u(mo)),*se,mul(before(%i0,se),u(se)),*y,mul(before(%i0,y),u(ye)),0)))

&FUN`DISPTIME u(ex-proj)=if(strmatch(%0,X),Indefinite,trim(if(setr(ye,div(setr(newsec,%0),u(ye))),%q<ye>ye [setq(newsec,sub(%0,mul(u(ye),%q<ye>)))])[if(and(%q<newsec>,setr(mo,div(%q<newsec>,u(mo)))),%q<mo>mo [setq(newsec,sub(%q<newsec>,mul(u(mo),%q<mo>)))])][if(and(%q<newsec>,setr(we,div(%q<newsec>,u(we)))),%q<we>w [setq(newsec,sub(%q<newsec>,mul(u(we),%q<we>)))])][if(and(%q<newsec>,setr(da,div(%q<newsec>,u(da)))),%q<da>d [setq(newsec,sub(%q<newsec>,mul(u(da),%q<da>)))])][if(and(%q<newsec>,setr(ho,div(%q<newsec>,u(ho)))),%q<ho>h [setq(newsec,sub(%q<newsec>,mul(u(ho),%q<ho>)))])][if(and(%q<newsec>,setr(mi,div(%q<newsec>,u(mi)))),%q<mi>m [setq(newsec,sub(%q<newsec>,mul(u(mi),%q<mi>)))])][if(%q<newsec>,%q<newsec>s)]))

&YE u(ex-proj)=mul(u(da),425)
&SE u(ex-proj)=mul(u(mo),3)
&MO u(ex-proj)=mul(u(we),4)
&WE u(ex-proj)=mul(u(da),7)
&DA u(ex-proj)=mul(u(ho),24)
&HO u(ex-proj)=mul(u(mi),60)
&MI u(ex-proj)=60

&TRG`TICKDOWN u(ex-proj)=@dolist lsearch(all,eplayer,\[and(approved(##),nattr(##/D`PROJECT`*))\])={@dolist/inline/nobreak filterbool(#lambda/and(not(strfirstof(getstat(%i0/\%0`FLAGS,Finished),0)),strfirstof(getstat(%i0/\%0`FLAGS,Active),1)),lattr(%i0/D`PROJECT`*))={&%i0`REMAINING %i1=bound(sub(get(%i1/%i0`REMAINING),%0),0);@trigger u(ex-proj)/TRG`CHECKFINISH=%i1,%i0}}

&TRG`CHECKFINISH u(ex-proj)=@assert get(%0/%1`DURATION);@break get(%0/%1`REMAINING);@break getstat(%0/%1`FLAGS,Reported);@nspemit/list setunion(get(%0/%1`PARTNERS),%0)=u(RFN`MSGHEAD) [name(%0)]'s Project [last(%1,`)] '[default(%0/%1,Unset)]' has finished its Duration.[if(getstat(%0/%1`FLAGS,Approved),%BIt has been submitted for review!)];@include u(ex-proj)/INC`MAKELOG=%0,%0,last(%1,`),{Project duration finished![if(getstat(%0/%1`FLAGS,Approved),%BIt has been submitted for review!)]};@switch/inline t(getstat(%0/%1`FLAGS,Approved))=1,{@trigger u(jobsys)/INC`REQUEST=name(%0) - [last(%1,`)] '[default(%0/%1,Unset)]',The Project is ready for admin review.,PROJ,objid(%0)};th setstat(%0/%1`FLAGS,Reported,1)

+help/addmain Roleplaying/+project=[u(ex-proj)]/HLP`+PROJECT
&HLP`+PROJECT u(ex-proj)=The +project system is used to keep track of long-term commitments, crafting projects, CRM Leadership actions, and similar endeavors.%R%RNote: All commands actually support <player>/<#> target style. This will be referred to as [ansi(h,<target>)] in the helpfile.%R%RAll ADMIN-APPROVED PROJECTS will post to +myjobs when their durations have finished!%R%R[ansi(hc,Browsing Projects)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+project)] - See all your Projects.%R[ansi(h,+project <#>)] - View a specific Project's details.%R[ansi(h,+project <name>/)] - List other's Projects. You must be a partner of a player's Project to see that Project, or staff.%R[ansi(h,+project <name>/<#>)] - View another's project details.%R[ansi(h,+project/log <#>)] - View a Project's history. Can also use <player>/<#>%R[ansi(h,+project/old)] - View all finished projects. Can also use +project/old <player>/})]%R%R[ansi(hc,Managing Projects)]%RThese can only be used on unapproved Projects, unless staff.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+project/new <title>=<description text>)] - Creates a new Project.%R[ansi(h,+project/desc <target>=<new text>)] - Resets a project's description.%R[ansi(h,+project/rename <target>=<new name>)] - Renames a project.%R[ansi(h,+project/finish <target>)] - Mark a project finished and archive it.%R[ansi(h,+project/unfinish <target>)] - Unarchive a project for reuse.%R[ansi(h,+project/addpartner <target>=<player>)] - Adds a player as a partner. Partners can see the job and use /add to make comments!%R[ansi(h,+project/rempartner <target>=<player>)] - Removes a partner from a project.%R[ansi(h,+project/add <target>=<text>)] - Adds a comment note to a project.%R[ansi(h,+project/roll <target>=<rollstring>|<switches>)] - Creates comment using the output of a +roll. |<switches> is optional. Example: +project/roll 5=Stamina|DBL9/DBL10})]%R%R[ansi(hc,Time Features)]%RNote: these are based off of IC time, not OOC time.%R[align(5 [sub(width(%#),6)],,{[ansi(h,+project/duration <target>=<time string>)] - Gives a project a starting duration. It will begin ticking unless /stop'd or if already /stop'd.%R[ansi(h,+project/stop <target>)] - Halts a project's countdown.%R[ansi(h,+project/start <target>)] - Continues a project.%R[ansi(h,+project/timediv <time string>=<divisor>)] - Show a time string of <time string> divided by <divisor>. For instance, 1mo divided by 4 is 1w.})]%R%R[ansi(hc,Duration Times)]%RWhenever a <time string> is called for, this entails entering a value composed of the following possible values:%R[table(#s - seconds|#m - minutes|#h - hours|#d - days|#w - weeks|#mo - months|#se - seasons|#ye - years,13,78,|)]%R%RFor example, you could enter 4mo 6d to mean '4 months, 6 days.' The order is irrelevant and you could use the same type more than once if you so choose. Note that 1se is equal to 3mo and 5se is equal to 1y. Note: The system can't handle date values greater than about 56 IC years.

+shelp/addmain Character/+project=[u(ex-proj)]/SHLP`+PROJECT
&SHLP`+PROJECT u(ex-proj)=[ansi(hc,Storyteller Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+project/approve <target>)] - Approve someone's project.%R[ansi(h,+project/unapprove <target>)] - unapprove an approved project.})]%R%RApproved projects will post to Jobs when their time runs out!
