@@ DEPENDENCIES - CORE

@switch/inline isdbref(u(ex-pso))=0,{@tel create(Pools System Object <EX-PSO>)=config(master_room)}
&ex-pso u(coi)=locate(config(master_room),Pools System Object <EX-PSO>,TXxi)
@set u(ex-pso)=WIZARD !NO_COMMAND
@parent u(ex-pso)=u(coi)

&CMD`+POOL u(ex-pso)=$^\+(burn|gain|refresh|commit|uncommit|pools)(?\:/(\S+))?(?\: +(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%2,setunion(v(VAR`PLAYFLAGS),if(isadmin(%#),v(VAR`ADMINFLAGS))),|,POOLS,choice,switch;@include u(ex-pso)/INC`%1=%3,%4
@set u(ex-pso)/CMD`+POOL=regexp

&VAR`PLAYFLAGS u(ex-pso)=
&VAR`ADMINFLAGS u(ex-pso)=

&INC`FINDPOOL u(ex-pso)=@assert strlen(%0)=@nspemit %#=msghead(POOLS) ERROR: What Pool or Track will you burn from? Your choices are: [itemize(u(FUN`LISTPOOLS,%#),%b,and,\,)];@include u(ccs)/INC`PARTIAL=%0,u(FUN`LISTPOOLS,%#),%b,POOLS,choice,pool

&FUN`POOLDETAIL u(ex-pso)=v(DAT`%0`UNITNAME) of [if(strmatch(v(DAT`%0`UNITTYPE),Essence),capnames(%0)%B)][v(DAT`%0`UNITTYPE)]

&FUN`LISTPOOLS u(ex-pso)=u(FUN`SORTPOOLS,filterbool(#lambda/and(u(FUN`MAX,%0,\%0),strmatch(v(DAT`\%0`TYPE),if(strlen(%1),%1,*))),iter(lattr(u(ex-pso)/FUN`MAX`*),last(%i0,`))))

&FUN`SORTPOOLS u(ex-pso)=filterbool(#lambda/match(%0,\%0),Personal Peripheral Gossamer Willpower Limit Resonance Paradox Clarity Stasis Divergence Dissonance)

&INC`BURN u(ex-pso)=@include u(ex-pso)/INC`FINDPOOL=%0,%#;@assert strlen(%1)=@nspemit %#=msghead(POOLS) ERROR: Burn Value empty.;@assert valnum(%1)=@nspemit %#=msghead(POOLS) ERROR: Burn values must be whole, positive numbers.;@break lt(u(FUN`CUR,%#,%q<choice>),%1)=@nspemit %#=msghead(POOLS) There aren't enough [u(FUN`POOLDETAIL,%q<choice>)] in that [v(VAR`POOL`%q<choice>`TYPE)]!;@nsremit %l=msghead(POOLS) [ansi(h,%n)] just burned %1 [u(FUN`POOLDETAIL,%q<choice>)]!;&D`POOLS`%q<choice>`CUR %#=sub(u(FUN`CUR,%#,%q<choice>),%1)

&INC`GAIN u(ex-pso)=@include u(ex-pso)/INC`FINDPOOL=%0,%#;@assert strlen(%1)=@nspemit %#=msghead(POOLS) ERROR: Regain Value empty.;@assert valnum(%1)=@nspemit %#=msghead(POOLS) ERROR: Regain values must be whole, positive numbers.;@nsremit %l=msgheadroom(POOLS) [ansi(h,%n)] just gained %1 [u(FUN`POOLDETAIL,%q<choice>)]!;&D`POOLS`%q<choice>`CUR %#=bound(add(u(FUN`CUR,%#,%q<choice>),%1),0,if(strmatch(%q<choice>,Gossamer),99,sub(u(FUN`MAX,%#,%q<choice>),u(FUN`TOTALCOMMIT,%#,%q<choice>))))

&FUN`TOTALCOMMIT u(ex-pso)=lmath(add,iter(lattr(%0/D`POOLS`%1`COMMIT`*),get(%0/%i0)))

&INC`REFRESH u(ex-pso)=@dolist/inline setunion(u(FUN`LISTPOOLS,%#,Pool),u(FUN`LISTPOOLS,%#,Channel))=&D`POOLS`%i0`CUR %#=u(FUN`MAX,%#,%i0);&D`POOLS`OVERDRIVE`CUR %#=0;@nsremit %l=msghead(POOLS) [ansi(h,%n)] just refreshed %p Pools and Channels!

&INC`COMMIT u(ex-pso)=@include u(ex-pso)/INC`FINDPOOL=before(%0,/),%#;@assert strlen(after(%0,/))=@nspemit %#=msghead(POOLS) ERROR: Commit Value empty.;@assert valnum(after(%0,/))=@nspemit %#=msghead(POOLS) ERROR: Commit values must be whole, positive numbers.;@break lt(u(FUN`CUR,%#,%q<choice>),after(%0,/))=@nspemit %#=msghead(POOLS) There aren't enough [u(FUN`POOLDETAIL,%q<choice>)] in that [v(VAR`POOL`%q<choice>`TYPE)]!;@assert strlen(%1)=@nspemit %#=msghead(POOLS) ERROR: No reason entered for this Commitment!;&[setr(attr,D`POOLS`%q<choice>`COMMIT`[nextslot(%#,D`POOLS`%q<choice>`COMMIT)])] %#=after(%0,/);&D`POOLS`%q<choice>`CUR %#=bound(sub(get(%#/D`POOLS`%q<choice>`CUR),after(%0,/)),0,u(FUN`MAX,%#,%q<choice>));&%q<attr>`REASON %#=%1;@nsremit %l=msghead(POOLS) [ansi(h,%n)] just Committed [after(%0,/)] [u(FUN`POOLDETAIL,%q<choice>)] to: %1

&INC`UNCOMMIT u(ex-pso)=@include u(ex-pso)/INC`FINDPOOL=%0,%#;@assert valnum(%1)=@nspemit %#=msghead(POOLS) ERROR: Uncommit target empty.;@assert hasattr(%#/D`POOLS`%q<choice>`COMMIT`%1)=@nspemit %#=msghead(POOLS) ERROR: No Commitment matches that slot.;@nsremit %l=msghead(POOLS) [ansi(h,%n)] just released [get(%#/D`POOLS`%q<choice>`COMMIT`%1)] [u(FUN`POOLDETAIL,%q<choice>)] from: [get(%#/D`POOLS`%q<choice>`COMMIT`%1`REASON)];@wipe %#/D`POOLS`%q<choice>`COMMIT`%1

&INC`POOLS u(ex-pso)=@switch/inline and(isadmin(%#),strlen(%0))=1,{@include u(ccs)/INC`CHECKPC=%0,1,POOLS},0,{th setq(t1,%#)};@nspemit %#=header(name(%q<t1>)'s Pools);@dolist/inline u(FUN`LISTPOOLS,%q<t1>)={@nspemit %#=rjust(capnames(%i0),10): [rjust(u(FUN`CUR,%q<t1>,%i0),3,0)]/[rjust(u(FUN`MAX,%q<t1>,%i0),3,0)][if(nattr(%q<t1>/D`POOLS`%i0`COMMIT`*),%R[iter(lattr(%q<t1>/D`POOLS`%i0`COMMIT`*),%T[last(%i0,`)]: [rjust(get(%q<t1>/%i0),3)] for [get(%q<t1>/%i0`REASON)],%B,%R)])]};@nspemit %#=header()

&FUN`CUR u(ex-pso)=bound(get(%0/D`POOLS`%1`CUR),if(strmatch(v(DAT`%1`TYPE),Track),u(FUN`TOTALCOMMIT,%0,%1),0),if(strmatch(v(DAT`%1`TYPE),Pool),sub(u(FUN`MAX,%0,%1),u(FUN`TOTALCOMMIT,%0,%1)),u(FUN`MAX,%0,%1)))

&FUN`MAX u(ex-pso)=add(u(FUN`MAX`%1,%0),getstat(%0/D`POOLBONUS,%1))

&FUN`MAX`PERSONAL u(ex-pso)=add(u(FUN`MAX`PERSONAL`[getsplat(%0)],%0),mul(getstat(%0/D`POSITIVE_MUTATIONS,Essence Abundance),3))
&FUN`MAX`PERIPHERAL u(ex-pso)=add(u(FUN`MAX`PERIPHERAL`[getsplat(%0)],%0),0)

&FUN`MAX`LIMIT u(ex-pso)=switch(1,regmatchi(getsplat(%0),^(SOLAR|LUNAR|SIDEREAL|INFERNAL|TERRESTRIAL)$),10,gt(getstat(%0/D`NEGATIVE_MUTATIONS,Great Curse),0),10,0)
&FUN`MAX`RESONANCE u(ex-pso)=switch(1,regmatchi(getsplat(%0),^(ABYSSAL)$),10,0)
&FUN`MAX`CLARITY u(ex-pso)=switch(1,regmatchi(getsplat(%0),^(ALCHEMICAL)$),10,0)

&FUN`MAX`PERSONAL`GOD-BLOODED u(ex-pso)=reswitchi(getstat(%0/D`INFO,Caste),^(Fae)$,mul(getstat(%0/D`INFO,Essence),8),^(Divine|Ghost|Demon)$,add(mul(getstat(%0/D`INFO,Essence),5),mul(u(FUN`MAX`WILLPOWER,%0),2),if(default(VAR`MAXVIRTUES,0),20,lmath(add,iter(get(%0/D`VIRTUES),last(%i0,~),|)))),add(mul(getstat(%0/D`INFO,Essence),4),u(FUN`MAX`WILLPOWER,%0),if(default(VAR`MAXVIRTUES,0),20,lmath(add,iter(get(%0/D`VIRTUES),last(%i0,~),|)))))

&FUN`MAX`PERSONAL`SOLAR u(ex-pso)=add(mul(3,getstat(%0/D`INFO,Essence)),10)
&FUN`MAX`PERIPHERAL`SOLAR u(ex-pso)=add(mul(7,getstat(%0/D`INFO,Essence)),26)

&FUN`MAX`PERSONAL`TERRESTRIAL u(ex-pso)=add(mul(1,getstat(%0/D`INFO,Essence)),11)
&FUN`MAX`PERIPHERAL`TERRESTRIAL u(ex-pso)=add(mul(4,getstat(%0/D`INFO,Essence)),23)

&FUN`MAX`PERSONAL`LUNAR u(ex-pso)=add(mul(1,getstat(%0/D`INFO,Essence)),15)
&FUN`MAX`PERIPHERAL`LUNAR u(ex-pso)=add(mul(4,getstat(%0/D`INFO,Essence)),34)

&FUN`MAX`PERSONAL`SIDEREAL u(ex-pso)=add(mul(2,getstat(%0/D`INFO,Essence)),9)
&FUN`MAX`PERIPHERAL`SIDEREAL u(ex-pso)=add(mul(6,getstat(%0/D`INFO,Essence)),25)
&FUN`MAX`PARADOX u(ex-pso)=switch(1,regmatchi(getsplat(%0),^(SIDEREAL)$),10,0)

&FUN`MAX`PERSONAL`ABYSSAL u(ex-pso)=add(mul(3,getstat(%0/D`INFO,Essence)),10)
&FUN`MAX`PERIPHERAL`ABYSSAL u(ex-pso)=add(mul(7,getstat(%0/D`INFO,Essence)),26)

&FUN`MAX`PERSONAL`LIMINAL u(ex-pso)=add(mul(3,getstat(%0/D`INFO,Essence)),10)
&FUN`MAX`PERIPHERAL`LIMINAL u(ex-pso)=add(mul(4,getstat(%0/D`INFO,Essence)),23)

&FUN`MAX`PERSONAL`ALCHEMICAL u(ex-pso)=add(mul(3,getstat(%0/D`INFO,Essence)),u(FUN`MAX`WILLPOWER,%0))
&FUN`MAX`PERIPHERAL`ALCHEMICAL u(ex-pso)=add(mul(5,getstat(%0/D`INFO,Essence)),mul(3,u(FUN`MAX`WILLPOWER,%0)),null(SKINMOUNTHERE),mul(2,if(default(VAR`MAXVIRTUES,0),5,lmath(max,iter(get(%0/D`VIRTUES),last(%i0,~),|)))))

&FUN`MAX`PERSONAL`DRAGON-KING u(ex-pso)=add(mul(4,getstat(%0/D`INFO,Essence)),null(SKINMOUNTHERE),mul(2,u(FUN`MAX`WILLPOWER,%0)),if(default(VAR`MAXVIRTUES,0),10,add(getstat(%0/D`VIRTUES,Conviction),getstat(%0/D`VIRTUES,Valor))))

&FUN`MAX`PERSONAL`GHOST u(ex-pso)=add(mul(10,getstat(%0/D`INFO,Essence)),mul(3,u(FUN`MAX`WILLPOWER,%0)),null(SKINMOUNTHERE),mul(2,if(default(VAR`MAXVIRTUES,0),20,lmath(add,iter(get(%0/D`VIRTUES),last(%i0,~),|)))))

&FUN`MAX`PERSONAL`GOD`BLOODED u(ex-pso)=add(reswitchi(getstat(%0/D`INFO,Caste),^(Fae)$,mul(getstat(%0/D`INFO,Essence),8),^(Divine|Demon|Ghost)$,add(mul(5,getstat(%0/D`INFO,Essence)),if(default(VAR`MAXVIRTUES,0),20,lmath(add,iter(get(%0/D`VIRTUES),last(%i0,~),|))),mul(2,u(FUN`MAX`WILLPOWER,%0)))),switch(getstat(%0/D`POSITIVE_MUTATIONS,Essence Abundance),1,3,2,6,4,12,6,16,0))

&FUN`MAX`PERSONAL`HALF`CASTE u(ex-pso)=add(mul(4,getstat(%0/D`INFO,Essence)),u(FUN`MAX`WILLPOWER,%0),if(default(VAR`MAXVIRTUES,0),20,lmath(add,iter(get(%0/D`VIRTUES),last(%i0,~),|))),switch(getstat(%0/D`POSITIVE_MUTATIONS,Essence Abundance),1,3,2,6,4,12,6,16,0))

&FUN`MAX`PERSONAL`INFERNAL u(ex-pso)=add(mul(3,getstat(%0/D`INFO,Essence)),u(FUN`MAX`WILLPOWER,%0))
&FUN`MAX`PERIPHERAL`INFERNAL u(ex-pso)=add(mul(7,getstat(%0/D`INFO,Essence)),u(FUN`MAX`WILLPOWER,%0),if(default(VAR`MAXVIRTUES,0),20,lmath(add,iter(get(%0/D`VIRTUES),last(%i0,~),|))),null(SKINMOUNTHERE))

&FUN`MAX`PERSONAL`JADEBORN u(ex-pso)=add(mul(10,getstat(%0/D`INFO,Essence)),null(SKINMOUNTHERE))
&FUN`MAX`DIVERGENCE u(ex-pso)=switch(1,regmatchi(getsplat(%0),^(JADEBORN)$),10,0)



&FUN`MAX`PERSONAL`MORTAL u(ex-pso)=if(or(getstat(%0/D`MERITS,Awakened Essence),getstat(%0/D`POSITIVE_MUTATIONS,Awakened Essence),v(VAR`MORTALESSENCE)),add(mul(10,getstat(%0/D`INFO,Essence)),null(SKINMOUNTHERE)),0)

&VAR`MORTALESSENCE u(ex-pso)=0

&FUN`MAX`PERSONAL`RAKSHA u(ex-pso)=add(mul(10,getstat(%0/D`INFO,Essence)),null(SKINMOUNTHERE))
&FUN`MAX`STASIS u(ex-pso)=switch(1,regmatchi(getsplat(%0),^(RAKSHA)$),10,0)
&FUN`MAX`GOSSAMER u(ex-pso)=switch(getstat(%0/D`BACKGROUNDS,Gossamer),1,1,2,3,3,6,4,10,5,20,0)



&FUN`MAX`PERSONAL`SPIRIT u(ex-pso)=add(mul(10,getstat(%0/D`INFO,Essence)),mul(5,u(FUN`MAX`WILLPOWER,%0)),null(SKINMOUNTHERE))

&FUN`MAX`WILLPOWER u(ex-pso)=firstof(getstat(%0/D`INFO,Willpower),0)
&FUN`MAX`DISSONANCE u(ex-pso)=if(getstat(%0/D`NEGATIVE_MUTATIONS,Gremlin Syndrome),10,0)

&DAT`CLARITY u(ex-pso)=
&DAT`CLARITY`TYPE u(ex-pso)=Track
&DAT`CLARITY`UNITNAME u(ex-pso)=Points
&DAT`CLARITY`UNITTYPE u(ex-pso)=Clarity

&DAT`DISSONANCE u(ex-pso)=
&DAT`DISSONANCE`TYPE u(ex-pso)=Track
&DAT`DISSONANCE`UNITTYPE u(ex-pso)=Dissonance
&DAT`DIVERGENCE u(ex-pso)=
&DAT`DIVERGENCE`TYPE u(ex-pso)=Track
&DAT`DIVERGENCE`UNITNAME u(ex-pso)=Points
&DAT`DIVERGENCE`UNITTYPE u(ex-pso)=Divergence

&DAT`GOSSAMER u(ex-pso)=
&DAT`GOSSAMER`TYPE u(ex-pso)=Pool
&DAT`GOSSAMER`UNITNAME u(ex-pso)=Strands
&DAT`GOSSAMER`UNITTYPE u(ex-pso)=Gossamer

&DAT`LIMIT u(ex-pso)=
&DAT`LIMIT`TYPE u(ex-pso)=Track
&DAT`LIMIT`UNITNAME u(ex-pso)=Points
&DAT`LIMIT`UNITTYPE u(ex-pso)=Limit

&DAT`PARADOX u(ex-pso)=
&DAT`PARADOX`TYPE u(ex-pso)=Track
&DAT`PARADOX`UNITNAME u(ex-pso)=Points
&DAT`PARADOX`UNITTYPE u(ex-pso)=Paradox

&DAT`PERIPHERAL u(ex-pso)=
&DAT`PERIPHERAL`TYPE u(ex-pso)=Pool
&DAT`PERIPHERAL`UNITNAME u(ex-pso)=Motes
&DAT`PERIPHERAL`UNITTYPE u(ex-pso)=Essence

&DAT`PERSONAL u(ex-pso)=
&DAT`PERSONAL`TYPE u(ex-pso)=Pool
&DAT`PERSONAL`UNITNAME u(ex-pso)=Motes
&DAT`PERSONAL`UNITTYPE u(ex-pso)=Essence

&DAT`RESONANCE u(ex-pso)=
&DAT`RESONANCE`TYPE u(ex-pso)=Track
&DAT`RESONANCE`UNITNAME u(ex-pso)=Points
&DAT`RESONANCE`UNITTYPE u(ex-pso)=Resonance

&DAT`STASIS u(ex-pso)=
&DAT`STASIS`TYPE u(ex-pso)=Track
&DAT`STASIS`UNITNAME u(ex-pso)=Points
&DAT`STASIS`UNITTYPE u(ex-pso)=Stasis

&DAT`WILLPOWER u(ex-pso)=
&DAT`WILLPOWER`TYPE u(ex-pso)=Pool
&DAT`WILLPOWER`UNITNAME u(ex-pso)=Points
&DAT`WILLPOWER`UNITTYPE u(ex-pso)=Willpower