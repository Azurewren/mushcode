@@ DEPENDENCIES: Core, MySQL, MediaWiki, PHP, Account Management System
@@ The Report System requires the Group System to function.
@@ You can install SceneSys with only MySQL and enjoy 
@@ the scheduling features but the web elements are what
@@ make it really shine.

th u(NEWCOBJ,Scene Management System <SCENE>,scene,,,,WIZARD SAFE !NO_COMMAND,INHERIT SIDEFX SAFE)

&CMD`+SCENE`PENNMUSH [u(cobj,scene)]=$^(?s)(?\:\+)?(scene|log|pot|summary|observer|partners|plot|scenes|schedule|events|event)(?\:/(\S+?)?)?(?\:/(\d+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+SCENE`MAIN
@set [u(cobj,scene)]/CMD`+SCENE`PENNMUSH=regexp
&CMD`+SCENE`RHOSTMUSH [u(cobj,scene)]=$^(?s)(?\:\+)?(scene|log|pot|summary|observer|partners|plot|scenes|schedule|events|event)(?\:/(\\S+?)?)?(?\:/(\\d+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach %!/CMD`+SCENE`MAIN
@set [u(cobj,scene)]/CMD`+SCENE`RHOSTMUSH=regexp
&CMD`+SCENE`MAIN [u(cobj,scene)]=th u(setq`%va,mode,switch(%1,scene,LOG,log,LOG,events,LOG,schedule,LOG,scenes,log,event,LOG,plot,plot,pot,pot,summary,summary,observer,observer,partners,partners));@select/inline t(match(LOG PLOT,%q<mode>))=1,{@check not(strmatch(sql(SELECT DATABASE()),#-*))=@attach %!/INC`MSG=ERROR: SQL is not ready.;@attach %!/INC`CHECKPC=%#,1,1};@attach %!/INC`GETSWITCH=%2;th u(setq`%va,page,u(strfirstof,%3,1));@include %!/INC`%q<mode>`[u(strfirstof,%q<switch>,switch(%1,scenes,UPCOMING,events,UPCOMING,event,UPCOMING,schedule,UPCOMING,MAIN))]=trim(%4),trim(%5),%4[if(strlen(%5),=%5)]
@set [u(cobj,scene)]/CMD`+SCENE`[switch(%va,PennMUSH,RHOSTMUSH,RhostMUSH,PENNMUSH)]=no_command

&CMD`+SCHEDULE`PENNMUSH [u(cobj,scene)]
&CMD`+SCHEDULE`RHOSTMUSH [u(cobj,scene)]
&CMD`+SCHEDULE`MAIN [u(cobj,scene)]

&CMD`CHARID [u(cobj,scene)]=$^\+charid(?\: +(.*))?$:@attach %!/CMD`+SCENE`MAIN=+log/id %1,log,id,,%1
@set [u(cobj,scene)]/CMD`CHARID=regexp

&SYSTEM`SWITCHES [u(cobj,scene)]=setunion(v(SWITCHES`%q<mode>`PLAYER),if(u(isadmin`%va,%#),v(SWITCHES`%q<mode>`ADMIN)),|,|)

&SWITCHES`LOG`PLAYER [u(cobj,scene)]=ID|CREATE|LOUDCREATE|START|LOUDSTART|SCHEDULE|RESCHEDULE|JOIN|LEAVE|TITLE|OUTCOME|PITCH|RECALL|FINISH|PAUSE|CONTINUE|START|UNDO|REDO|EDIT|SPOOF|PLOT|OLD|WHO|WITH|EXCLUDE|TAG|UNTAG|MAIL|UPCOMING|MINE|DELETE
&SWITCHES`LOG`ADMIN [u(cobj,scene)]=MERGE

&SWITCHES`PLOT`PLAYER [u(cobj,scene)]=ALL
&SWITCHES`PLOT`ADMIN [u(cobj,scene)]=ADD|DESC|TITLE|START|END|TYPE|RUNNER|STATUS|DELETE

&SWITCHES`POT`PLAYER [u(cobj,scene)]=LAST|MAX|LIST|BRIEF|MODE|SUMMARY|TOGGLE
&SWITCHES`SUMMARY`PLAYER [u(cobj,scene)]=SILENT

&SWITCHES`OBSERVER`PLAYER [u(cobj,scene)]=
&SWITCHES`PARTNERS`PLAYER [u(cobj,scene)]=JOIN|LEAVE

th u(NEWCONF,config,SCENESYS,URL,example.org,Path to website.,WORD)
th u(NEWCONF,config,SCENESYS,PATH,/scene/scene.php?id=,/scene/scene.php?id=,WORD)
th u(NEWCONF,config,SCENESYS,IDLE,1800,Duration between idle checks?,DURATION)
th u(NEWCONF,config,SCENESYS,BOARD,,Board for scene announcements?,DBREF)
th u(NEWCONF,config,SCENESYS,BANNER,1,Show colored names for events?,BOOL)
th u(NEWCONF,config,SCENESYS,BANNER_TAGS,1,Show colored names for tagged players?,BOOL)

th u(NEWCONF,config,POT,INTERVAL,7200,Duration between cleaning checks?,DURATION)
th u(NEWCONF,config,POT,TIMEOUT,28800,Time to keep poses?,DURATION)

th u(NEWCONF,pconf,IC,QUOTES,,For IC quotations.,COLOR)
th u(NEWCONF,pconf,IC,SPEECH,,For IC dialogue.,COLOR)
th u(NEWCONF,pconf,IC,BORDERS,1,Show borders around poses?,BOOL)
th u(NEWCONF,pconf,ALERTS,SCENES,1,Show upcoming scenes on logon?,BOOL)

&SYSTEM`NAME [u(cobj,scene)]=SCENESYS

&OBJECT`DESTROY [u(cobj,scene)]=@dolist/inline u(lattr,%!/OBJECT`DESTROY`*)={@trigger %!/##=%0,%1,%2,%3,%4,%5,%6,%7,%8,%9}

&OBJECT`DESTROY`PURGESPOOF [u(cobj,scene)]=@select/inline %2=PLAYER,{@dolist/inline u(choosegame,lsearch(all,elock,D`SCENE`SPOOF:%0),search(EVAL=\[strmatch(get(##/D`SCENE`SPOOF),%0)\]))=&D`SCENE`SPOOF %i0}

&PLAYER`CONNECT [u(cobj,scene)]
&PLAYER`CONNECT`UPCOMING [u(cobj,scene)]

@ACONNECT [u(cobj,scene)]=@dolist/inline u(lattr`%va,%!/ACONNECT`*)={@trigger %!/##=%0,%1,%2,%3,%4,%5,%6,%7,%8,%9}
&ACONNECT`UPCOMING [u(cobj,scene)]=@check u(player_config,%0,ALERTS,SCENES);@wait 4={th u(setq`%va,scenes,u(mysql3,GET`UPCOMING`SCENES));@select/inline t(%q<scenes>)=1,{@attach %!/INC`MSG=Scenes happening within 24 hours: [iter(%q<scenes>,u(pueblize,elements(%i0,1,chr(177)): '[elements(%i0,2,chr(177))]' \([u(fancytime`%va,elements(%i0,3,chr(177)),%#)]\),+log [elements(%i0,1,chr(177))]),chr(176),\,%b)],%0},0,{@attach %!/INC`MSG=No scenes are happening in the next 24 hours. Bummer!,%0}}

&Q`GET`UPCOMING`SCENES [u(cobj,scene)]=SELECT scene_id,title,UNIX_TIMESTAMP(date_scheduled) FROM mush_scene WHERE is_deleted=0 AND date_scheduled >= NOW() AND date_scheduled <= NOW() + INTERVAL 24 HOUR ORDER BY date_scheduled

&STARTUP [u(cobj,scene)]=@attach/nobreak %!/STARTUP`OVERRIDE;@trigger %!/LOOP`IDLECHECK;@trigger %!/LOOP`CLEANPOT

&STARTUP`OVERRIDE [u(cobj,scene)]=@select/inline %va=PennMUSH,{@dolist/inline @emit pose say semipose=@hook/override/inline %i0=%!,override`ic},RhostMUSH,{@dolist/inline @emit pose say semipose P S=@hook/ignore %d0}

&LOOP`IDLECHECK [u(cobj,scene)]=@dolist/inline/nobreak/delimit [chr(176)] [u(MYSQL3,LOG`IDLECHECK)]={@check cor(lte(u(setr`%va,rec,u(mysql,RECENT`POSE,elements(%i0,1,chr(177)))),sub(secs(),mul(60,60,3))),not(%q<rec>));@attach %!/INC`MSGSCENE=elements(%i0,1,chr(177)),{Scene [elements(%i0,1,chr(177))] - '[elements(%i0,2,chr(177))]' has been automatically marked Unfinished for idleness. Use [u(pueblize,+log/continue [elements(%i0,1,chr(177))])] to resume it.};@attach %!/INC`MSG`CHAN=Scene [elements(%i0,1,chr(177))] - '[elements(%i0,2,chr(177))]' has been automatically marked Unfinished for idleness.;@attach %!/INC`CLEANUPSCENE=elements(%i0,1,chr(177));@attach %!/INC`DOSQL=SET`SCENESTATE,2,elements(%i0,1,chr(177))};@wait u(game_config,scenesys,idle)=@trigger %!/LOOP`IDLECHECK

&LOOP`CLEANPOT [u(cobj,scene)]=@dolist u(choosegame,lsearch(all,eval,\[nattr(##/D`POSES`*)\]),search(EVAL=\[u(nattr,##/D`POSES`*)\]))={@wait #@=@trigger %!/LOOP`CLEANPOT`DOCLEAN=##};@wait u(game_config,pot,interval)=@trigger %!/LOOP`CLEANPOT

&LOOP`CLEANPOT`DOCLEAN [u(cobj,scene)]=@dolist/inline u(filter,TIMEDOUT,u(lattr,%0/D`POSES`*),%b,%b,u(game_config,POT,TIMEOUT),%0)={@attach %!/WIPE=%0,##}

&FIL`TIMEDOUT [u(cobj,scene)]=gte(sub(secs(),get(%2/%0`WHEN)),%1)

&Q`LOG`IDLECHECK [u(cobj,scene)]=SELECT scene_id,title FROM mush_scene where is_deleted=0 AND (date_scheduled IS NULL OR date_scheduled<NOW() - INTERVAL 3 HOUR) AND scene_status=0 AND date_started>NOW() - INTERVAL 6 HOUR

&Q`RECENT`POSE [u(cobj,scene)]=SELECT UNIX_TIMESTAMP(max(a.date_created)) FROM mush_action AS a LEFT JOIN mush_action_source AS src ON a.source_id=src.source_id WHERE a.is_deleted=0 AND src.scene_id=?

&Q`SET`SCENESTATE [u(cobj,scene)]=UPDATE mush_scene SET scene_status=? WHERE scene_id=?

@@ --- HOOKS AND POSE RECORDING

&OVERRIDE`IC [u(cobj,scene)]=$^(?s)(pose|semipose|say|@emit)(?\:/noeval)?(?\: +(.*))?$:@check strlen(%2)=@pemit %#=Huh? (Type "help" for help.);@check elock(%l/speech,%#)=@select/inline strlen(get(%l/SPEECH_LOCK`FAILURE))=>0,{@pemit %#=u(%l/SPEECH_LOCK`FAILURE)},{@attach %!/INC`MSG=ERROR: Permission denied by local speech lock.};th u(setq`%va,cansql,not(strmatch(sql(SELECT DATABASE()),#-*)));@select/inline %q<cansql>=1,{@attach %!/INC`CHECKPC=%#,1,1};th u(setq`%va,locid,objid(%l));th u(setq`%va,custloc,uldefault(%l/D`CUSTLOC,%l,%#));th u(setq`%va,scene,get(%#/D`SCENE));th u(setq`%va,sceneactive,u(mysql,SELECT`ACTIVE_SCENES,%q<locid>,%q<custloc>));@select/inline cand(%q<cansql>,%q<scene>)=1,{th u(setq`%va,stat,u(mysql3,SELECT`SCENE_STATUS,%q<scene>))};th u(setq`%va,custrecp,u(canhear,uldefault(%l/D`CUSTRECP,lcon(%l),%#)));@select/inline cand(%q<cansql>,%q<scene>)=1,{th u(setq`%va,logged,u(FUN`ISLOGGED,objid(owner(%#)),%q<t1id>,%2,%q<scene>,elements(%q<stat>,2,chr(177)),elements(%q<stat>,1,chr(177)),iter(%q<custrecp>,objid(%i0))));@attach %!/INC`CHECKPC=u(firstof,get(%#/D`SCENE`SPOOF),owner(%#)),2,1},0,{th u(setq`%va,logged,0)};th u(setq`%va,basic,u(basicspeak`%va,if(%q<logged>,%q<t2>,%#),switch(%1,pose,:,semipose,;,say,",@emit,|)%2));@select/inline t(%q<logged>)=1,{@select/inline t(u(setr`%va,source,u(mysql,EXISTS`SOURCE,%q<logged>,%q<locid>,%q<custloc>,0)))=0,{@attach %!/INC`DOSQL=NEW`SOURCE/source,%q<logged>,%q<locid>,%q<custloc>,name(%q<locid>),0};@select/inline not(u(setr`%va,t2act,u(mysql,SELECT`ACTOR_ID,%q<scene>,%q<t2id>)))=1,{@attach %!/INC`DOSQL=NEW`ACTOR/t2act,%q<t2id>,%q<scene>};@attach %!/INC`DOSQL=NEW`POSE/pose,%q<source>,%q<t2act>,u(trimlines,%q<basic>);@attach %!/INC`DOSQL=INCREASE`POSE_COUNT,%q<t2act>;@attach/nobreak %!/INC`RECPOSE=objid(owner(%#)),%q<logged>,u(trimlines,%q<basic>)};th u(setq`%va,markup,u(markup`%va,%2,%q<custrecp>));@attach/nobreak %!/INC`HEADER=%q<logged>,%q<sceneactive>,%q<pose>;@attach/nobreak %!/INC`POTRECORD=%1,%q<markup>;@select/inline %va=PennMUSH,{@message %q<custrecp>=%q<basic>,%!/FUN`FORMATPOSE,##,if(%q<logged>,%q<t2>,%#),switch(%1,pose,:,semipose,;,say,",@emit,|),%q<markup>,%q<custrecp>},RhostMUSH,{@pemit/list %q<custrecp>=udefault(%!/FUN`FORMATPOSE,%q<basic>,##,if(%q<logged>,%q<t2>,%#),switch(%1,pose,:,semipose,;,say,",@emit,|),%q<markup>,%q<custrecp>)};@attach %!/INC`FOOTER=%q<logged>,%q<sceneactive>,%q<pose>;@select/inline cand(%q<cansql>,%q<scene>,not(%q<logged>))=1,{@attach %!/INC`MSG=ERROR: %q<logged>};@dolist/inline/nobreak u(lattr`%va,%!/OVERRIDE`EXTRA`*)={@attach %!/%i0}
@set u(cobj,scene)/OVERRIDE`IC=regexp

&Q`SELECT`SCENE_STATUS [u(cobj,scene)]=SELECT s.scene_status,t.objid FROM mush_scene AS s LEFT JOIN mush_actor AS own ON own.scene_id=s.scene_id AND own.actor_type=2 LEFT JOIN mush_thing AS t ON t.thing_id=own.player_id WHERE s.scene_id=? LIMIT 1
&Q`NEW`SOURCE [u(cobj,scene)]=INSERT INTO mush_action_source (scene_id,source_objid,source_vr,source_name,source_type) VALUES (?,?,?,?,?)
&Q`EXISTS`SOURCE [u(cobj,scene)]=SELECT source_id FROM mush_action_source WHERE scene_id=? and source_objid=? AND source_vr=? AND source_type=? LIMIT 1
&Q`NEW`POSE [u(cobj,scene)]=INSERT INTO mush_action (source_id,actor_id,date_created,action_text) VALUES (?,?,UTC_TIMESTAMP(),?)
&Q`INCREASE`POSE_COUNT [u(cobj,scene)]=UPDATE mush_actor SET pose_count=pose_count+1 WHERE actor_id=?
&Q`DECREASE`POSE_COUNT [u(cobj,scene)]=UPDATE mush_actor SET pose_count=pose_count-1 WHERE actor_id=?
&Q`SELECT`ACTOR_ID [u(cobj,scene)]=SELECT actor_id FROM mush_actor WHERE scene_id=? and player_id=? LIMIT 1
&Q`SELECT`ACTIVE_SCENES [u(cobj,scene)]=SELECT DISTINCT src.scene_id FROM mush_action_source AS src LEFT JOIN mush_scene AS s ON s.scene_id=src.scene_id WHERE src.source_objid=? AND src.source_vr=? AND src.source_type=0 AND s.scene_status=0

&OVERRIDE`IC2 [u(cobj,scene)]=$"*:@attach/command %!/OVERRIDE`IC=,say,%0
&OVERRIDE`IC3 [u(cobj,scene)]=$\:*:@attach/command %!/OVERRIDE`IC=,pose,%0
&OVERRIDE`IC4 [u(cobj,scene)]=$\;*:@attach/command %!/OVERRIDE`IC=,semipose,%0
@select/inline %va=PennMUSH,{@dolist/inline IC2 IC3 IC4=@set u(cobj,scene)/OVERRIDE`%i0=no_command}

&BASICSPEAK [u(cobj,scene)]=u(BASICSPEAK`%va,%0,%1)
&BASICSPEAK`PENNMUSH [u(cobj,scene)]=speak(%0,%1)
&BASICSPEAK`RHOSTMUSH [u(cobj,scene)]=parsestr(%1,%0,",",,owner(%#))

&FUN`FORMATPOSE [u(cobj,scene)]=u(speech`%va,%1,u(colormarkup,%0,%2%3,%1),%0,,IC,%4)

&FUN`ISLOGGED [u(cobj,scene)]=switch(%5,1,#-1 SCENE %3 IS PAUSED,3,#-1 SCENE %3 IS FINISHED,if(lt(words(%2),10),#-1 POSES REQUIRE 10 WORDS OR MORE,if(match(setunion(%6,iter(%6,get(%i0/D`SCENE`SPOOF))),%4),%3,#-1 SCENE %3 OWNER \([name(%4)]\) NOT PRESENT)))

&INC`HEADER [u(cobj,scene)]=@check u(isic,objid(owner(%#)));th u(setq`%va,poser,ansi(hw,u(moniker`%va,%:)) has posed[if(u(setr`%va,spoof,get(%#/D`SCENE`SPOOF)),%B\(as [u(moniker`%va,%q<spoof>)]\))]%b);th u(setq`%va,logheader,switch(1,not(words(%q<sceneactive>)),,cand(words(%q<sceneactive>),not(%q<logged>)),%[[ansi(hr,NO LOG: [u(itemize,%q<sceneactive>,%b,and,\,)])]%]%B,t(match(%q<sceneactive>,%q<logged>)),%[[ansi(hg,LOG: %0 - POSE: %2)]%]%B,));@dolist/inline u(setr`%va,footrecp,u(filter,poseheader,%q<custrecp>,%b,%b,%0,%1))={@select/inline t(u(player_config,##,IC,BORDERS))=1,{@pemit ##=u(header,%q<logheader>%q<poser>,##)},{@pemit ##=u(center,%q<logheader>%q<poser>,u(width`%va,##),%B)}}

&FIL`POSEHEADER [u(cobj,scene)]=cor(words(%2),t(u(player_config,owner(%0),IC,BORDERS)))
 
&INC`FOOTER [u(cobj,scene)]=@check u(isic,objid(owner(%#)));th u(setq`%va,poser,End of [ansi(hw,u(moniker`%va,objid(owner(%#))))]'s pose[if(u(setr`%va,spoof,get(%#/D`SCENE`SPOOF)),%B\(as [u(moniker`%va,%q<spoof>)]\))]%b);@dolist/inline %q<footrecp>={@select/inline t(u(player_config,##,IC,BORDERS))=1,{@pemit ##=u(subheader,%q<logheader>%q<poser>,##)}}

@@ --- POT SECTION

&INC`POTRECORD [u(cobj,scene)]=@check cand(u(isic,%#),not(get(%l/D`NOPOT)));th u(attrib_set,%l,u(setr`%va,potattr,D`POSES`[u(nextslot,%l,D`POSES)]),%1);&%q<potattr>`CUSTLOC %l=%2;&%q<potattr>`TYPE %l=switch(%0,@EMIT,|,SAY,",SEMIPOSE,;,POSE,:);&%q<potattr>`BY %l=owner(%#);&%q<potattr>`WHEN %l=secs();@switch/inline gt(u(setr`%va,count,u(nattr,%l/D`POSES`*)),80)=1,{@dolist/inline elements(u(sortattr,u(lattr,%l/D`POSES`*)),lnum(1,sub(%q<count>,80)))=@attach %!/WIPE=%l,##}

&INC`POT`MAIN [u(cobj,scene)]=@check cand(u(isic,%#),not(get(%l/D`NOPOT)))=@attach %!/INC`MSG=ERROR: +pot is disabled in this location.;@switch/inline default(%#/D`POT`MODE,0)=0,{@attach %!/INC`POT`LIST},1,{@attach %!/INC`POT`BRIEF}
&FIL`POSELOC [u(cobj,scene)]=strmatch(get(%1/%0`CUSTLOC),%2)

&FUN`POT`POSES [u(cobj,scene)]=u(filter,POSELOC,u(sortpot,u(lattr,%0/D`POSES`*)),%b,%b,%0,%2)

&SORTPOT [u(cobj,scene)]=u(SORTPOT`%va,%0,if(strlen(%1),%1,%B),if(strlen(%2),%2,%B))
&SORTPOT`PENNMUSH [u(cobj,scene)]=sortkey(#lambda/get(%l/\%0`WHEN),%0,n,%1,%2)
&SORTPOT`RHOSTMUSH [u(cobj,scene)]=sortby(#lambda/[lit([ncomp(get(%l/%0`WHEN),get(%l/%1`WHEN))])],%0,%1,%2)

&FUN`POT`POSERS [u(cobj,scene)]=setunion(iter(u(FUN`POT`POSES,%0,%1,%2),get(%l/%i0`BY)),)

&FUN`POT`LASTPOSE [u(cobj,scene)]=localize(last(u(filter,poseby,u(FUN`POT`POSES,%0,%1),%b,%b,%0,%2)))
&FIL`POSEBY [u(cobj,scene)]=strmatch(get(%1/%0`BY),%2)

&INC`POT`BRIEF [u(cobj,scene)]=@check cand(u(isic,%#),not(get(%l/D`NOPOT)))=@attach %!/INC`MSG=ERROR: +pot is disabled in this location.;@select/inline u(strfirstof,%0,get(%#/D`POT`MAX))=0,{th u(setq`%va,max,0)},>0,{th u(setq`%va,max,%0)},{th u(setq`%va,max,15)};@check words(u(setr`%va,poses,if(%q<max>,revwords(elements(revwords(u(FUN`POT`POSES,%l,u(%l/D`CUSTLOC,%#))),lnum(1,%q<max>))),u(FUN`POT`POSES,%l,u(%l/D`CUSTLOC,%#)))))=@attach %!/INC`MSG=No active RP in the room!;@pemit %#=u(HEADER,RP Activity for [u(moniker`%va,%l)]);@pemit %#=ansi(u(color,%#,POT,COLUMN_NAMES),align(20 4 4 [sub(u(width`%va,%#),31)],Name,Pose,Idle,Summary));@pemit %#=u(separator);@dolist/inline %q<poses>=@pemit %#=align(20 4 4 [sub(u(width`%va,%#),31)],u(pueblize,u(moniker`%va,get(%l/##`BY)),+pot/last [name(get(%l/##`BY))]),ansi(u(ryg,round(mul(fdiv(bound(sub(secs(),get(%l/##`WHEN)),0,3600),3600),100),0)),u(smalltime,sub(secs(),get(%l/##`WHEN)))),switch(idle(get(%l/##`BY)),-1,ansi(hx,Off),ansi(u(ryg,round(mul(fdiv(bound(idle(get(%l/##`BY)),0,3600),3600),100),0)),u(smalltime,idle(get(%l/##`BY))))),get(%l/##`SUMMARY));@pemit %#=u(SUBHEADER)

&INC`POT`LAST [u(cobj,scene)]=@check cand(u(isic,%#),not(get(%l/D`NOPOT)))=@attach %!/INC`MSG=ERROR: +pot is disabled in this location.;@attach %!/INC`CHECKPC=%0,1;@check strmatch(loc(%q<t1>),%l)=@attach %!/INC`MSG=%q<t1name> is not in the room!;@check strlen(u(setr`%va,pose,u(FUN`POT`LASTPOSE,%l,u(%l/D`CUSTLOC,%#),%q<t1>)))=@attach %!/INC`MSG=%q<t1name> hasn't posed in this room.;@pemit %#=u(header,%q<t1name>'s Last Pose [u(smalltime,u(setr`%va,ago,sub(secs(),get(%l/%q<pose>`WHEN))))] Ago);@pemit %#=u(FUN`FORMATPOSE,%#,%q<t1>,get(%l/%q<pose>`TYPE),u(trimlines,get(%l/%q<pose>)),IC,u(FUN`POT`POSERS,%l,u(%l/D`CUSTLOC,%#)));@pemit %#=u(subheader)

&INC`POT`MODE [u(cobj,scene)]=&D`POT`MODE %#=u(setr`%va,mode,not(get(%#/D`POT`MODE)));@attach %!/INC`MSG=+pot will now default to +pot/[if(%q<mode>,summary,list)]

&INC`POT`LIST [u(cobj,scene)]=@check cand(u(isic,%#),not(get(%l/D`NOPOT)))=@attach %!/INC`MSG=ERROR: +pot is disabled in this location.;@select/inline u(strfirstof,%0,get(%#/D`POT`MAX))=0,{th u(setq`%va,max,0)},>0,{th u(setq`%va,max,%0)},{th u(setq`%va,max,15)};@check words(u(setr`%va,poses,if(%q<max>,revwords(elements(revwords(u(FUN`POT`POSES,%l,u(%l/D`CUSTLOC,%#))),lnum(1,%q<max>))),u(FUN`POT`POSES,%l,u(%l/D`CUSTLOC,%#)))))=@attach %!/INC`MSG=No active RP in the room!;th u(setq`%va,players,u(lplayers,%l));@pemit %#=u(header,Recent Poses);@dolist %q<poses>={@pemit %#=u(separator,u(moniker`%va,get(%l/##`BY)) posed [ansi(c,trim(u(smalltime,sub(secs(),get(%l/##`WHEN)))))] Ago);@pemit %#=u(FUN`FORMATPOSE,%#,get(%l/##`BY),get(%l/##`TYPE),get(%l/##),u(lplayers,%l));@switch/inline #@=words(%q<poses>),{@pemit %#=u(subheader,End of Poses)}}

&INC`POT`MAX [u(cobj,scene)]=@check u(valnum,%0)=@attach %!/INC`MSG=ERROR: You must enter a whole number greater than 0 for your maximum poses!;&D`POT`MAX %#=%0;@attach %!/INC`MSG=You will now see only the last %0 poses in +pot.

&INC`POT`TOGGLE [u(cobj,scene)]=@check cor(controls(%#,%l),u(isadmin`%va,%#))=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`MSG`ROOM=Pot will [if(u(setr`%va,mode,not(get(%l/D`NOPOT))),no longer,now)]%bfunction in this location.,lcon(%l);&D`NOPOT %l=%q<mode>

&Q`GET`ACTIVEHERE [u(cobj,scene)]=SELECT scene_id from $SCENES$ WHERE room_objid=? AND room_custloc=? AND scene_state='0'

&Q`GET`SCENELOC [u(cobj,scene)]=SELECT room_objid FROM $SCENES$ WHERE scene_id=?
&Q`GET`SCENECUSTLOC [u(cobj,scene)]=SELECT room_custloc FROM $SCENES$ WHERE scene_id=?

&Q`GET`SCENESTATE [u(cobj,scene)]=SELECT scene_state FROM $SCENES$ WHERE scene_id=?

&INC`SUMMARY`SILENT [u(cobj,scene)]=@attach %!/INC`SUMMARY`MAIN=%0,%1,%2,1
&INC`SUMMARY`MAIN [u(cobj,scene)]=@stop gt(strlen(%2),1024)=@attach %!/INC`MSG=That summary is too long.;@select/inline %3=1,{@pemit %#=ansi(hx,>>> SILENT SUMMARY: [u(moniker`%va,%#)] - %2)},{@pemit/list uldefault(%l/D`CUSTRECP,lcon(%l),%#)=ansi(h,>>> SUMMARY - [u(moniker`%va,%#)] <<< - %2)};@select/inline strlen(u(setr`%va,pose,u(FUN`POT`LASTPOSE,%l,u(%l/D`CUSTLOC,%#),owner(%#))))=>0,{&%q<pose>`SUMMARY %l=%2}

@@ --- MERGE SECTION
&MERGE [u(cobj,scene)]=@attach %!/INC`DOSQL=MERGE`ACTORS,%0,%1;@attach %!/INC`DOSQL=MERGE`RUNNERS,%0,%1;@attach %!/INC`DOSQL=MERGE`PARTICIPANTS,%0,%1;

&Q`MERGE`ACTORS [u(cobj,scene)]=UPDATE mush_actor SET player_id=? WHERE player_id=?
&Q`MERGE`RUNNERS [u(cobj,scene)]=UPDATE mush_runner SET player_id=? WHERE player_id=?
&Q`MERGE`PARTICIPANTS [u(cobj,scene)]=UPDATE mush_participant SET player_id=? WHERE player_id=?

@@ &INC`LOG`MERGE [u(cobj,scene)]=@check u(iswizard,%#)=@attach %!/INC`MSG=ERROR: Permission Denied. Wizard only.;@attach %!/INC`CHECKPC=%0,2,1;@attach %!/INC`VALID`POSINT=%1,Log ID;@check strlen(u(setr`%va,oldobj,u(mysql,SELECT`PLAYER_OBJID,%q<value>)))=@attach %!/INC`MSG=ERROR: That ID does not exist.;@stop isobjid(%q<oldobj>)=@attach %!/INC`MSG=ID '%q<value>' is currently assigned to %q<oldobj> - [name(%q<oldobj>)]. It cannot be merged with another.;@attach %!/INC`VERIFY={[ansi(h,WARNING:)] This will assign Log ID %q<value> to %q<t2name>. All poses, scenes, plots, and other SceneSys data attached to their Current ID, if they have one, shall be converted to the old ID. This cannot be undone. Continue? Enter the same command again to verify.},MERGE %q<oldobj> %q<value>;

@@ --- LOG SECTION -----

&INC`LOG`ID [u(cobj,scene)]=@select/inline t(strlen(%0))=1,{@attach %!/INC`CHECKPC=%0,2,1},0,{@attach %!/INC`CHECKPC=%#,2,1};@attach %!/INC`MSG=The Unique ID for %q<t2name> is: [ansi(h,%q<t2id>)]

&INC`LOG`LOUDCREATE [u(cobj,scene)]=@attach %!/INC`LOG`CREATE=%0,%1,%2,1
&INC`LOG`CREATE [u(cobj,scene)]=@attach %!/INC`CHECKPC=u(firstof,get(%#/D`SCENE`SPOOF),%:),2,1;@check u(isapproved,%q<t2>)=@attach %!/INC`MSG=ERROR: You are not approved!;@check u(isic,%#)=@attach %!/INC`MSG=ERROR: This location is not IC!;th u(setq`%va,title,%0[if(strlen(%1),=%1)]);@attach %!/INC`DOSQL=NEW`SCENE/scene,%q<title>;@attach %!/INC`DOSQL=SET`ACTOR_TYPE,2,%q<scene>,%q<t2id>;@attach %!/INC`MSG`ROOM=Created NEW Scene %q<scene>: [u(strfirstof,%q<title>,<untitled>)]. Newcomers must use [u(pueblize,+log/join %q<scene>,+log/join %q<scene>)] to join it!,u(setr`%va,recip,uldefault(%l/D`CUSTRECP,lcon(%l),%#));@dolist/inline/nobreak u(setr`%va,finalrecip,setunion(u(filter,NOTACTIVE,%q<recip>),%#))={&D`SCENE ##=%q<scene>;@select/inline t(get(##/D`SCENE`SPOOF))=1,{@attach %!/INC`MSG=ALERT: You are currently set to Spoof as: [u(moniker`%va,get(##/D`SCENE`SPOOF))].,##}};@attach %!/INC`MSG`ROOM=iter(u(sortname,%q<finalrecip>),u(moniker`%va,%i0),%b,\,%b) have been Auto-Joined to Scene %q<scene>!;@select/inline t(%3)=1,{@attach %!/INC`MSG`CHAN=[ansi(h,u(moniker`%va,%#))] created a Scene at [if(match(u(u(cobj,grid)/FUN`LISTIC),%l),u(pueblize,%l - [name(%l)],+port %l),name(%l))]: Scene %q<scene>[if(strlen(%q<title>),:%b%q<title>)],u(game_config,channels,roleplay),,1,,1}

th u(NEWCONF,config,CHANNELS,ROLEPLAY,,Channel to announce scenes on?,LIST)

&FIL`NOTACTIVE [u(cobj,scene)]=cand(not(get(%0/D`SCENE)),not(get(%0/D`OBSERVER)),hasflag(%0,CONNECTED))

&Q`NEW`SCENE [u(cobj,scene)]=INSERT INTO mush_scene (title,date_created) VALUES (?,UTC_TIMESTAMP())
&Q`SET`ACTOR_TYPE [u(cobj,scene)]=INSERT INTO mush_actor (actor_type,scene_id,player_id) VALUES (?,?,?) ON DUPLICATE KEY UPDATE actor_type=VALUES(actor_type)
&Q`NEW`ACTOR [u(cobj,scene)]=INSERT INTO mush_actor (player_id,scene_id) VALUES (?,?)

&INC`MESSAGE [u(cobj,scene)]=@attach %!/INC`MSG`ROOM=%1,setunion(setunion(lockfilter(D`SCENE:%0,u(mysql,get`objidsinscene,%0)),%:),iter(uldefault(%l/D`CUSTRECP,lcon(%l),%#),objid(%i0)))
&INC`MSGSCENE [u(cobj,scene)]=@attach %!/INC`MSG`ROOM=%1,setunion(setunion(lockfilter(D`SCENE:%0,setunion(%:,u(mysql,get`objidsinscene,%0))),%:),iter(uldefault(%l/D`CUSTRECP,lcon(%l),%#),objid(%i0)))

&Q`GET`OBJIDSINSCENE [u(cobj,scene)]=SELECT t.objid FROM mush_actor AS act LEFT JOIN mush_thing AS t ON act.player_id=t.thing_id WHERE act.scene_id=?

&INC`LOG`JOIN [u(cobj,scene)]=@check u(isapproved,%#)=@attach %!/INC`MSG=ERROR: You are not approved!;@check strlen(%0)=@attach %!/INC`MSG=ERROR: No Scene entered to join!;@select/inline  u(valnum,%0)=0,{@attach %!/INC`CHECKPC=%0,2;@check u(valnum,u(setr`%va,scene,get(%q<t2>/D`SCENE)))=@attach %!/INC`MSG=%q<t2name> is not joined to a scene.},1,{@check u(setr`%va,scene,u(mysql,GET`SCENE_EXISTS_ACTIVE,%0))=@attach %!/INC`MSG=Scene '%0' does not exist or is not Active.};@attach %!/WIPE=%#,D`SCENE;&D`SCENE %#=%q<scene>;@attach %!/INC`MESSAGE=%q<scene>,u(moniker`%va,%#) joined Scene %q<scene>!

&Q`GET`SCENE_EXISTS_ACTIVE [u(cobj,scene)]=SELECT scene_id FROM mush_scene WHERE scene_id=? and scene_status=0 AND is_deleted=0

&INC`LOG`LEAVE [u(cobj,scene)]=@check u(setr`%va,scene,get(%#/D`SCENE))=@attach %!/INC`MSG=ERROR: You are not in any scenes!;@attach %!/INC`MESSAGE=%q<scene>,u(moniker`%va,%#) has left Scene %q<scene>;&D`SCENE %#

&INC`OWNCHECK [u(cobj,scene)]=@check cor(u(isadmin`%va,%#),eq(u(setr`%va,ownid,u(mysql,get`ownerid,%0)),%1),if(%2,eq(u(mysql,get`plotownerid,%2),%1)))=@attach %!/INC`MSG=Permission denied.
&Q`GET`OWNERID [u(cobj,scene)]=SELECT player_id from $SCENES$ WHERE scene_id=?
&Q`GET`PLOTOWNERID [u(cobj,scene)]=SELECT player_id from $PLOTS$ WHERE plot_id=?

&INC`LOG`SPOOF [u(cobj,scene)]=@select/inline strlen(%0)=>0,{@select/inline u(isadmin`%va,%#)=1,{@attach %!/INC`CHECKPC=%0,2;th u(setq`%va,spoof,%q<t2objid>)},0,{@check u(setr`%va,accid,u(accid,objid(owner(%#))))=@attach %!/INC`MSG=You don't have an account!;@check isdbref(u(setr`%va,spoof,objid(u(namegrab,u(alts,owner(%#)),%0))))=@attach %!/INC`MSG=ERROR: '%0' is not one of your alts.};&D`SCENE`SPOOF %#=%q<spoof>;@attach %!/INC`MSG=Your poses will now appear to be from [name(%q<spoof>)].},{&D`SCENE`SPOOF %#;@attach %!/INC`MSG=Your poses will appear to be from yourself.}

&INC`VALID`SCENE [u(cobj,scene)]=@check strlen(%0)=@attach %!/INC`MSG=Scene ID field empty.;@check u(valnum,%0)=@attach %!/INC`MSG=Scenes must be addressed by their IDs.;@check gt(u(setr`%va,scene,u(mysql,SELECT`SCENE_EXISTS[if(%6,1)],%0,)),0)=@attach %!/INC`MSG=Scene '%0' could not be found.;
&Q`SELECT`SCENE_EXISTS [u(cobj,scene)]=SELECT scene_id FROM mush_scene WHERE scene_id=? AND is_deleted=0
&Q`SELECT`SCENE_EXISTS1 [u(cobj,scene)]=SELECT scene_id FROM mush_scene WHERE scene_id=?

&INC`LOADSCENE [u(cobj,scene)]=th u(setq`%va,data,u(mysql3,LOAD`SCENE,u(firstof,%q<t2id>,%q<t1id>),u(firstof,%q<t2id>,%q<t1id>),%q<scene>));th null(iter(scene title pitch outcome post created scheduled started finished status logooc ownid ownobjid ownname mystat,u(setq`%va,%i0,elements(%q<data>,inum(0),chr(177)))))

&Q`LOAD`SCENE [u(cobj,scene)]=SELECT s.scene_id,s.title,s.pitch,s.outcome,s.post_id,UNIX_TIMESTAMP(s.date_created),UNIX_TIMESTAMP(s.date_scheduled),UNIX_TIMESTAMP(s.date_started),UNIX_TIMESTAMP(s.date_finished),s.scene_status,s.log_ooc,own.player_id,t.objid,t.object_name,a.actor_type FROM mush_scene AS s LEFT JOIN mush_actor AS own ON s.scene_id=own.scene_id AND own.actor_type=2 LEFT JOIN mush_thing AS t ON t.thing_id=own.player_id LEFT JOIN mush_actor AS a ON a.scene_id=s.scene_id AND a.player_id=? LEFT JOIN mush_thing AS t2 ON t2.thing_id=a.player_id AND a.player_id=? WHERE s.scene_id=? LIMIT 1

&INC`LOG`TITLE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@check strlen(%1)=@attach %!/INC`MSG=ERROR: Title field empty!;@attach %!/INC`DOSQL=SET`TITLE,%1,%q<scene>;@attach %!/INC`MSGSCENE=%q<scene>,[u(moniker`%va,%#)] changed Scene %q<scene>'s Title to: %1;@attach %!/INC`UPDATEBB
&Q`SET`TITLE [u(cobj,scene)]=UPDATE mush_scene SET title=? WHERE scene_id=?

&INC`LOG`OUTCOME [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@check strlen(%1)=@attach %!/INC`MSG=ERROR: Outcome field empty!;@attach %!/INC`DOSQL=SET`OUTCOME,%1,%q<scene>;@attach %!/INC`MSGSCENE=%q<scene>,[u(moniker`%va,%#)] changed Scene %q<scene>'s Outcome to: %1
&Q`SET`OUTCOME [u(cobj,scene)]=UPDATE mush_scene SET outcome=? WHERE scene_id=?

&INC`LOG`PITCH [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@check strlen(%1)=@attach %!/INC`MSG=ERROR: Pitch field empty!;@attach %!/INC`DOSQL=SET`Pitch,u(setr`%va,pitch,%1),%q<scene>;@attach %!/INC`MSGSCENE=%q<scene>,[u(moniker`%va,%#)] changed Scene %q<scene>'s Pitch to: %1;@attach %!/INC`UPDATEBB
&Q`SET`PITCH [u(cobj,scene)]=UPDATE mush_scene SET pitch=? WHERE scene_id=?

&INC`UPDATEBB [u(cobj,scene)]=th u(setq`%va,bb,u(game_config,SCENESYS,BOARD));@check cand(isdbref(%q<bb>),%q<post>);&%q<post> %q<bb>=u(FUN`FORMATPOST,%q<title>,u(moniker`%va,%q<ownobjid>),u(fancytime`%va,%q<scheduled>,u(cobj,scene)),%q<pitch>);&%q<post>`HDR %q<bb>=#%q<scene>: %q<title>;


&INC`LOG`FINISH [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=u(strfirstof,%0,get(%#/D`SCENE));@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`DOSQL=SET`FINISH,%q<scene>;@attach %!/INC`MESSAGE=%q<scene>,[u(moniker`%va,%#)] has marked Scene %q<scene> Finished!;@attach %!/INC`MSG=Your scene is available at: [u(weblink,http://[u(game_config,SCENESYS,URL)][u(game_config,SCENESYS,PATH)]%q<scene>)];@attach %!/INC`CLEANUPSCENE=%q<scene>
&INC`LOG`PAUSE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=u(strfirstof,%0,get(%#/D`SCENE));@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`DOSQL=SET`STATE,1,%q<scene>;@attach %!/INC`MESSAGE=%q<scene>,[u(moniker`%va,%#)] has marked Scene %q<scene> Paused!;@attach %!/INC`CLEANUPSCENE=%q<scene>
&INC`LOG`CONTINUE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=u(strfirstof,%0,get(%#/D`SCENE));@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`DOSQL=SET`STATE,0,%q<scene>;@attach %!/INC`MESSAGE=%q<scene>,[u(moniker`%va,%#)] has continued Scene %q<scene>! It will now record new poses.;@attach %!/INC`LOG`JOIN=%q<scene>

&INC`LOG`LOUDSTART [u(cobj,scene)]=@attach %!/INC`LOG`START=%0,%1,%2,1
&INC`LOG`START [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=u(strfirstof,%0,get(%#/D`SCENE));@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),eq(2,%q<mystat>))=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`DOSQL=SET`STATE,0,%q<scene>;@attach %!/INC`MESSAGE=%q<scene>,[u(moniker`%va,%#)] has begun Scene %q<scene>!;th u(setq`%va,recip,uldefault(%l/D`CUSTRECP,lcon(%l),%#));@dolist/inline/nobreak u(setr`%va,finalrecip,setunion(u(filter,NOTACTIVE,%q<recip>),%#))={&D`SCENE ##=%q<scene>;@select/inline t(get(##/D`SCENE`SPOOF))=1,{@attach %!/INC`MSG=ALERT: You are currently set to Spoof as: [u(moniker`%va,get(##/D`SCENE`SPOOF))].,##}};@attach %!/INC`MSG`ROOM=iter(u(sortname,%q<finalrecip>),u(moniker`%va,%i0),%b,\,%b) have been Auto-Joined to Scene %q<scene>!;@select/inline t(%3)=1,{@attach %!/INC`MSG`CHAN=[ansi(h,u(moniker`%va,%#))] started a Scene at [if(match(u(u(cobj,grid)/FUN`LISTIC),%l),u(pueblize,%l - [name(%l)],+port %l),name(%l))]: Scene %q<scene>[if(strlen(%q<title>),:%b%q<title>)],u(game_config,channels,roleplay),,1,,1}

&Q`SET`STATE [u(cobj,scene)]=UPDATE mush_scene SET scene_status=? WHERE scene_id=?
&Q`SET`FINISH [u(cobj,scene)]=UPDATE mush_scene SET date_finished=UTC_TIMESTAMP(),scene_status=3 WHERE scene_id=?

&INC`CLEANUPSCENE [u(cobj,scene)]=@dolist/inline u(choosegame,lsearch(all,type,player,elock,D`SCENE:%0),search(TYPE=PLAYERS,EVAL=\[eq(get(##/D`SCENE),%0)\]))=@attach %!/WIPE=##,D`SCENE

&INC`LOG`UNDO [u(cobj,scene)]=@attach %!/INC`CHECKPC=u(firstof,get(%#/D`SCENE`SPOOF),%:),2,1;@attach %!/INC`VALID`SCENE=get(%#/D`SCENE);@attach %!/INC`LOADSCENE;@check eq(%q<status>,0)=@attach %!/INC`MSG=That scene is not Active!;@select/inline strlen(%1)=0,{@check gt(u(setr`%va,pose,u(mysql,SELECT`LAST_POSE,%q<scene>,%q<t2id>,0)),0)=@attach %!/INC`MSG=You have no poses that can be undone.},{@check gt(u(setr`%va,pose,u(mysql,SELECT`POSE_EXISTS,%q<scene>,%q<t2id>,0,%1)),0)=@attach %!/INC`MSG=ERROR: No active pose from you with ID '%1'.};th u(setr`%va,act_id,u(mysql,SELECT`ACTOR_ID,%q<scene>,%q<t2id>));@attach %!/INC`DOSQL=SET`POSE_DELETED,1,%q<pose>;@attach %!/INC`DOSQL=DECREASE`POSE_COUNT,%q<act_id>;@attach %!/INC`MSGSCENE=%q<scene>,[u(moniker`%va,%#)] undid %p previous pose: %q<pose>

&INC`LOG`REDO [u(cobj,scene)]=@attach %!/INC`CHECKPC=u(firstof,get(%#/D`SCENE`SPOOF),%:),2,1;@attach %!/INC`VALID`SCENE=get(%#/D`SCENE);@attach %!/INC`LOADSCENE;@check eq(%q<status>,0)=@attach %!/INC`MSG=That scene is not Active!;@select/inline strlen(%1)=0,{@check gt(u(setr`%va,pose,u(mysql,SELECT`LAST_POSE,%q<scene>,%q<t2id>,1)),0)=@attach %!/INC`MSG=You have no deleted poses that can be restored.},{@check gt(u(setr`%va,pose,u(mysql,SELECT`POSE_EXISTS,%q<scene>,%q<t2id>,1,%1)),0)=@attach %!/INC`MSG=ERROR: No deleted pose from you with ID '%1'.};th u(setr`%va,act_id,u(mysql,SELECT`ACTOR_ID,%q<scene>,%q<t2id>));@attach %!/INC`DOSQL=SET`POSE_DELETED,0,%q<pose>;@attach %!/INC`DOSQL=INCREASE`POSE_COUNT,%q<act_id>;@attach %!/INC`MSGSCENE=%q<scene>,[u(moniker`%va,%#)] restored %p previous undone pose: %q<pose>

&INC`LOG`EDIT [u(cobj,scene)]=@attach %!/INC`CHECKPC=u(firstof,get(%#/D`SCENE`SPOOF),%:),2,1;@attach %!/INC`VALID`SCENE=get(%#/D`SCENE);@attach %!/INC`LOADSCENE;@check eq(%q<status>,0)=@attach %!/INC`MSG=That scene is not Active!;@check gt(u(setr`%va,pose,u(mysql,SELECT`POSE_EXISTS,%q<scene>,%q<t2id>,0,%0)),0)=@attach %!/INC`MSG=ERROR: No active pose from you with ID '%0'.;@check strlen(before(%1,/))=@attach %!/INC`MSG=ERROR: No text entered to alter!;th u(setq`%va,oldtext,u(mysql,SELECT`TEXT,%q<pose>));@check strlen(u(setr`%va,changed,edit(%q<oldtext>,before(%1,/),after(%1,/))))=@attach %!/INC`MSG=ERROR: Cannot alter a Pose to nothing.;@stop strmatch(digest(md5,%q<oldtext>),digest(md5,%q<changed>))=@attach %!/INC`MSG=ERROR: Nothing appears to have changed. Check your Before and After and try again.;@attach %!/INC`DOSQL=EDIT`POSE_TEXT,%q<changed>,%q<pose>;@attach %!/INC`MSGSCENE=%q<scene>,[u(moniker`%va,%#)] edited %p previous pose: %q<pose>. ALTERED: >>[before(%1,/)]<< TO >>[after(%1,/)]<<

&Q`SELECT`LAST_POSE [u(cobj,scene)]=SELECT max(act.action_id) FROM mush_action AS act LEFT JOIN mush_actor as a ON act.actor_id=a.actor_id LEFT JOIN mush_action_source AS src ON src.source_id=act.source_id WHERE src.scene_id=? and a.player_id=? AND act.is_deleted=?
&Q`SELECT`POSE_EXISTS [u(cobj,scene)]=SELECT act.action_id FROM mush_action AS act LEFT JOIN mush_actor AS a ON act.actor_id=a.actor_id LEFT JOIN mush_action_source AS src ON src.source_id=act.source_id WHERE src.scene_id=? and a.player_id=? and act.is_deleted=? AND act.action_id=?
&Q`SET`POSE_DELETED [u(cobj,scene)]=UPDATE mush_action SET is_deleted=? WHERE action_id=?
&Q`EDIT`POSE_TEXT [u(cobj,scene)]=UPDATE mush_action SET action_text=? WHERE action_id=?
&Q`SELECT`TEXT [u(cobj,scene)]=SELECT action_text FROM mush_action WHERE action_id=?

&INC`LOG`RECALL [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=u(strfirstof,%0,get(%#/D`SCENE));@select/inline gt(strlen(%1),0)=1,{@check u(valnum,%1)=@attach %!/INC`MSG=The number of poses must be a whole, positive number.;th u(setq`%va,poses,%1)},0,{th u(setq`%va,poses,15)};th u(setq`%va,dbs,u(lwhoid));th [u(setq`%va,quote,ansi(u(player_config`%va,%#,IC,QUOTES),"))][u(setq`%va,speechcol,u(player_config`%va,%#,IC,SPEECH))];@pemit %#=u(HEADER,Scene %q<scene>[if(strlen(%q<title>),:%B%q<title>)]);@dolist/inline revwords(u(mysql,SELECT`RECALL_IDS,%q<scene>,%q<poses>))={th u(setq`%va,data,u(mysql3,LOAD`POSE,##));@pemit %#=u(SEPARATOR,if(isobjid(elements(%q<data>,9,chr(177))),u(moniker`%va,elements(%q<data>,9,chr(177))),ansi(hx,elements(%q<data>,10,chr(177)))) Posed on [u(fancytime`%va,elements(%q<data>,2,chr(177)),%#)]);@pemit %#=u(colormarkup,%#,u(markup,regeditalli(elements(%q<data>,3,chr(177)),v(REG`SPEECH),%q<quote>[ansi(%q<speechcol>,$1)]%q<quote>),%q<dbs>),%1)};@pemit %#=u(FOOTER)

&Q`SELECT`RECALL_IDS [u(cobj,scene)]=SELECT act.action_id FROM mush_action AS act LEFT JOIN mush_action_source AS src ON act.source_id=src.source_id WHERE act.is_deleted=0 AND src.scene_id=? ORDER BY act.action_id DESC LIMIT ?
&Q`LOAD`POSE [u(cobj,scene)]=SELECT act.action_id,UNIX_TIMESTAMP(act.date_created),act.action_text,act.action_type,src.source_objid,src.source_name,src.source_type,a.actor_type,t.objid,t.object_name FROM mush_action AS act LEFT JOIN mush_action_source AS src ON act.source_id=src.source_ID LEFT JOIN mush_actor AS a on a.actor_id=act.actor_id LEFT JOIN mush_thing AS t on t.thing_id=a.player_id WHERE act.action_id=?

&INC`LOG`MAIN [u(cobj,scene)]=@select/inline t(strlen(%0))[isint(%0)]=0*,{@attach %!/INC`LOG`PLAYERLIST=%:,%1,%2,0},11,{@attach %!/INC`LOG`DETAILS=%0,%1,%2,%3},10,{@attach %!/INC`LOG`PLAYERLIST=%0,%1,%2,0}

&INC`LOG`OLD [u(cobj,scene)]=@attach %!/INC`LOG`PLAYERLIST=%0,%1,%2,4

&INC`LOG`PLAYERLIST [u(cobj,scene)]=@attach %!/INC`CHECKPC=u(strfirstof,%0,%#),2,1;@pemit %#=u(HEADER,if(strmatch(%q<t2objid>,%:),Your,%q<t2name>'s) [if(%3,Finished,Incomplete)] Scenes);th u(setq`%va,total,u(mysql,COUNT`SCENEMINE,if(%3,=3,<3),%q<t2id>));th u(setq`%va,page,bound(%q<page>,1,u(setr`%va,max,firstof(ceil(fdiv(%q<total>,30)),1))));th u(setq`%va,offset,mul(30,sub(%q<page>,1)));@pemit %#=ansi(u(color,%#,SCENESYS,COLUMN_NAMES),align(4 41 20 10,ID,Title,Owner,if(%3,Date,Status)));@pemit %#=u(SEPARATOR);@dolist/inline/delimit [chr(176)] [u(mysql3,LOAD`SCENEMINE,if(%3,=3,<3),%q<t2id>,%q<offset>)]={@pemit %#=align(4 41 20 10,u(pueblize,elements(%i0,1,chr(177)),+log [elements(%i0,1,chr(177))]),elements(%i0,2,chr(177)),if(isobjid(elements(%i0,3,chr(177))),u(moniker`%va,elements(%i0,3,chr(177))),ansi(hx,elements(%i0,4,chr(177)))),if(%3,u(choosegame,timefmt($m/$d/$y,elements(%i0,7,chr(177)),u(gettz,%#)),ptimefmt($m/$d/$y,elements(%i0,7,chr(177)),u(gettz,%#))),switch(elements(%i0,7,chr(177)),0,Active,1,Paused,2,Unfinished,3,Finished,???)))};@pemit %#=u(FOOTER,if(gt(%q<page>,1),ansi(hg,u(pueblize,<,+log[if(%3,/old)]/[sub(%q<page>,1)] %q<t2>)),ansi(hx,<))%BPage %q<page> of [bound(%q<max>,1)]%B[if(lt(%q<page>,%q<max>),ansi(hg,u(pueblize,>,+log[if(%3,/old)]/[add(%q<page>,1)] %q<t2>)),ansi(hx,>))])

&Q`COUNT`SCENEMINE [u(cobj,scene)]=SELECT count(a.scene_id) FROM mush_actor AS a LEFT JOIN mush_scene AS s ON s.scene_id=a.scene_id WHERE s.scene_status! AND a.player_id=? AND s.is_deleted=0
&Q`LOAD`SCENEMINE [u(cobj,scene)]=SELECT a.scene_id,s.title,t.objid,t.object_name,s.scene_status,UNIX_TIMESTAMP(s.date_created),UNIX_TIMESTAMP(s.date_finished),s.outcome FROM mush_actor AS a LEFT JOIN mush_scene AS s ON s.scene_id=a.scene_id LEFT JOIN mush_actor as a2 ON a2.scene_id=s.scene_id AND a2.actor_type=2 LEFT JOIN mush_thing as t ON a2.player_id=t.thing_id WHERE s.scene_status! AND a.player_id=? AND s.is_deleted=0 ORDER BY s.scene_id LIMIT 30 OFFSET ?

&INC`LOG`WITH [u(cobj,scene)]=@attach %!/INC`CHECKPC=%0,2,1;@attach %!/INC`CHECKPC=u(strfirstof`%va,%1,%#),3,1;@check words(u(setr`%va,withlist,u(mysql3,GET`SCENESWITH,%q<t2id>,%q<t3id>)),chr(176))=@attach %!/INC`MSG=Oops! No scenes in common!;@pemit %#=u(header,Scenes Together: %q<t2name> and %q<t3name>);@pemit %#=ansi(u(color,%#,SCENE,COLUMN_NAMES),align(6 30 40,ID,Title,Participants));@pemit %#=u(separator);@dolist/inline/delimit [chr(176)] %q<withlist>={@pemit %#=align(6 30 40,u(pueblize,elements(%i0,1,chr(177)),+log [elements(%i0,1,chr(177))]),elements(%i0,2,chr(177)),iter(u(mysql3,GET`SCENEWITHNAMES,elements(%i0,1,chr(177))),%i0,chr(176),\,%b))};@pemit %#=u(footer,Total: [words(%q<withlist>,chr(176))] Scenes)

&Q`GET`SCENESWITH [u(cobj,scene)]=SELECT s.scene_id,s.title FROM mush_actor AS act LEFT JOIN mush_scene AS s ON s.scene_id=act.scene_id WHERE act.player_id IN(?,?) AND act.pose_count>0 AND s.is_deleted=0 GROUP BY act.scene_id HAVING COUNT(DISTINCT act.player_id)=2
&Q`GET`SCENEWITHDET [u(cobj,scene)]=SELECT title FROM mush_scene where scene_id=?
&Q`GET`SCENEWITHNAMES [u(cobj,scene)]=SELECT distinct t.object_name FROM mush_actor AS a LEFT JOIN mush_thing AS t ON a.player_id=t.thing_id WHERE a.scene_id=? AND a.pose_count>0 ORDER by t.object_name

&INC`LOG`EXCLUDE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=get(%#/D`SCENE);@attach %!/INC`LOADSCENE;@attach %!/INC`CHECKPC=u(firstof,get(%#/D`SCENE`SPOOF),%:),2,1;th u(setq`%va,exclude,not(u(mysql,GET`EXCLUDE,%q<scene>,%q<t2id>)));@attach %!/INC`DOSQL=SET`EXCLUDE,%q<exclude>,%q<scene>,%q<t2id>;@attach %!/INC`MSGSCENE=%q<scene>,{[u(moniker`%va,%#)] marked %oself [if(%q<exclude>,excluded,included)] in Scene %q<scene> for Reports!}

&Q`SET`EXCLUDE [u(cobj,scene)]=INSERT INTO mush_actor (actor_exclude,scene_id,player_id) VALUES (?,?,?) ON DUPLICATE KEY UPDATE actor_exclude=VALUES(actor_exclude)

&Q`GET`EXCLUDE [u(cobj,scene)]=SELECT exclude FROM $PARTICIPANTS$ WHERE scene_id=? AND player_id=? LIMIT 1

&INC`LOADSCENE`PLOT [u(cobj,scene)]=th u(setq`%va,plots,u(mysql3,LOAD`SCENE_PLOTS,%q<scene>))
&Q`LOAD`SCENE_PLOTS [u(cobj,scene)]=SELECT p.plot_id,p.title,p.plot_type,p.plot_status,UNIX_TIMESTAMP(p.date_start),UNIX_TIMESTAMP(p.date_end),r.player_id,t.objid,t.object_name FROM mush_plot_link AS l LEFT JOIN mush_plot AS p ON l.plot_id=p.plot_id LEFT JOIN mush_runner AS r ON r.plot_id=p.plot_id AND runner_type=2 LEFT JOIN mush_thing AS t ON t.thing_id=r.player_id WHERE l.scene_id=? ORDER BY p.plot_id

&INC`LOADSCENE`LOCATIONS [u(cobj,scene)]=th u(setq`%va,locs,u(mysql3,LOAD`SCENE_LOCATIONS,%q<scene>))
&Q`LOAD`SCENE_LOCATIONS [u(cobj,scene)]=SELECT s.source_objid,s.source_name FROM mush_action_source as s WHERE s.scene_id=? AND s.source_type=0 ORDER BY s.source_name

&INC`LOADSCENE`ACTORS [u(cobj,scene)]=th u(setq`%va,actors,u(mysql3,LOAD`SCENE_ACTORS,%q<scene>))
&Q`LOAD`SCENE_ACTORS [u(cobj,scene)]=SELECT a.player_id,t.objid,t.object_name,a.actor_type,a.actor_status,a.actor_exclude,a.pose_count FROM mush_actor AS a LEFT JOIN mush_action AS act ON a.actor_id=act.actor_id LEFT JOIN mush_thing AS t ON a.player_id=t.thing_id WHERE a.scene_id=? GROUP BY a.actor_id HAVING a.actor_status>0 OR a.actor_type>0 OR a.pose_count>0 ORDER BY a.actor_type DESC,a.actor_status DESC,t.object_name ASC

&INC`LOADSCENE`REPORTS [u(cobj,scene)]=th u(setq`%va,reports,u(mysql3,LOAD`SCENE_REPORTS,%q<scene>));
&Q`LOAD`SCENE_REPORTS [u(cobj,scene)]=

&INC`LOG`DETAILS [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@dolist/inline PLOT LOCATIONS ACTORS REPORTS={@attach %!/INC`LOADSCENE`%i0};@pemit %#=u(HEADER,Scene %q<scene>[if(strlen(%q<title>),:%B%q<title>)]);@dolist/inline HEADER PLOTS REPORTS ACTORS URL={@attach %!/INC`LOG`DETAILS`%i0};@pemit %#=u(FOOTER)

&INC`LOG`DETAILS`HEADER [u(cobj,scene)]=@pemit %#=u(SUBHEADER,Details);@pemit %#=ansi(h,Pitch:)%B%q<pitch>;@pemit %#=ansi(h,Started:) [if(%q<started>,u(fancytime`%va,%q<started>,%#),N/A)]%R[ansi(h,Outcome:)] %q<outcome>%R[ansi(h,Status:)] [switch(%q<status>,0,Active,1,Paused,2,Scheduled,3,Finished)];@select/inline strlen(%q<locs>)=>0,{@pemit %#=[ansi(h,Locations:)]%B[iter(%q<locs>,if(isobjid(elements(%i0,2,chr(177))),u(moniker`%va,elements(%i0,2,chr(177))),ansi(hx,elements(%i0,2,chr(177)))),chr(176),\,%b)]}

&INC`LOG`DETAILS`ACTORS [u(cobj,scene)]=@pemit %#=u(SUBHEADER,Players);@pemit %#=ansi(u(color,%#,SCENE,COLUMN_NAMES),align(30 30 15,ansi(h,Name),ansi(h,Status),ansi(h,Poses)));@pemit %#=u(SEPARATOR);@dolist/inline/delimit [chr(176)] %q<actors>={@pemit %#=align(30 30 15,if(isobjid(elements(%i0,2,chr(177))),u(getproperty,elements(%i0,2,chr(177)),banner),ansi(hx,elements(%i0,3,chr(177)))),if(eq(elements(%i0,4,chr(177)),2),Creator,switch(elements(%i0,5,chr(177)),0,Untagged,1,Tagged)),elements(%i0,7,chr(177)))};@select/inline gt(u(setr`%va,total,u(mysql,get`sceneposecount,%q<scene>)),0)=1,{@pemit %#=align(30 >30 15,,Total:,%q<total>)}

&Q`GET`SCENEPOSECOUNT [u(cobj,scene)]=SELECT SUM(pose_count) FROM mush_actor WHERE scene_id=?


&INC`LOG`DETAILS`URL [u(cobj,scene)]=@pemit %#=u(SUBHEADER,Url);@pemit %#=ansi(h,URL:) [u(weblink,http://[u(game_config,SCENESYS,URL)][u(game_config,SCENESYS,PATH)]%q<scene>)];

&INC`LOG`DETAILS`REPORTS [u(cobj,scene)]=@select/inline strlen(%q<reports>)=>0,{@pemit %#=u(SUBHEADER,Reports Featuring this Scene);@dolist/inline/delimit [chr(176)] %q<plots>={@pemit %#=align(4 20 10 10 15 7,u(pueblize,elements(%i0,1,chr(177)),+rread [elements(%i0,1,chr(177))]),u(pueblize,elements(%i0,2,chr(177)),+rread [elements(%i0,1,chr(177))]),if(elements(%i0,5,chr(177)),u(fancytime`%va,elements(%i0,5,chr(177)),%#),N/A),if(elements(%i0,6,chr(177)),u(fancytime`%va,elements(%i0,6,chr(177)),%#),N/A),if(isobjid(elements(%i0,8,chr(177))),u(getproperty,elements(%i0,8,chr(177)),banner),ansi(hx,elements(%i0,9,chr(177)))),elements(%i0,4,chr(177)))}}

&INC`LOG`DETAILS`PLOTS [u(cobj,scene)]=@select/inline strlen(%q<plots>)=>0,{@pemit %#=u(SUBHEADER,Plots Featuring this Scene);@dolist/inline/delimit [chr(176)] %q<plots>={@pemit %#=align(4 20 10 10 15 7,u(pueblize,elements(%i0,1,chr(177)),+log [elements(%i0,1,chr(177))]),u(pueblize,elements(%i0,2,chr(177)),+log [elements(%i0,1,chr(177))]),if(elements(%i0,5,chr(177)),u(fancytime`%va,elements(%i0,5,chr(177)),%#),N/A),if(elements(%i0,6,chr(177)),u(fancytime`%va,elements(%i0,6,chr(177)),%#),N/A),if(isobjid(elements(%i0,8,chr(177))),u(moniker`%va,elements(%i0,8,chr(177))),ansi(hx,elements(%i0,9,chr(177)))),elements(%i0,4,chr(177)))}}

&INC`LOG`WHO [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=u(strfirstof,%0,get(%#/D`SCENE));@attach %!/INC`MSG=Joined participants for Scene %q<scene>: [u(strfirstof`%va,u(itemize`%va,iter(lsearch(all,type,player,elock,D`SCENE:%q<scene>),name(%i0)[if(strmatch(%l,loc(%i0)),,%b\(not present\))],%b,|),|,and,\,),Nobody!)]

&INC`LOG`DELETE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0,,,,,,1;@attach %!/INC`LOADSCENE;@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),cand(strmatch(%:,%q<ownobjid>),not(u(mysql,POSE_COUNT,%q<scene>))))=@attach %!/INC`MSG=ERROR: Permission denied.;@select/inline %q<deleted>=1,{@attach %!/INC`VERIFY={[ansi(hr,WARNING:)] This will RESTORE Scene %q<scene>. This will not affect the Wiki's copy. Are you sure? Enter the same command to verify.},DELETE SCENE %q<scene>;@attach %!/INC`MESSAGE=%q<scene>,{[u(moniker`%va,%#)] RESTORED deleted Scene %q<scene>.};@attach %!/INC`DOSQL=DELETE`SCENE,0,%q<scene>;@attach %!/INC`MSG`CHAN=Restored Scene %q<scene>.},{@attach %!/INC`VERIFY={[ansi(hr,WARNING:)] This will soft-delete Scene %q<scene>. It will no longer display or be accessible/usable unless restored. This will not affect the Wiki's copy. Are you sure? Enter the same command to verify.},DELETE SCENE %q<scene>;@attach %!/INC`MESSAGE=%q<scene>,{[u(moniker`%va,%#)] deleted Scene %q<scene>.};@attach %!/INC`DOSQL=DELETE`SCENE,1,%q<scene>;@attach %!/INC`MSG=You have Deleted Scene %q<scene>. If this was in error use the command again to undo this.;@attach %!/INC`MSG`CHAN=Deleted Scene %q<scene>. Use +log/delete %q<scene> to undo.};

&Q`DELETE`SCENE [u(cobj,scene)]=UPDATE mush_scene SET is_deleted=? WHERE scene_id=?

&Q`POSE_COUNT [u(cobj,scene)]=SELECT count(action_id) FROM mush_action AS a LEFT JOIN mush_action_source AS src ON a.source_id=act.source_id WHERE act.scene_id=? AND a.is_deleted=0

&INC`LOG`ADD [u(cobj,scene)]=@attach %!/INC`LOG`SCHEDULE
&INC`LOG`SCHEDULE [u(cobj,scene)]=@attach %!/INC`VALID`FUTURE=trim(before(%0,/));@check strlen(u(setr`%va,title,trim(after(%0,/))))=@attach %!/INC`MSG=You need to give the scene a title!;@stop u(charsearch,%q<title>,/ %r %t)=@attach %!/INC`MSG=The following characters are not permitted in titles: /\, \%r\, \%t.;@check strlen(u(setr`%va,desc,%1))=@attach %!/INC`MSG=Your scene needs a Pitch!;@attach %!/INC`DOSQL=NEW`SCHEDULE/scene,u(trimtabs,u(trimlines,%q<title>)),u(trimtabs,u(trimlines,%q<desc>)),%q<time>;@attach %!/INC`DOSQL=SET`ACTOR_TYPE,2,%q<scene>,%q<t1id>;th u(setq`%va,schedid,u(mysql,get`newschedule,%q<pid>));@trigger u(cobj,bbs)/INC`POST=BB,u(game_config,SCENESYS,BOARD),#%q<scene>: %q<title>,u(FUN`FORMATPOST,%q<title>,[u(moniker`%va,%#)],u(fancytime`%va,%q<time>,,UTC),%q<desc>),%#;@attach %!/INC`MSG=You scheduled a new Scene - %q<scene>: '%q<title>' on [u(fancytime`%va,%q<time>,%#)];@wait 1={@attach %!/INC`DOSQL=SET`SCENE_POST,u(setr`%va,postid,elements(first(u(wildgrepi`%va,u(game_config,SCENESYS,BOARD),~`*`HDR,#%q<scene>:*)),2,`)),%q<scene>}

&Q`NEW`SCHEDULE [u(cobj,scene)]=INSERT INTO mush_scene (title,pitch,date_scheduled) VALUES (?,?,FROM_UNIXTIME(?))
&Q`SET`SCENE_POST [u(cobj,scene)]=UPDATE mush_scene SET post_id=? WHERE scene_id=?

&INC`LOG`TAG [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@stop u(mysql,GET`tagcheck,%q<scene>,%q<t1id>)=@attach %!/INC`MSG=You are already signed up for that scene.;@attach %!/INC`DOSQL=SET`ACTOR_STATUS,1,%q<scene>,%q<t1id>;@attach %!/INC`MSG=You have tagged Scene %0!;@attach %!/INC`MSG=[u(getproperty,%#,banner)] just Tagged Scene %q<scene>: '%q<title>',%q<ownobjid>

&Q`SET`ACTOR_STATUS [u(cobj,scene)]=INSERT INTO mush_actor (actor_status,scene_id,player_id) VALUES (?,?,?) ON DUPLICATE KEY UPDATE actor_status=VALUES(actor_status)
&Q`GET`TAGCHECK [u(cobj,scene)]=SELECT actor_status from mush_actor WHERE scene_id=? AND player_id=?

&INC`LOG`UNTAG [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@check u(mysql,GET`tagcheck,%q<scene>,%q<t1id>)=@attach %!/INC`MSG=You are not signed up for that scene.;@attach %!/INC`LOADSCENE;@attach %!/INC`DOSQL=SET`ACTOR_STATUS,0,%q<scene>,%q<t1id>;@attach %!/INC`MSG=You have untagged Scene %0!;@attach %!/INC`MSG=[u(getproperty,%#,banner)] just un-Tagged Scene %q<scene>: '%q<title>',%q<ownobjid>

&INC`LOG`INVITE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@check strmatch(%:,%q<ownobjid>)=@attach %!/INC`MSG=ERROR: Permission denied.;@check words(u(setr`%va,invites,u(setr`%va,tagged,u(filter,ISOBJID,u(mysql,get`taggedobj,%q<scene>)))))=@attach %!/INC`MSG=ERROR: No valid recipients to invite.;@dolist/inline %q<invites>={@trigger/spoof/clearregs [u(cobj,grid)]/INC`MEETME`SUMMON=##}

&FUN`FORMATPOST [u(cobj,scene)]=ansi(h,Title:) %0%R[ansi(h,Posted by:)] %1%R[ansi(h,Scheduled Time:)] %2%R[repeat(-,78)]%R%3

&INC`LOG`MINE [u(cobj,scene)]=@attach %!/INC`LOG`UPCOMING=,,1

&INC`LOG`UPCOMING [u(cobj,scene)]=@select/inline strlen(%0)=>0,{@attach %!/INC`LOG`DETAILS},{th u(setq`%va,banner,u(game_config,SCENESYS,BANNER));@pemit %#=u(HEADER,if(%2,Your%b)Upcoming Scenes - [u(choosegame,timefmt($Z,,u(gettz,%#)),ptimefmt($Z,,u(gettz,%#)))]);th u(setq`%va,alts,iter(u(alts,%#),objid(%i0)));@dolist/inline/nobreak/delimit [chr(176)] [u(mysql3,if(%2,GET`MINE,GET`UPCOMING),if(%2,u(SQL`IN`STRING,%q<alts>),%q<t1id>))]={th u(setq`%va,data,u(choosegame,%i0,%di0));th u(setq`%va,tagged,u(mysql,GET`TAGOBJIDS,elements(%q<data>,1,chr(177))));@stop cand(%2,not(cor(match(%q<alts>,elements(%q<data>,4,chr(177))),words(setinter(%q<alts>,%q<tagged>)))));th u(setq`%va,time,elements(%q<data>,3,chr(177)));@select/inline not(strmatch(%q<last>,u(setr`%va,last,u(choosegame,timefmt($a $b $d $Y $Z,%q<time>,u(gettz,%#)),ptimefmt($a $b $d $Y $Z,%q<time>,u(gettz,%#))))))=1,{@pemit %#=u(HEADER,%q<last>)};@pemit %#=align(3 4 40 20 7,if(strmatch(%:,u(setr`%va,ownobjid,elements(%q<data>,4,chr(177)))),ansi(hg,*),if(match(%q<alts>,elements(%q<data>,4,chr(177))),ansi(g,*),if(match(%q<tagged>,%:),ansi(hr,*),if(words(setinter(%q<tagged>,%q<alts>)),ansi(g,*),%b))))[words(%q<tagged>)],u(pueblize,u(setr`%va,scene,elements(%q<data>,1,chr(177))),+log %q<scene>),elements(%q<data>,2,chr(177)),if(isobjid(%q<ownobjid>),u(pueblize,if(%q<banner>,u(getproperty,%q<ownobjid>,Banner),u(moniker`%va,%q<ownobjid>)),+finger [name(%q<ownobjid>)]),ansi(hx,elements(%q<data>,5,chr(177)))),elements(u(fancytime`%va,%q<time>,%#),3))};@pemit %#=u(FOOTER)}

&Q`GET`UPCOMING [u(cobj,scene)]=SELECT s.scene_id,s.title,UNIX_TIMESTAMP(s.date_scheduled),t.objid,t.object_name FROM mush_scene AS s LEFT JOIN mush_actor AS act ON act.scene_id=s.scene_id AND act.actor_type=2 LEFT JOIN mush_thing AS t ON t.thing_id=act.player_id WHERE s.date_scheduled >= UTC_TIMESTAMP() - INTERVAL 10 HOUR AND s.is_deleted=0 ORDER by s.date_scheduled

&Q`GET`MINE [u(cobj,scene)]=SELECT s.scene_id,s.title,UNIX_TIMESTAMP(s.date_scheduled),t.objid,t.object_name FROM mush_actor AS a1 LEFT JOIN mush_scene AS s ON s.scene_id=a1.scene_id LEFT JOIN mush_thing AS t2 ON t2.thing_id=a1.player_id LEFT JOIN mush_actor AS a2 ON a2.scene_id=s.scene_id AND a2.actor_type=2 LEFT JOIN mush_thing AS t ON a2.player_id=t.thing_id WHERE s.date_scheduled >= UTC_TIMESTAMP() - INTERVAL 10 HOUR AND t2.objid IN (!) AND (a1.actor_type>0 OR a1.actor_status>0) AND s.is_deleted=0 ORDER BY s.date_scheduled

&Q`GET`TAGOBJIDS [u(cobj,scene)]=SELECT t.objid FROM mush_actor AS act LEFT JOIN mush_thing AS t on t.thing_id=act.player_id WHERE act.scene_id=? AND act.actor_status=1

&INC`LOG`RESCHEDULE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),strmatch(%:,%q<ownobjid>))=@attach %!/INC`MSG=ERROR: Permission denied.;@attach %!/INC`VALID`FUTURE=%1;@attach %!/INC`DOSQL=SET`SCHEDULEDATE,%q<time>,%q<scene>;@attach %!/INC`MSGSCENE=%q<scene>,u(moniker`%va,%#) rescheduled the Scene!;@attach %!/INC`UPDATEBB
&Q`SET`SCHEDULEDATE [u(cobj,scene)]=UPDATE mush_scene SET date_scheduled=FROM_UNIXTIME(?) WHERE scene_id=?

&INC`LOG`MAIL [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=%0;@attach %!/INC`LOADSCENE;@check cor(u(isadmin`%va,%#),strmatch(%:,%q<ownobjid>))=@attach %!/INC`MSG=ERROR: Permission denied.;@check words(u(setr`%va,tagged,u(mysql,GET`TAGOBJIDS,%q<scene>)))=@attach %!/INC`MSG=ERROR: Nobody has tagged the scene!;@attach %!/INC`MSG=The OBJID list of recipients to use for a @mail is: %q<tagged>

@@ PLOT SECTION

&INC`PLOT`MAIN [u(cobj,scene)]=@select/inline gt(strlen(%0),0)=1,{@attach %!/INC`PLOT`DETAILS},0,{@attach %!/INC`PLOT`LIST}

&INC`PLOT`ALL [u(cobj,scene)]=@attach %!/INC`PLOT`LIST=%0,1

&INC`PLOT`LIST [u(cobj,scene)]=@pemit %#=u(HEADER,if(%1,All,Current) Plots);@pemit %#=align(4 25 20 20 6,ID,Title,Runner,Schedule,Type);th u(setq`%va,target,%#);@select/inline %va=PennMUSH,{th mapsql(FUN`FORMATPLOT,u(SQL`FORMAT,if(%1,get`allplots,get`runningplots)))},RhostMUSH,{@dolist/inline/delimit | [u(mysql2,if(%1,get`allplots,get`runningplots))]={th u(FUN`FORMATPLOT,,elements(%d0,1,^),elements(%d0,2,^),elements(%d0,3,^),elements(%d0,4,^),elements(%d0,5,^),elements(%d0,6,^))}};@pemit %#=u(SUBHEADER)

&Q`GET`ALLPLOTS [u(cobj,scene)]=SELECT plot_id,plot_title,player_name,UNIX_TIMESTAMP(start_date),UNIX_TIMESTAMP(end_date),plot_type FROM $PLOTS$ NATURAL LEFT JOIN $PLAYERS$

&Q`GET`RUNNINGPLOTS [u(cobj,scene)]=SELECT plot_id,plot_title,player_name,UNIX_TIMESTAMP(start_date),UNIX_TIMESTAMP(end_date),plot_type FROM $PLOTS$ NATURAL LEFT JOIN $PLAYERS$ WHERE end_date > NOW()

&FUN`FORMATPLOT [u(cobj,scene)]=pemit(%q<target>,align(4 25 20 20 6,u(pueblize,%1,+plot %1),%2,%3,elements(u(fancytime,%4,%q<target>),1 2) - [elements(u(fancytime,%5,%q<target>),1 2)],%6))

&INC`VALPLOT [u(cobj,scene)]=@check strlen(%0)=@attach %!/INC`MSG=Plot ID field empty.;@check u(valnum,%0)=@attach %!/INC`MSG=Plots must be addressed by their IDs.;@check gt(u(setr`%va,plot,u(mysql,get`plotcheck,%0)),0)=@attach %!/INC`MSG=Plot '%0' could not be found.
&Q`GET`PLOTCHECK [u(cobj,scene)]=SELECT plot_id FROM $PLOTS$ WHERE plot_id=?

&INC`PLOT`DETAILS [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@pemit %#=u(HEADER,Plot ID %q<plot>: [u(mysql,get`plottitle,%q<plot>)]);@pemit %#=ansi(h,Runner:) [u(mysql,get`plotrunnername,%q<plot>)]%R[ansi(h,Schedule:)] [u(fancytime,u(mysql,get`plotstart,%q<plot>),%#)] to [u(fancytime,u(mysql,get`plotend,%q<plot>),%#)]%R[ansi(h,Type:)] [u(mysql,get`plottype,%q<plot>)]%R[ansi(h,Status:)] [u(mysql,get`plotstatus,%q<plot>)]%R[u(mysql,get`plotdesc,%q<plot>)];@pemit %#=u(HEADER)
&Q`GET`PLOTRUNNER [u(cobj,scene)]=SELECT player_id FROM $PLOTS$ WHERE plot_id=?
&Q`GET`PLOTRUNNERNAME [u(cobj,scene)]=SELECT player_name FROM $PLOTS$ NATURAL LEFT JOIN $PLAYERS$ WHERE plot_id=?
&Q`GET`PLOTTITLE [u(cobj,scene)]=SELECT plot_title FROM $PLOTS$ WHERE plot_id=?
&Q`GET`PLOTSTART [u(cobj,scene)]=SELECT UNIX_TIMESTAMP(start_date) FROM $PLOTS$ WHERE plot_id=?
&Q`GET`PLOTEND [u(cobj,scene)]=SELECT UNIX_TIMESTAMP(end_date) FROM $PLOTS$ WHERE plot_id=?
&Q`GET`PLOTTYPE [u(cobj,scene)]=SELECT plot_type FROM $PLOTS$ WHERE plot_id=?
&Q`GET`PLOTSTATUS [u(cobj,scene)]=SELECT plot_status FROM $PLOTS$ WHERE plot_id=?
&Q`GET`PLOTDESC [u(cobj,scene)]=SELECT plot_desc FROM $PLOTS$ WHERE plot_id=?

&INC`PLOT`ADD [u(cobj,scene)]=@attach %!/INC`CHECKPC=before(%0,/),1;@check gt(u(setr`%va,pid,u(mysql,get`playerid,%q<t1objid>)),0)=@attach %!/INC`MSG=%q<t1name> is not setup for SceneSys!;@check strlen(after(%0,/))=@attach %!/INC`MSG=The Plot needs a title!;@check strlen(%1)=@attach %!/INC`MSG=The Plot needs a description!;@attach %!/INC`DOSQL=NEW`PLOT,%q<pid>,after(%0,/),%1;th u(setq`%va,plot,u(mysql,get`newplot,%q<pid>));@attach %!/INC`MSG=Plot added!

&Q`NEW`PLOT [u(cobj,scene)]=INSERT INTO $PLOTS$ (player_id,plot_title,plot_desc,start_date,end_date,plot_status) VALUES (?,?,?,UTC_TIMESTAMP(),UTC_TIMESTAMP() + INTERVAL 1 MONTH,'Approved')
&Q`GET`NEWPLOT [u(cobj,scene)]=SELECT plot_id FROM $PLOTS$ WHERE player_id=? ORDER BY plot_id LIMIT 1

&INC`PLOT`TITLE [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@check strlen(%1)=@attach %!/INC`MSG=The new title field is empty!;@attach %!/INC`DOSQL=SET`PLOTTITLE,%1,%q<plot>;@attach %!/INC`MSG=The Plot title was changed.
&INC`PLOT`DESC [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@check strlen(%1)=@attach %!/INC`MSG=The new description field is empty!;@attach %!/INC`DOSQL=SET`PLOTDESC,%1,%q<plot>;@attach %!/INC`MSG=The Plot description was changed.
&Q`SET`PLOTTITLE [u(cobj,scene)]=UPDATE $PLOTS$ SET plot_title=? WHERE plot_id=?
&Q`SET`PLOTDESC [u(cobj,scene)]=UPDATE $PLOTS$ SET plot_desc=? WHERE plot_id=?

&INC`PLOT`START [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@attach %!/INC`CHECKTIME=%1,1;@attach %!/INC`DOSQL=SET`PLOTSTART,%q<time>,%q<plot>;@attach %!/INC`MSG=The plot's Start date was set to [u(fancytime,%q<time>,%#)]
&INC`PLOT`END [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@attach %!/INC`CHECKTIME=%1,1;@attach %!/INC`DOSQL=SET`PLOTEND,%q<time>,%q<plot>;@attach %!/INC`MSG=The plot's End date was set to [u(fancytime,%q<time>,%#)]
&Q`SET`PLOTSTART [u(cobj,scene)]=UPDATE $PLOTS$ SET start_date=FROM_UNIXTIME(?) WHERE plot_id=?
&Q`SET`PLOTEND [u(cobj,scene)]=UPDATE $PLOTS$ SET end_date=FROM_UNIXTIME(?) WHERE plot_id=?

&INC`PLOT`TYPE [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@check strlen(%1)=@attach %!/INC`MSG=You must include a status! Your choices are Minor, Major, and Global.;@attach %!/INC`PARTIAL=%1,MINOR|MAJOR|GLOBAL,|,Status,Status;@attach %!/INC`DOSQL=SET`PLOTTYPE,u(capnames,%q<status>),%q<plot>;@attach %!/INC`MSG=The Status was changed to [u(capnames,%q<status>)].
&Q`SET`PLOTTYPE [u(cobj,scene)]=UPDATE $PLOTS$ SET plot_type=? WHERE plot_id=?

&INC`PLOT`RUNNER [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@attach %!/INC`CHECKPC=%1,1;@check gt(u(setr`%va,pid,u(mysql,get`playerid,%q<t1objid>)),0)=@attach %!/INC`MSG=%q<t1name> is not setup for SceneSys!;@attach %!/INC`DOSQL=SET`PLOTRUNNER,%q<pid>,%q<plot>
&Q`SET`PLOTRUNNER [u(cobj,scene)]=UPDATE $PLOTS$ SET player_id=? WHERE plot_id=?

&INC`PLOT`STATUS [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@check strlen(%1)=@attach %!/INC`MSG=You must include a status! Your choices are Approved, Running, Paused, Finished, and Canceled.;@attach %!/INC`PARTIAL=%1,APPROVED|RUNNING|PAUSED|FINISHED|CANCELED,|,Status,Status;@attach %!/INC`DOSQL=SET`PLOTSTATUS,u(capnames,%q<status>),%q<plot>;@attach %!/INC`MSG=The Status was changed to [u(capnames,%q<status>)].
&Q`SET`PLOTSTATUS [u(cobj,scene)]=UPDATE $PLOTS$ SET plot_status=? WHERE plot_id=?

&INC`PLOT`DELETE [u(cobj,scene)]=@attach %!/INC`VALPLOT=%0;@attach %!/INC`VERIFY={ansi(hr,WARNING:) This will DELETE Plot %q<plot>. Are you SURE? enter the same command again within ten seconds to verify!},DELETE PLOT %q<plot>;@attach %!/INC`DOSQL=DELETE`PLOT,%q<plot>;@attach %!/INC`MSG=Plot deleted!
&Q`DELETE`PLOT [u(cobj,scene)]=DELETE FROM $PLOTS$ WHERE plot_id=?

&INC`OBSERVER`MAIN [u(cobj,scene)]=th u(setq`%va,new,not(get(%#/D`OBSERVER)));@attach %!/INC`MSG`ROOM=%n is [if(%q<new>,now,no longer)] an observer to the event.;&D`OBSERVER %#=%q<new>

@@ PARTNERS Section

&INC`PARTNERS`MAIN [u(cobj,scene)]=th u(setq`%va,banner,u(game_config,SCENESYS,BANNER));@attach %!/INC`VALID`SCENE=u(strfirstof`%va,%0,get(%#/D`SCENE));@pemit %#=u(header,Matchups for Scene: %q<scene>);@pemit %#=ansi(u(color,%#,SCENE,COLUMN_NAMES),align(4 [sub(u(width`%va,%#),6)],Pair,Participants));@pemit %#=u(separator);@dolist/inline/nobreak/delimit | [u(mysql2,GET`PAIRINGS,%q<scene>)]={@check words(u(setr`%va,partic,u(mysql,GET`PARTICIPANTS,elements(##,1,^))));@pemit %#=align(4 [sub(u(width`%va,%#),6)],elements(##,2,^),u(itemize,iter(u(sortname,%q<partic>),if(%q<banner>,u(getproperty,%i0,banner),u(moniker`%va,%i0)),%b,|),|,and,\,))};@pemit %#=u(footer)

&Q`GET`PAIRINGS [u(cobj,scene)]=SELECT pair_id,pair_num FROM $PAIRS$ WHERE scene_id=? ORDER BY pair_num
&Q`GET`PARTICIPANTS [u(cobj,scene)]=SELECT DISTINCT players.objid FROM $MATCH$ AS pairs LEFT JOIN $PLAYERS$ AS players ON players.player_id=pairs.player_id WHERE pairs.pair_id=?

&INC`PARTNERS`JOIN [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=get(%#/D`SCENE);@check eq(u(mysql,get`scenestate,%q<scene>),0)=@attach %!/INC`MSG=That scene is not Active!;@attach %!/INC`PARTNERS`GETSLOT=%0;@stop u(mysql,CHECK`PAIRING,%q<pair_id>,%q<pid>)=@attach %!/INC`MSG=[ansi(hr,ERROR:)] You are already joined to that pairing!;@attach %!/INC`DOSQL=ADD`PAIRING,%q<pair_id>,%q<pid>;@attach %!/INC`MSGSCENE=%q<scene>,{%n has joined Scene %q<scene>'s [u(numth,%q<value>)] pairing.}

&INC`PARTNERS`LEAVE [u(cobj,scene)]=@attach %!/INC`VALID`SCENE=get(%#/D`SCENE);@check eq(u(mysql,get`scenestate,%q<scene>),0)=@attach %!/INC`MSG=That scene is not Active!;@attach %!/INC`PARTNERS`GETSLOT=%0;@check u(setr`%va,partner_id,u(mysql,CHECK`PAIRING,%q<pair_id>,%q<pid>))=@attach %!/INC`MSG=[ansi(hr,ERROR:)] You are not joined to that pairing!;@attach %!/INC`DOSQL=DEL`PAIRING,%q<partner_id>;@attach %!/INC`MSGSCENE=%q<scene>,{%n has left Scene %q<scene>'s [u(numth,%q<value>)] pairing.}

&INC`PARTNERS`GETSLOT [u(cobj,scene)]=@attach %!/INC`VALID`POSINT=%0,Slot ID;@stop gt(%q<value>,99)=@attach %!/INC`MSG=ERROR: Nothing greater than 99 please.;@select/inline u(setr`%va,pair_id,u(mysql,GET`PAIRID,%q<scene>,%q<value>))=>0,{@@ Woo! We're good.},{@attach %!/INC`DOSQL=INSERT`PAIRID,%q<scene>,%q<value>;th u(setq`%va,pair_id,u(mysql,GET`PAIRID,%q<scene>,%q<value>))}

&Q`GET`PAIRID [u(cobj,scene)]=SELECT pair_id FROM $PAIRS$ WHERE scene_id=? AND pair_num=?
&Q`INSERT`PAIRID [u(cobj,scene)]= INSERT INTO $PAIRS$ (scene_id,pair_num) VALUES (?,?) 

&Q`CHECK`PAIRING [u(cobj,scene)]=SELECT match_id FROM $MATCH$ WHERE pair_id=? AND player_id=? LIMIT 1
&Q`ADD`PAIRING [u(cobj,scene)]=INSERT INTO $MATCH$ (pair_id, player_id) VALUES (?,?)
&Q`DEL`PAIRING [u(cobj,scene)]=DELETE FROM $MATCH$ WHERE match_id=?

@@ SQL Section

&Q`INSTALL`PLOT [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_plot (plot_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,title VARCHAR(100) UNIQUE,pitch TEXT,outcome TEXT,date_start DATETIME,date_end DATETIME,plot_type TINYINT UNSIGNED DEFAULT 0,plot_status TINYINT UNSIGNED DEFAULT 0,INDEX(date_start,date_end,plot_status),PRIMARY KEY(plot_id)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`RUNNER [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_runner (runner_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,player_id MEDIUMINT UNSIGNED NOT NULL,plot_id MEDIUMINT UNSIGNED NOT NULL,runner_type TINYINT UNSIGNED DEFAULT 0,PRIMARY KEY(runner_id),UNIQUE(player_id,plot_id),FOREIGN KEY(plot_id) REFERENCES mush_plot(plot_id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY(player_id) REFERENCES mush_thing(thing_id) ON UPDATE CASCADE ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`SCENE [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_scene (scene_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,title VARCHAR(120),pitch TEXT,outcome TEXT,post_id VARCHAR(10),date_created DATETIME,date_scheduled DATETIME,date_started DATETIME,date_finished DATETIME,scene_status TINYINT DEFAULT 0,log_ooc BOOL NOT NULL DEFAULT TRUE,PRIMARY KEY(scene_id),INDEX(scene_id,title,scene_status)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`SCENE_LINK [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_plot_link (link_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,scene_id MEDIUMINT UNSIGNED NOT NULL,plot_id MEDIUMINT UNSIGNED NOT NULL,PRIMARY KEY(link_id),UNIQUE(scene_id,plot_id),FOREIGN KEY(plot_id) REFERENCES mush_plot(plot_id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY(scene_id) REFERENCES mush_scene(scene_id) ON UPDATE CASCADE ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`ACTOR [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_actor (actor_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,scene_id MEDIUMINT UNSIGNED NOT NULL,player_id MEDIUMINT UNSIGNED NOT NULL,actor_type TINYINT UNSIGNED NOT NULL DEFAULT 0,actor_status TINYINT UNSIGNED NOT NULL DEFAULT 0,actor_exclude BOOL NOT NULL DEFAULT FALSE,pose_count MEDIUMINT UNSIGNED DEFAULT 0,PRIMARY KEY(actor_id),UNIQUE(scene_id,player_id),INDEX(scene_id,player_id,actor_type),FOREIGN KEY(scene_id) REFERENCES mush_scene(scene_id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY(player_id) REFERENCES mush_thing(thing_id) ON UPDATE CASCADE ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`ACTION_SOURCE [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_action_source (source_id INT UNSIGNED NOT NULL AUTO_INCREMENT,scene_id MEDIUMINT UNSIGNED NOT NULL,source_objid VARCHAR(30) NOT NULL,source_vr VARCHAR(30),source_name VARCHAR(60) NOT NULL,source_type TINYINT UNSIGNED NOT NULL DEFAULT 0,PRIMARY KEY(source_id),FOREIGN KEY(scene_id) REFERENCES mush_scene(scene_id) ON UPDATE CASCADE ON DELETE CASCADE,UNIQUE(scene_id, source_objid, source_vr)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`ACTION [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_action (action_id INT UNSIGNED NOT NULL AUTO_INCREMENT,actor_id MEDIUMINT UNSIGNED NOT NULL,source_id INT UNSIGNED NOT NULL,is_deleted BOOL NOT NULL DEFAULT FALSE,action_type TINYINT UNSIGNED DEFAULT 0,date_created DATETIME NOT NULL,action_text TEXT NOT NULL,PRIMARY KEY(action_id),INDEX(actor_id, is_deleted),FOREIGN KEY(actor_id) REFERENCES mush_actor(actor_id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY(source_id) REFERENCES mush_action_source(source_id) ON UPDATE CASCADE ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&Q`INSTALL`MATCH [u(cobj,scene)]=CREATE TABLE IF NOT EXISTS mush_scene_match (pair_id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,display_num MEDIUMINT UNSIGNED NOT NULL,scene_id MEDIUMINT UNSIGNED NOT NULL,player_id MEDIUMINT UNSIGNED NOT NULL,PRIMARY KEY(pair_id),UNIQUE(scene_id,display_num),UNIQUE(scene_id,player_id),FOREIGN KEY(scene_id) REFERENCES mush_scene(scene_id) ON UPDATE CASCADE ON DELETE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci AUTO_INCREMENT=1

&SQL`INSTALL [u(cobj,scene)]=PLOT|RUNNER|SCENE|SCENE_LINK|ACTOR|ACTION_SOURCE|ACTION|MATCH

@trigger [u(cobj,scene)]/TRG`INSTALL

+help/add +scene=[u(cobj,scene)]/HLP`+SCENE
+help/category +scene=Roleplaying
+help/metatags +scene=logging scenesys +log
&HLP`+SCENE [u(cobj,scene)]=SceneSys is a scene scheduling, tracking, and logging tool that works alongside [mudname()]'s Wiki. The original version was designed by Mercutio @ M*U*S*H.%R[ansi(hc,Aliases:)] +log%R%R[ansi(hc,Setting up)]%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+scene/id \[<target>\])] - Show your own unique Char_id. Or someone else's. This is used for linking to the wiki.%R[ansi(h,+config system/timezone=<code>)] - You must set your timezone for this system to work. Refer to help timezones2)]%R%R[ansi(hc,SceneRunner Commands)]%RThese commands are for anyone who wants to start and manage a scene.%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+scene/create <title text>)] - Begins a new scene.%R[ansi(h,+scene/loudcreate <title text>)] - Like /create but announces it on the RP channel.%R[ansi(h,+scene/pitch <id>=<text>)] - Changes a scene's Pitch (the paragraph for an upcoming scene.)%R[ansi(h,+scene/outcome <id>=<text>)] - Gives a scene a description/short summary.%R[ansi(h,+scene/finish \[<id>\])] - Finishes a scene. ID will be current scene if not specified.%R[ansi(h,+scene/pause \[<id>\])] - Pauses a scene. ID will be current scene if not specified.%R[ansi(h,+scene/continue \[<id>\])] - Resumes a scene that was paused or finished. ID will be current scene if not specified.%R%RThe following are for Scheduling Scenes:%R[ansi(h,+scene/schedule <time>/<title>=<description>)] - Schedules an upcoming scene. <time> is from your timezone-perspective. Acceptable format: [u(choosegame,timefmt($b $d $H:$M,,u(gettz,%#)),ptimefmt($b $d $H:$M,,u(gettz,%#)))]. Current year assumed if none provided.%R[ansi(h,+scene/reschedule <id>=<time>)] - Changes a scene's scheduled time. <time> is same as adding.%R[ansi(h,+scene/mail <id>=<message>)] - @mails all who have tagged a scene.%R[ansi(h,+scene/invite <id>)] - Automatically sends out summon requests to taggers.%R[ansi(h,+scene/start <id>)] - Convert a scheduled scene into an active one. Get posing!)]%R%R[ansi(hc,Participant Commands)]%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+scene/upcoming)] - Display the upcoming scene calendar. Also responds to: +scenes\, +upcoming\, +events\, and +schedule.%R[ansi(h,+scene/mine)] - As /upcoming but lists only those scenes you have either tagged or created.%R[ansi(h,+scene/tag <id>)] - Declare interest in an upcoming scene. Remove with /untag.%R[ansi(h,+scene/join \[<id or player>\])] - Joins a scene.%R[ansi(h,+scene/leave)] - Cease being logged.%R[ansi(h,+scene/undo \[<pose id>\])] - Undoes your last pose or a specified pose. Can re-enable the pose using /redo.%R[ansi(h,+scene/edit <pose id>=<before>\,<after>)] - Edit a recorded pose. useful for getting rid of typos.%R[ansi(h,+scene/recall <id>=<# of lines>)] - Displays scene's recorded poses.%R[ansi(h,+scene/spoof <altname>)] - Record poses as one of your alts. Use without arguments to clear.%R[ansi(h,+observer)] - Marks you as 'just watching'.%R%RTo be recorded\, you must be joined to an active scene and in the same location as the scene's owner. Additionally your pose must be at least ten words long.)]%R%R[ansi(hc,Listing Commands)]%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+scene)] - Displays all scenes you are currently participating in or running that aren't finished.%R[ansi(h,+scene/old)] - Show all of the finished scenes you've been in or run.%R[ansi(h,+scene <id>)] - Show details of a particular scene.%R[ansi(h,+scene/who \[<id>\])] - Quick listing of who has this scene as their active scene.%R[ansi(h,+scene/with <name>\[=<name2>\])] - List what scenes you have in common with a given player or between X and Y players. Can get spammy.%R%RAll Listing commands support an additional /# switch for different pages. For instance\, +scene/old/3.%R%RUsage Procedure: 1. Creator starts scene. 2. Others join scene. 3. Scene is recorded as it's run. 4. Creator uses /finish. 5. Use the PHP intermediary site to format and post to wiki.)]

+shelp/add +scene=[u(cobj,scene)]/SHLP`+SCENE
+shelp/category +Scene=Roleplaying
&SHLP`+SCENE [u(cobj,scene)]=[ansi(hc,Wizard Commands)]%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+scene/delete <id>)] - Deletes a scene and all recorded poses.%R[ansi(h,+scene/merge <player>=<char id>)] - This command exists for when a character is deleted and a new one is created and the new character needs to 'take the place' of the old one. This will re-assign the given <char id> to player and change any of the player's existing scenesys information to use that ID.)]

+help/add +partners=[u(cobj,scene)]/HLP`+PARTNERS
+help/category +partners=Roleplaying
&HLP`+PARTNERS [u(cobj,scene)]=The Partners system helps keep track of matchups within scenes. Examples include a task force, a dogfight, a duel. The idea is that this will help participants of large scenes and scenerunners easily keep track of who is grouped together, who is fighting who, etc.%R%R[ansi(hc,Commands)]%RThese commands use the currently joined scene contextually. In other words, each list of matchups is unique-per-+scene.%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+partners)] - List all matchups in the scene.%R[ansi(h,+partners/join <slot>)] - Join a particular matchup. <slot> must be a number 1-15.%R[ansi(h,+partners/leave <slot>)] - Same as /join except leaves a matchup.)]

+help/add +plot=[u(cobj,scene)]/HLP`+PLOT
+help/category +plot=Roleplaying
&HLP`+PLOT [u(cobj,scene)]=SceneSys is a scene scheduling, tracking, and logging tool that works alongside [mudname()]'s Wiki. The original version was designed by Mercutio @ M*U*S*H and some of his code remains - credits are due.%R[ansi(hc,See Also:)] [u(pueblize,+help +scene,+help +scene)]%R%R[ansi(hc,Commands)]%R[align(5 [sub(u(width`%va,%#),6)],,{[ansi(h,+plot)] - Show all current plots.%R[ansi(h,+plot/all)] - Show all plots in the system.%R[ansi(h,+plot <id>)] - Show a plot's details.})]

+shelp/add +plot=[u(cobj,scene)]/SHLP`+PLOT
+shelp/category +plot=Roleplaying
&SHLP`+PLOT [u(cobj,scene)]=[ansi(hc,Administrator Commands)]%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+plot/add <runner>/<title>=<description>)] - Creates a new plot.%R[ansi(h,+plot/desc <id>=<description>)] - Change a plot's description.%R[ansi(h,+plot/type <id>=<type>)] - Change a plot's type.%R[ansi(h,+plot/title <id>=<title>)] - Change a plot's title.%R[ansi(h,+plot/runner <id>=<player>)] - Change a plot's runner.%R[ansi(h,+plot/start <id>=<time>)] - Change a plot's start date. Uses the same format as +schedule scheduling.%R[ansi(h,+plot/end <id>=<time>)] - Change a plot's end date.%R[ansi(h,+plot/status <id>=<status>)] - Change a plot's status. This can be anything.%R[ansi(h,+plot/delete <id>)] - Deletes a plot. Do not use except for newly created mistakes! This is not how to finish a plot!%R%RPlots are 'finished' when their end date have passed.)]

@@ POSE ORDER TRACKER - POT
+help/add +pot=[u(cobj,scene)]/HLP`+POT
+help/category +pot=Roleplaying
&HLP`+POT [u(cobj,scene)]=+pot, or [ansi(h,Po)]se [ansi(h,T)]racker, is a system that stores poses within the room for easy retrieval for review. Sometimes, poses are lost in spam or scroll, or a player enters late and needs to see what's going on, or was disconnected when someone else posed, and that's what this system's here to aid with.%R%R[ansi(hc,Commands)]%R[align(5 [sub(u(width`%va,%#),6)],,[ansi(h,+pot)] - Show either +pot/list or +pot/brief\, depending on /mode. \(See below.\)%R[ansi(h,+pot/list)] - show the last 15 \(or set max\) poses.%R[ansi(h,+pot/list <number>)] - Show a specified amount of poses.%R[ansi(h,+pot/max <number>)] - Set a new default number of poses to show.%R[ansi(h,+pot/brief)] - Show when people last posed and their last +summary made after that pose if they have one.%R[ansi(h,+pot/mode)] - Change the behavior of +pot. By default\, +pot uses +pot/list display style. Change mode and it will use +pot/brief instead.%R%R[ansi(h,+pot/toggle)] - THINGS used as rooms WILL support +pot if they are within an IC room. Object owners can use +pot/toggle to switch off recording. It can also enable recording in areas that are normally OOC.)]

+help/add +summary=[u(cobj,scene)]/HLP`+SUMMARY
+Help/category +summary=Roleplaying
&HLP`+SUMMARY [u(cobj,scene)]=Usage: +summary <message>%R%RDisplays <message> in highlights along with your name and a note that it's a summary. This is to summarize long poses for use by both your fellow players as well as your game master (if the scene has a game master), in order to better help have an idea of what's going on. It's use in large scenes is STRONGLY encouraged. It's also used to keep track of who's posed in a given pose round, if a scene is using pose rounds.%R%RNote that <message> is meant to be short and very to the point. It shouldn't be more than two or three lines. The command will refuse to display messages that are over a certain limit.

+help/add +done=[u(cobj,scene)]/HLP`+DONE
+Help/category +done=Roleplaying
&HLP`+DONE [u(cobj,scene)]=Usage: +done%R%RDisplays a highlighted message that you are 'done'. This is usually used to keep track of who's posed in large scenes, for the convenience of the game master (if applicable) as well as other players. This is especially useful when pose rounds are being used.

&CONFLICT`SCENESYS [u(cobj,migrate)]=@dolist/inline [u(coi,scene)] [u(coi,pot)]={@halt %i0;@set %i0=NO_COMMAND;@tel %i0=u(cobj,oldbox)}

@@ +bbpost #/CODE: 2.5 Update=Hey folk! Sorry things were a bit rocky for a day or two. Major updates are always a little bit bumpy until the bugs can be smoothed out. I'd thought 2.5 was more ready for release and final bugstomping than it actually was. United Heroes MUSH bore the brunt of it, but what I thought was only a few bugs left turned into a bit of a mess.... made worse by an unfinished changelog. The truth is, this update has been in the works for a long time. I got derailed from it twice by some hefty RL troubles and then resuming after forgetting where I was... it all lead to 2.5 having features that even I forgot I'd coded in.%R%RWell, I've got it pretty well sorted out by now. My serious apologies for the less than professional rollout this has been.%R%R*CHANGELOG*%R[ansi(h,SceneSys:)] SceneSys received the most attention for this update.%R* SceneSys is now just a single system called +scene (or +log if you want a shorter alias.) Scheduled Scenes and Scene-logs now use the same ID space. DO BE SURE to check +help +scene for the full list, but here are the biggies:%R%T* +scene/desc - This is now +scene/outcome.%R%T* +scenes/desc aka +Schedule/desc - this is now +scene/pitch.%R%T* You now use +scene/start to get a scheduled scene going.%R* The previous/ongoing scene listing (aka: +scene/old and etc) now supports pages to cut down on spam - and responds SOOO much faster.%R* Scenes are no longer location-bound. A scene is located wherever its creator is at the moment. Yeah, this gets along with spoof.%R* SceneSys now has an auto-join feature. When a scene's created, it will attempt to /join players in the room to it.%R* Pose IDs are visible now. they are used for the new versions of /undo and /redo and the new /edit. Just be careful with these!%R%R[ansi(h,JobSys:)] The other focal point of my efforts was cleaning up JobSys. As you can tell from the current state of it, that's not yet finished. The guts of the system are working great but the displays need a bit of work. There actually aren't any changed or new features (yet) but there might be some very soon. To explain...%R%R[ansi(h,Overall:)] The goal of 2.5 was redesigning and properly optimizing the database design that SceneSys, JobSys, and the upcoming new combat system version runs on. This involved rewriting basically every part of SceneSys and JobSys and a good chunk of other things (such as the login tracker and huge swaths of the account system) and wracking my brains for a while about how to migrate a the entire (VERY LARGE) database - and how to make the process viable across every game that I support. The project is probably the most ambitious and extensive that I've embarked upon for the last few years and I think it shows in the sheer amount of bugs and confusion that resulted in it. The improved framework opens a lot of doors however. SceneSys can now be extended to support things like channel logging as an example of what just wasn't possible with the old setup. 2.5's database schema will also be easier to work moving forward with other projects like migrating to Evennia (a python-based MU* server I'm developing for.) 2.5 brings the MUSHcode up to a new standard. Great things may be down the road, but for now? Hope you guys enjoy the advancements to SceneSys!
