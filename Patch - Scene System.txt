@@ You can get the latest version of Scenesys at: http://community.pennmush.org/blog/mercutio/2013/installing-scenesys
@@ This is a patch/setup repo for Mercutio's Scenesys!

@@ Integrates SceneSys with my code object indexer.
&scenesys u(coi)=locate(config(master_room),Scene System,TXxi)
@parent u(scenesys)=u(coi)

@@ Give players the ability to see their own CharID
&CMD`+CHARID u(scenesys)=$+charid:@assert setr(id,sql(SELECT player_id from scene_players where player_objid="%:"))=@nspemit %#=msghead(SCENESYS) You do not have a Char ID. Use +scene/setup to acquire one!;@nspemit %#=msghead(SCENESYS) Your unique Char_id is: [ansi(h,%q<id>)]

&CMD`+CHARID`OTHER u(sgo)=$+charid *:@include u(ccs)/INC`CHECKPC=%0,1,CHARID;@assert setr(id,sql(SELECT player_id from scene_players where player_objid="%q<t1objid>"))=@nspemit %#=msghead(SCENESYS) %q<t1name> does not have a Char ID.;@nspemit %#=msghead(SCENESYS) %q<t1name>'s unique Char_id is: [ansi(h,%q<id>)]

@@ Automatically setup new players!
&PLAYER`CREATE`SCENESYS u(scenesys)=+scene/setup %0

@@ BB PATCH - For integrating it with my BBS instead of Myrddin's.
&FN`GET`BBPOST u(scenesys)=match(u(u(bbs)/FUN`LISTPOSTS,v(data`scheduleboard_db)),before(grep(v(data`scheduleboard_db),*`HDR,Schedule #%0:),`))

@@ Put your board information here!
&DATA`SCHEDULEBOARD u(scenesys)=Scene Announcements
&DATA`SCHEDULEBOARD_DB u(scenesys)=

@@ Put your database name here!
&DATA`SQL`DATABASE u(scenesys)=

@@ You'll need to customize this for +scene <id> to display right.
&DATA`URL`BASE u(scenesys)=yoursitehere.net/scene/
&DATA`URL`VIEW u(scenesys)=view.php?id=

@@ Some function stuff for it to work.
&FN`IS`STAFF u(scenesys)=switch(isadmin(%0),#-1 FUNCTION *,orflags(%0,Wr),stext(0))

&INCLUDE`OVERRIDE u(scenesys)=@dol/inline @emit pose say semipose=@hook/override/inline %i0=me,override`ic

&OVERRIDE`IC u(scenesys)=$^(?s)(pose|semipose|say|@emit)(?\:/noeval)?(?\: +(.*))?$:@assert strlen(%2)=@nspemit %#=Huh?  (Type "help" for help.);th setq(r,speak(%#,switch(%1,pose,:,semipose,;,say,",@emit,|)%2));@include/nobreak me/include`lastpose`prepose=%qr,%:;@include/nobreak u(pot)/INC`ALTMAIN=%1,%2;@message/spoof uldefault(%l/D`CUSTRECP,lcon(%l),%#)=POSE FORMATTER FAIL!,u(pot)/FUN`FORMATPOSE,##,%#,switch(%1,pose,:,semipose,;,say,",@emit,|),%2;@include me/include`lastpose`postpose=%qr,%:;@include me/include`lastpose`catchpose=trimpenn(trimpenn(%qr,%t,r),%r),%:
@set u(scenesys)/OVERRIDE`IC=regexp

&FN`ISLOGGEDBOOL u(scenesys)=if(setr(LocalScene,u(fn`get`scene`recentatloc,objid(loc(%1)),1)),1,0)

&INCLUDE`LASTPOSE`CATCHPOSE u(scenesys)=@assert u(fn`is`ic,%1);@trig me/include`pose=[u(fn`get`name,%1)] , %1 , %0 , [u(fn`sql`timeformat)]

&INCLUDE`LASTPOSE`POSTPOSE u(scenesys)=@assert u(fn`is`ic,%1);@dolist/inline lockfilter(D`POT`FOOTER:1,uldefault(%l/D`CUSTRECP,lcon(%l),%#))=@pemit ##=header(<%b[u(fn`islogged,name(%1),%1,%0)]End of [ansi(hw,accname(%1))]'s pose%b>,,,,,,%i0) ; &lastpose %#=%qR ; &lastpose`secs %#=[secs()] ; &observe %1=0

&INCLUDE`LASTPOSE`PREPOSE u(scenesys)=@assert u(fn`is`ic,%1) ; @dol/inline if(setr(logged,u(fn`isloggedbool,name(%1),%1,%0)),uldefault(%l/D`CUSTRECP,lcon(%l),%#),lockfilter(D`POT`HEADER:1,uldefault(%l/D`CUSTRECP,lcon(%l),%#)))=@nspemit ##=if(cand(%q<logged>,nor(get(%i0/D`POT`HEADER),get(%i0/D`POT`FOOTER))),center(<%b[u(fn`islogged,name(%1),%1,%0)][ansi(+white,accname(%1))] has posed%b>,width(%i0)),header(<%b[u(fn`islogged,name(%1),%1,%0)][ansi(+white,accname(%1))] has posed%b>,,,,,,%i0))



@@ HELPFILE - SCENESYS
+help/addmain Roleplaying/+scene=This MUSH uses Scenesys by Mercutio @ M*U*S*H. SceneSys is a scene scheduling, tracking, and logging tool that works alongside [mudname()]'s Wiki.%R[ansi(hc,See Also:)] [pueblize(+scene/help,+scene/help)]%R[ansi(hc,Pose Recording Requirements:)] To be recorded in a joined scene, a pose must be at least ten words long, be made in a location with an exit leading to it and back, and may not contain 'OOC' in its first five characters. The pose headers/footers will alert you if a pose was or wasn't recorded.%R%R[ansi(hc,Running/Logging Commands)]%RThese commands are for anyone who wants to start and manage a scene.%R[align(5 72,,{[ansi(h,+scene/create title="<title text>")] - Begins a new scene.%R[ansi(h,+scene/create title="<title text>" announce="<announce text>")] - Like above but announces it to others.%R[ansi(h,+scene/title <id>=<text>)] - Changes a scene's title.%R[ansi(h,+scene/desc <id>=<text>)] - Gives a scene a description/short summary.%R[ansi(h,+scene/finish \[<id>\])] - Finishes a scene. ID will be current scene if not specified.%R[ansi(h,+scene/config <id>/scene_state=<#>)] - Changes scene state if necessary. 0 = Active. 1 = Paused. 2 = Unfinished. 3 = Finished.%R[ansi(h,+scene/config <id>/scene_private=<#>)] - Changes a scene's private status. If 1, it won't appear on the website. 0 is public.})]%R%R[ansi(hc,Participant Commands)]%R[align(5 72,,{[ansi(h,+scene/join \[<id>\])] - Joins a scene. Your poses will then be recorded. ID is unneeded if the scene just began in your current location.%R[ansi(h,+scene/deactivate \[<id>\])] - Stops your poses from being logged. If ID is empty it will assume your current scene.%R[ansi(h,+scene/activate \[<id>\])] - Sets your poses to record once more.%R[ansi(h,+scene/undo)] - Marks your last post to be ignored by the logger so it won't make it to the wiki. Used to fix poses made in error, typos, etc. See also [pueblize(+scene/help move,+scene/help move)]%R[ansi(h,+scene/recall <#>)] - Displays the last <#> of recorded poses in your current scene.})]%R%R[ansi(hc,Listing Commands)]%R[align(5 72,,{[ansi(h,+scene)] - Displays all scenes you are currently participating in.%R[ansi(h,+scene <id>)] - Show details of a particular scene.%R[ansi(h,+scene/mine/finished)] - Show all of the finished scenes you've been in.%R[ansi(h,+scene/mine/unfinished)] - Show all of the unfinished scenes you're in.})]

