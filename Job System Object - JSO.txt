@@ DEPENDENCIES - Core

@switch/inline isdbref(u(jso))=0,{@tel create(Job System Object <JSO>)=config(master_room)}
&jso u(coi)=locate(config(master_room),Job System Object <JSO>,TXxi)
@parent u(jso)=u(coi)
@set u(jso)=WIZARD SAFE !NO_COMMAND

&CMD`+JOB u(jso)=$^(?s)(?\:\+)?(?\:job|request)(?\:/(\S+))?(?\: +(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%1,setunion(get(u(jso)/VAR`PLAYFLAGS),if(isadmin(%#),get(u(jso)/VAR`ADMINFLAGS)),|,|),|,v(VAR`ANNOUNCETEXT),switch,switch;@include u(jso)/INC`[strfirstof(%q<switch>,MAIN)]=%2,%3
@set u(jso)/CMD`+JOB=regexp

&VAR`PLAYFLAGS u(jso)=ADD|COMMENT|PAGE|LOG|VOTE|ALL
&VAR`ADMINFLAGS u(jso)=APPROVE|CANCEL|DENY|CLAIM|UNCLAIM|PRIORITY|CATMAKE|CATDELETE|CATRENAME|CATVISIBLE|REVIVE|DELETE|SEARCH|FINISH|MOVE|CATDESC

&INC`CATMAKE u(jso)=@assert orflags(%#,W)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Wizard only command!;@assert strlen(%0)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Category name field empty.;@include u(jso)/INC`NAMECHECK=%0;@break isdbref(locate(me,%q<name>,TXxi))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: A Category of that name already exists.;@assert isdbref(setr(cat,create(%q<name>)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Could not create Category %q<name>.;@tel %q<cat>=u(jso);@power %q<cat>=many_attribs;&CONFIG`VISIBLE %q<cat>=1;@set %q<cat>=SAFE;@include u(jso)/INC`ALERT={%n Created %q<name> Category}

&INC`NAMECHECK u(jso)=@assert strlen(%0)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: New name field empty.;@assert regmatchi(setr(name,ucstr(%0)),^(\[A-Z\]\{2\,5\})$)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Categories must be 2-5 alphabetical characters, no spaces allowed.

&FUN`FINDCAT u(jso)=locate(u(jso),%0,TXxi)

&INC`FINDCAT u(jso)=@assert strlen(%0)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Category field empty. Your choices are: [itemize(setr(choices,iter(filterbool(#lambda/if(isadmin(%#),1,strfirstof(get(\%0/CONFIG`VISIBLE),1)),lthings(u(jso))),name(%i0),%b,|)),|,and,\,)];@switch/inline gt(match(setr(choices,iter(filterbool(#lambda/if(isadmin(%#),1,strfirstof(get(\%0/CONFIG`VISIBLE),1)),lthings(u(jso))),name(%i0),%b,|)),setr(choice,%0),|),0)=0,{@assert strlen(setr(choice,grab(%q<choices>,%q<choice>*,|)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Category not found. Your choices are: [itemize(%q<choices>,|,and,\,)]};@assert isdbref(setr(cat,u(u(jso)/FUN`FINDCAT,%q<choice>)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Category not found.

&INC`CATRENAME u(jso)=@assert orflags(%#,W)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Wizard only command!;@include u(jso)/INC`FINDCAT=%0;@include u(jso)/INC`NAMECHECK=%1;@assert isdbref(u(u(jso)/FUN`FINDCAT,%q<name>))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: A Category by that name already exists.;@name %q<cat>=%q<name>;@include u(jso)/INC`ALERT={%n changed '[ucstr(%0)]' Category's Name to '%1'}

&INC`CATDELETE u(jso)=@assert orflags(%#,W)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Wizard only command!;@include u(jso)/INC`FINDCAT=%0;@include u(ccs)/INC`VERIFY={WARNING: This will delete the Category '[name(%q<cat>)]' from the Jobs System. ALL DATA RELATED TO THIS CATEGORY WILL BE PERMANENTLY DELETED. Do not use this command unless you know exactly what you are doing! To verify, type the same command again within 10 seconds to verify},JOB CATEGORY DELETE %q<id>;@include u(jso)/INC`ALERT={%n deleted '[name(%q<cat>)]' Category};@set %q<cat>=!SAFE;@nuke %q<cat>;@nuke %q<cat>

&INC`CATPRIORITY u(jso)=@assert orflags(%#,W)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Wizard only command!;@include u(jso)/INC`FINDCAT=%0;@assert strlen(%1)=@nspemit %#=ERROR; Priority field empty.;@assert and(gte(%1,0),isint(%1))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Priorities must be in whole numbers greater than 0.;&CONFIG`PRIORITY %q<cat>=%1;@include u(jso)/INC`ALERT={%n changed '[name(%q<cat>)]' Category's Priority to '%1'}

&INC`CATDESC u(jso)=@assert orflags(%#,W)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Wizard only command!;@include u(jso)/INC`FINDCAT=%0;@assert strlen(%1)=@nspemit %#=ERROR; Priority field empty.;@switch/inline strlen(%1)=0,{&CONFIG`DESC %q<cat>;@include u(jso)/INC`ALERT=JOB,{Cleared '[name(%q<cat>)]' Category's Desc},%#},{&CONFIG`DESC %q<cat>=%1;@include u(jso)/INC`ALERT={%n changed '[name(%q<cat>)]' Category's Desc to '%1'}}

&INC`MAIN u(jso)=@switch/inline words(%0,/)=1,{@include u(jso)/INC`SHOWCAT=before(%0,/),%1,0},2,{@include u(jso)/INC`SHOWJOB=before(%0,/),after(%0,/)},0,{@include u(jso)/INC`SHOWCATS},{@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Unsupported number of arguments.}

&INC`ALL u(jso)=@switch/inline words(%0,/)=1,{@include u(jso)/INC`SHOWCAT=before(%0,/),%1,1},2,{@include u(jso)/INC`SHOWJOB=before(%0,/),after(%0,/)},0,{@include u(jso)/INC`SHOWCATS},{@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Unsupported number of arguments.}

&INC`FINDJOB u(jso)=@assert strlen(%0)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Jobs must be addressed by their IDs.;@assert hasattr(%q<cat>/[setr(job,%0)])=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Job %0 not found.;@assert or(isadmin(%#),strmatch(%:,get(%q<cat>/%q<job>`SUBMITTER)),match(get(%q<Cat>/%q<job>`HANDLERS),%:),match(get(%q<cat>/CONFIG`HANDLERS),%:))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: You do not have permission to access that Job.

&INC`SHOWJOB u(jso)=@include u(jso)/INC`FINDCAT=%0;@include u(jso)/INC`FINDJOB=%1;@nspemit %#=header(Job %q<job>: [get(%q<cat>/%q<job>`TITLE)]);@nspemit %#=ljust(rjust(ansi(hc,Creator:),10)%B[strfirstof(name(get(%q<cat>/%q<job>`SUBMITTER)),Unknown)],45)[ansi(hc,Created:)]%B[strfirstof(timefmt($b $d,get(%q<cat>/%q<job>`SUBMITTED)),Unknown)];@nspemit %#=ljust(rjust(ansi(hc,Status:),10)%B[strfirstof(get(%q<cat>/%q<job>`STATUS),New)],43)[rjust(ansi(hc,Handlers:),10)]%B[strfirstof(itemize(iter(get(%q<cat>/%q<job>`HANDLERS),name(%i0),%b,|),|,and,\,),None)];@nspemit %#=rjust(ansi(hc,Details:),10)%B[get(%q<cat>/%q<job>)];@switch/inline gt(words(setr(comments,sortkey(#lambda/last(\%0,`),lattr(%q<cat>/%q<job>`COMMENTS`*)))),0)=1,{@dolist/inline %q<comments>={@nspemit %#=subheader(name(get(%q<cat>/%i0`SUBMITTER)) added on [convsecs(get(%q<cat>/%i0`SUBMITTED))]);@nspemit %#=get(%q<cat>/%i0)}};@switch/inline gt(words(get(%q<cat>/%q<job>`VOTES),|),0)=1,{@nspemit %#=subheader(Votes);@dolist/inline/delimit | [filterbool(#lambda/match(setunion(setr(votetypes,iter(get(%q<cat>/%q<job>`VOTES),last(\%i0,~),|,|)),%q<votetypes>,|,|),\%0,|),Yes|No|Undecided,|,|)]={@nspemit %#=ansi(h,%i0:) [itemize(setr(total,iter(graball(get(%q<cat>/%q<job>`VOTES),*~%i0,|,|),name(before(%i0,~)),|,|)),|,and,\,)]%R%TTotal: [words(%q<total>,|)]}};@nspemit %#=header();@include u(jso)/INC`UPDCHECKED=%#,%q<cat>,%q<job>

&INC`SHOWCAT u(jso)=@include u(jso)/INC`FINDCAT=%0;@assert valnum(setr(page,firstof(%1,1)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Pages must be whole, positive numbers!;@nspemit %#=header(if(isadmin(%#),mudname(),Your) Pending [name(%q<cat>)] Jobs);@nspemit %#=ansi(hc,*)%B%B[ansi(hc,Job#)]%B[ansi(hc,Title)][space(21)][ansi(hc,By)][space(14)][ansi(hc,Handler)][space(9)][ansi(hc,Added)]%B%B[ansi(hc,Cmts)];@nspemit %#=subheader();@dolist/inline elements(revwords(setr(jobs,filterbool(#lambda/if(isadmin(%#),1,or(strmatch(%:,get(%q<cat>/\%0`SUBMITTER)),match(get(%q<Cat>/\%0`HANDLERS),%:),match(get(%q<Cat>/CONFIG`HANDLERS),%:))),if(%3,filterbool(#lambda/strmatch(get(%q<cat>/\%0`SUBMITTER),%q<t1objid>),if(%2,setdiff(lattr(%q<cat>/*),CONFIG),filterbool(#lambda/not(strlen(get(%q<cat>/\%0`STATUS))),setdiff(lattr(%q<cat>/*),CONFIG)))),if(%2,setdiff(lattr(%q<cat>/*),CONFIG),filterbool(#lambda/not(strlen(get(%q<cat>/\%0`STATUS))),setdiff(lattr(%q<cat>/*),CONFIG))))))),lnum(if(eq(1,%q<page>),1,mul(30,sub(%q<page>,1))),sub(mul(30,%q<page>),1)))={th setq(color,strfirstof(getstat(u(jso)/VAR`PRIORITYCOLORS,strfirstof(get(%q<cat>/%i0`PRIORITY),get(%q<cat>/CONFIG`PRIORITY))),n));@nspemit %#=ljust(ansi(%q<color>,strfirstof(left(get(%q<cat>/%i0`STATUS),1),if(gt(get(%q<cat>/%i0`UPDATED),baseconv(getstat(%#/D`JOBDATA`%q<cat>,%i0),64,10)),*,P))),2)[rjust(pueblize(ansi(%q<color>,%i0),+job [name(%q<cat>)]/%i0),5)]%B[ljust(ansi(%q<color>,pueblize(left(get(%q<cat>/%i0`TITLE),25),+job [name(%q<cat>)]/%i0)),26)][ljust(ansi(%q<color>,left(name(get(%q<cat>/%i0`SUBMITTER)),15)),16)][ljust(ansi(%q<color>,if(words(setr(handlers,get(%q<cat>/%i0`HANDLERS))),if(eq(words(%q<handlers>),1),name(%q<handlers>),Multiple),-)),16)][ansi(%q<color>,timefmt($b $d,get(%q<cat>/%i0`SUBMITTED)))]%B[rjust(\([nattr(%q<cat>/%i0`COMMENTS`*)]\),3)]};@nspemit %#=subheader(if(eq(1,%q<page>),ansi(hx,<),pueblize(ansi(hg,<),+job[if(%2,/all)] [name(%q<cat>)]=[sub(%q<page>,1)])) Showing Page %q<page> of [setr(max,bound(ceil(fdiv(words(%q<jobs>),30)),1))] [if(or(eq(%q<max>,%q<page>),eq(%q<max>,0)),ansi(hx,>),pueblize(ansi(hg,>),+job[if(%2,/all)] [name(%q<cat>)]=[add(%q<page>,1)]))])

&INC`SHOWCATS u(jso)=@nspemit %#=header(mudname() Job Categories);@nspemit %#=ljust(ansi(hc,NAME),7)[ansi(hc,Total)]%B%B%B[ansi(hc,App)][space(4)][ansi(hc,Dny)][space(4)][ansi(hc,Pen)][space(3)][ansi(hc,Pri)][space(3)][ansi(hc,Description)];@nspemit %#=header();@dolist/inline sort(filterbool(#lambda/or(isadmin(%#),get(\%0/CONFIG`VISIBLE),match(get(\%0/CONFIG`HANDLERS),%:)),lthings(u(jso))),namei)={@nspemit %#=ljust(left(pueblize(if(get(%i0/CONFIG`VISIBLE),name(%i0),ansi(hx,name(%i0))),+job [name(%i0)]),6),7)%B[ljust(rjust(words(setr(jobs,filterbool(#lambda/if(isadmin(%#),1,strmatch(%:,get(%i0/\%0`SUBMITTER))),setdiff(lattr(%i0/*),CONFIG)))),4),5)][ljust(rjust(words(filterbool(#lambda/strmatch(Approved,get(%i0/\%0`STATUS)),%q<jobs>)),5),6)][ljust(rjust(words(filterbool(#lambda/strmatch(Denied,get(%i0/\%0`STATUS)),%q<jobs>)),6),7)][ljust(rjust(words(filterbool(#lambda/strmatch(Pending,strfirstof(get(%i0/\%0`STATUS),Pending)),%q<jobs>)),6),10)][ljust(rjust(ansi(strfirstof(getstat(u(jso)/VAR`PRIORITYCOLORS,get(%i0/CONFIG`PRIORITY)),n),strfirstof(get(%i0/CONFIG`PRIORITY),-)),2),4)]%B[if(strlen(get(%i0/CONFIG`DESC)),u(%i0/CONFIG`DESC))]};@nspemit %#=header()

@@ [if(words(setr(handlers,filterbool(#lambda/isobjid(\%0),get(%i0/CONFIG`HANDLERS)))),left(itemize(iter(%q<handlers>,name(%i0),%B,|),|,and,\,),40),-)]

&VAR`PRIORITYCOLORS u(jso)=1~hg|2~hc|3~y|4~hr

&INC`ADD u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@assert strlen(setr(title,left(after(%0,/),25)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Title field empty!;@include u(jso)/INC`MAKEJOB=%:,%q<cat>,%q<title>,strfirstof(%1,after(%0,/));@nspemit %#=announce(v(VAR`ANNOUNCETEXT))%BYou have Submitted your Request in the [ucstr(%q<choice>)] Category: %q<title>;@include u(jso)/INC`UPDCHECKED=%#,%q<cat>,%q<job>;@include u(jso)/INC`ALERT={%n submitted [pueblize(name(%q<cat>) Job %q<job>: %q<title>,+job [name(%q<cat>)]/%q<job>)]}

&INC`MAKEJOB u(jso)=@assert isobjid(%0);@assert match(lthings(u(jso)),%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Category Object not found!;@assert strlen(%2)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Title field empty.;@assert strlen(%3)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Job text field empty.;@break gt(nattr(%1/*),1700)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: [name(%1)] is full and cannot accept any more jobs.;&[setr(job,nextslot(%1))] %1=%3;&%q<job>`SUBMITTER %1=%0;&%q<job>`SUBMITTED %1=secs();&%q<job>`TITLE %1=%2;@include u(jso)/INC`MAKELOG=%0,%1,%q<job>,{Job Created};@include u(jso)/INC`UPDCHECKED=%0,%1,%q<job>

&INC`MAKELOG u(jso)=@assert isdbref(%0);@assert isdbref(%1);@assert hasattr(%1/%2);@assert strlen(%3);&[setr(logattr,%2`LOG`[setr(log,nextslot(%1,%2`LOG))])] %1=%3;&%q<logattr>`SUBMITTER %1=%0;&%q<logattr>`SUBMITTED %1=secs();&%2`UPDATED %q<cat>=secs()

&INC`UPDCHECKED u(jso)=th setstat(%0/D`JOBDATA`%1,%2,baseconv(secs(),10,64))

&INC`ALERT u(jso)=@nspemit/list setunion(setunion(setunion(filterbool(#lambda/isadmin(\%0),setunion(lwho(),lwho())),setunion(get(%q<cat>/%q<job>`HANDLERS),get(%q<cat>/CONFIG`HANDLERS))),%:),get(%q<cat>/%q<job>`SUBMITTER))=announce(v(VAR`ANNOUNCETEXT))%B%0;@switch/inline gt(v(VAR`CHANNELANNOUNCE),0)=1,{@nscemit/noisy v(VAR`ANNOUNCECHANNEL)=%0}

&VAR`CHANNELANNOUNCE u(jso)=1
&VAR`ANNOUNCECHANNEL u(jso)=Staff Reports

&INC`COMMENT u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@assert strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job was marked %q<status>. Comments cannot be added.;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Comment text field empty.;@include u(jso)/INC`MAKECOMMENT=%:,%q<cat>,%q<job>,%1;@include u(jso)/INC`UPDCHECKED=%:,%q<cat>,%q<job>;@include u(jso)/INC`ALERT={[ansi(h,%n)] added a Comment to [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)],+job [name(%q<cat>)]/%q<job>)]};@include u(jso)/INC`MAKELOG=%:,%q<cat>,%q<job>,{Comment was added}

&INC`MAKECOMMENT u(jso)=&[setr(comment,%2`COMMENTS`[setr(comment,nextslot(%1,%2`COMMENTS))])] %1=%3;&%q<comment>`SUBMITTER %1=%0;&%q<comment>`SUBMITTED %1=secs()

&INC`MOVE u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@assert strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job was marked %q<status>. Job cannot be moved.;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: New board text field empty.;@assert isdbref(setr(newcat,u(u(jso)/FUN`FINDCAT,%1)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Move-To Category not found.;@assert setr(newjob,nextslot(%q<newcat>))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Move impossible due to code error.;@include u(jso)/INC`MAKELOG=%:,%q<cat>,%q<job>,{Job moved to [name(%q<newcat>)]};@include u(jso)/INC`ALERT={ansi(h,%n) moved [name(%q<cat>)] Job: %q<job> [get(%q<cat>/%q<job>`TITLE)] to the [pueblize(name(%q<newcat>),+job [name(%q<newcat>)]/%q<newjob>)] Category.};@include u(ccs)/INC`CPTREE=%q<cat>,%q<job>,%q<newcat>,%q<newjob>;@set %q<cat>=!SAFE;@wipe %q<cat>/%q<job>;@set %q<cat>=SAFE

&INC`VOTE u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@assert strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job was marked %q<status>. Votes cannot be changed.;@break strmatch(%:,get(%q<cat>/%q<job>`SUBMITTER))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: You may not vote on your own Jobs.;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Vote field empty.;@assert regmatchi(%1,^(Yes|No|Undecided)$)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Vote must be Yes, No, or Undecided.;th setstat(%q<cat>/%q<job>`VOTES,objid(%#),capnames(%1));@include u(jso)/INC`UPDCHECKED=%:,%q<cat>,%q<job>;@include u(jso)/INC`ALERT={[ansi(h,%n)] set [poss(%#)] Vote on [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)],+job [name(%q<cat>)]/%q<job>)] to: [capnames(%1)]};@include u(jso)/INC`MAKELOG=%:,%q<cat>,%q<job>,{Voted [capnames(%1)]}

&INC`SEARCH u(jso)=@include u(ccs)/INC`CHECKPC=after(%0,/),1,JOBS;@include u(jso)/INC`SHOWCAT=before(%0,/),%1,1,1

&INC`FINISH u(jso)=@include u(jso)/INC`APPROVE
&INC`APPROVE u(jso)=@include u(jso)/INC`DOCOMPLETE=%0,strfirstof(%1,Enjoy!),Approved
&INC`DENY u(jso)=@include u(jso)/INC`DOCOMPLETE=%0,strfirstof(%1,Sorry.),Denied
&INC`CANCEL u(jso)=@include u(jso)/INC`DOCOMPLETE=%0,strfirstof(%1,All set.),Canceled

&INC`DOCOMPLETE u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@assert strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job was marked %q<status> already.;@include u(jso)/INC`MAKECOMMENT=%:,%q<cat>,%q<job>,{%1%R%RThe Job was %2.};@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Message field empty.;&%q<job>`STATUS %q<cat>=%2;@include u(jso)/INC`ALERT={ansi(h,%n) %2 [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)],+job [name(%q<cat>)]/%q<job>)]};@include u(jso)/INC`MAKELOG=%:,%q<cat>,%q<job>,{Job was marked %2}

&INC`LOG u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@nspemit %#=header(name(%q<cat>) Job %q<job> Log: [get(%q<cat>/%q<job>`TITLE)]);th iter(lattr(%q<cat>/%q<job>`LOG`*),nspemit(%#,ansi(h,From [name(get(%q<cat>/%i0`SUBMITTER))] on [convsecs(get(%q<cat>/%i0`SUBMITTED))]:)%R[get(%q<cat>/%i0)]));@nspemit %#=header();@include u(jso)/INC`UPDCHECKED=%#,%q<cat>,%q<job>

&INC`PRIORITY u(jso)=@switch/inline words(%0,/)=1,{@include u(jso)/INC`FINDCAT=%0;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Priority field empty.;@assert valnum(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Priority must be a whole, positive number.;break eq(%1,get(%q<cat>/CONFIG`PRIORITY))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Category is already that Priority.;&CONFIG`PRIORITY %q<cat>=%1;@include u(jso)/INC`ALERT={[ansi(h,%n)] changed the priority of [pueblize(name(%q<cat>) Job Category to: %1,+job [name(%q<cat>)])]}},2,{@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@assert strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job was marked %q<status> already. Its priority cannot be changed.;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Priority field empty.;@assert valnum(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Priority must be a whole, positive number.;break eq(%1,get(%q<cat>/%q<job>`PRIORITY))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Job is already that Priority.;&%q<job>`PRIORITY %q<cat>=%1;@include u(jso)/INC`ALERT={[ansi(h,%n)] changed the priority of [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)] to: %1,+job [name(%q<cat>)]/%q<job>)]};@include u(jso)/INC`MAKELOG=%:,%q<cat>,%q<job>,{Job Priority changed to: %1}},{@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Unsupported number of arguments.}

&INC`CATVISIBLE u(jso)=@include u(jso)/INC`FINDCAT=%0;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: No value added to set VISIBLE to.;@[if(%1,break,assert)] get(%q<cat>/CONFIG`VISIBLE)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: [name(%q<cat>)] is [if(%1,already,not)] set VISIBLE.;&CONFIG`VISIBLE %q<cat>=t(%1);@nspemit %#=announce(v(VAR`ANNOUNCETEXT))%BYou set [name(%q<cat>)] to [if(%1,Visible,Hidden)]

&INC`CLAIM u(jso)=@include u(jso)/INC`DOCLAIM=%0,%1,0
&INC`UNCLAIM u(jso)=@include u(jso)/INC`DOCLAIM=%0,%1,1

&INC`DOCLAIM u(jso)=@switch/inline words(%0,/)=1,{@include u(jso)/INC`FINDCAT=%0;@switch/inline gt(strlen(%1),0)=1,{@assert isdbref(setr(target,pmatch(%1)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: %1 [if(strmatch(%q<target>,#-2*),matches multiple players.,does not match a player.)]},0,{th setq(target,%#)};@[if(%2,assert,break)] match(get(%q<cat>/CONFIG`HANDLERS),objid(%q<target>))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Target is [if(%2,Not,Already)] a handler for that Category.;&CONFIG`HANDLERS %q<cat>=filterbool(#lambda/isobjid(\%0),set[if(%2,diff,union)](get(%q<cat>/CONFIG`HANDLERS),objid(%q<target>)));@include u(jso)/INC`ALERT={[ansi(h,%n)] [if(strlen(%1),if(%2,removed,added) a handler [if(%2,from,to)] the [pueblize(name(%q<cat>) Job Category,+job [name(%q<cat>)])]: [name(%q<target>)],if(%2,unclaimed,claimed) the [pueblize(name(%q<cat>) Job Category,+job [name(%q<cat>)])])]}},2,{@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@assert strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job was marked %q<status> already. Its claim status cannot be changed.;@switch/inline gt(strlen(%1),0)=1,{@assert isdbref(setr(target,pmatch(%1)))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: %1 [if(strmatch(%q<target>,#-2*),matches multiple players.,does not match a player.)]},0,{th setq(target,%#)};@[if(%2,assert,break)] match(get(%q<cat>/%q<job>`HANDLERS),objid(%q<target>))=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Target is [if(%2,Not,Already)] a handler for that Job.;&%q<job>`HANDLERS %q<cat>=filterbool(#lambda/isobjid(\%0),set[if(%2,diff,union)](get(%q<cat>/%q<job>`HANDLERS),objid(%q<target>)));@include u(jso)/INC`ALERT={[ansi(h,%n)] [if(strlen(%1),if(%2,removed,added) a handler [if(%2,from,to)] [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)],+job [name(%q<cat>)]/%q<job>)]: [name(%q<target>)],if(%2,unclaimed,claimed) [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)],+job [name(%q<cat>)]/%q<job>)])]};@include u(jso)/INC`MAKELOG=%:,%q<Cat>,%q<job>{Job Handler [if(%2,Added,Removed)]: [name(%q<target>)]}},{@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Unsupported number of arguments.}

&INC`REVIVE u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@break strmatch(setr(status,strfirstof(get(%q<cat>/%q<job>`STATUS),Pending)),Pending)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: That job is Pending. Revive is unnecessary.;@assert strlen(%1)=@nspemit %#=announce(v(VAR`ANNOUNCETEXT)) ERROR: Message field empty.;@include u(jso)/INC`MAKECOMMENT=%:,%q<cat>,%q<job>,{%1%R%RThe Job was Revived.};&%q<job>`STATUS %q<cat>;@include u(jso)/INC`ALERT={[ansi(h,%n)] Revived [pueblize(name(%q<cat>) Job %q<job>: [get(%q<cat>/%q<job>`TITLE)],+job [name(%q<cat>)]/%q<job>)]};@include u(jso)/INC`MAKELOG=%:,%q<cat>,%q<job>,{Job was Revived}

&INC`DELETE u(jso)=@include u(jso)/INC`FINDCAT=before(%0,/);@include u(jso)/INC`FINDJOB=after(%0,/);@include u(ccs)/INC`VERIFY={WARNING: This will delete Job %q<job> from [name(%q<cat>)]. ALL DATA RELATED TO THIS JOB WILL BE PERMANENTLY DELETED. Do not use this command unless you know exactly what you are doing! To verify, type the same command again within 10 seconds to verify},JOB %q<cat> %q<job>;@include u(jso)/INC`ALERT={[ansi(h,%n)] [ansi(hr,DELETED)] [name(%q<cat>)] Job %q<job>: [get(%q<cat>/%q<job>`TITLE)]};@set %q<cat>=!SAFE;@wipe %q<cat>/%q<job>;@set %q<cat>=SAFE

&VAR`ANNOUNCETEXT u(jso)=JOBS