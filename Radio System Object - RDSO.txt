@@ DEPENDENCIES - CORE

@switch/inline isdbref(u(rdso))=0,{@tel create(Radio System Object <RDSO>)=config(master_room)}
&rdso u(coi)=locate(config(master_room),Radio System Object <RDSO>,TXxi)
@parent u(rdso)=u(coi)
@set u(rdso)=WIZARD !NO_COMMAND
@lock/command u(rdso)=!POWER^GUEST

&RFN`MSGHEAD u(rdso)=msghead(v(VAR`MSGHEAD))
&VAR`MSGHEAD u(rdso)=RADIO

&CMD`+RADIO u(rdso)=$^(?s)(?\:\+)?(?\:radio|freq)(?\:/(\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@include u(ccs)/INC`PARTIAL=%1,setunion(get(u(rdso)/VAR`PLAYFLAGS),if(isadmin(%#),get(u(rdso)/VAR`ADMINFLAGS)),|,|),|,RADIO,switch,switch;@include u(rdso)/INC`[strfirstof(%q<switch>,MAIN)]=%2,%3
@set u(rdso)/CMD`+RADIO=regexp

&VAR`PLAYFLAGS u(rdso)=INIT|RENAME|TOGGLE|FREQ|KEY|WIPE|RECALL|CODENAME|NOSPOOF|TITLE|NSRECALL|WHO
&VAR`ADMINFLAGS u(rdso)=LISTFREQ|MONITOR|EMIT

&CMD`+RADIOSHORT u(rdso)=$^(?s)\.(\w+)(?\:/(\S+)?)?(?\: +(.*))?$:@include u(rdso)/CMD`+RADIO=%0,%2,%1,%3
@set u(rdso)/CMD`+RADIOSHORT=regexp

&INC`INIT u(rdso)=@include u(rdso)/INC`SLOTNAMECHECK;@break hasattr(%#/D`RADIO`%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That slot already exists!;@include u(rdso)/INC`FREQCHECK=%1;&D`RADIO`%0 %#=%1;&D`RADIO`%0`NAME %#=%0;@nspemit %#=u(RFN`MSGHEAD) Slot '%0' initialized and tuned to Frequency '%1'.;@include u(rdso)/INC`ENABLE=%:,%1

&INC`FREQCHECK u(rdso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No frequency entered for the new Radio slot!;@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Frequency Field empty.;@assert regmatchi(%0,\[0-9\]+\\.\[0-9\]+)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Frequencies must be in the form of (number).(number), example 105.32

&INC`MAIN u(rdso)=@switch/inline strlen(%0)=0,{@include u(rdso)/INC`LIST},{@include u(jail)/INC`JAILCHECK;@include u(rdso)/INC`CHECKSLOT;@assert strlen(get(%#/%q<slot>))=@nspemit %#=u(RFN`MSGHEAD) ERROR: That Slot has no Frequency set!;@assert default(%#/%q<slot>`ON,1)=@nspemit %#=u(RFN`MSGHEAD) That Slot is turned off.;@include u(rdso)/INC`BROADCAST}

&INC`LIST u(rdso)=@nspemit %#=header(Your Radio Config);@nspemit %#=ansi(firstcolor(%#,RADIO`COLNAME,DEFAULT`COLNAME),align(14 8 19 18 11 3,Name,Freq,Codename,Title,Encrypt,Sta));@nspemit %#=separator();@dolist/inline sortkey(#lambda/last(\%0,`),lattr(%#/D`RADIO`*))=@nspemit %#=align(14 8 19 18 11 3,default(%#/%i0`NAME,last(%i0,`)),get(%#/%i0),get(%#/%i0`CODENAME),get(%#/%i0`TITLE),default(%#/%i0`KEY,--None--),if(default(%#/%i0`ON,1),On,Off));@nspemit %#=header()

&INC`SLOTNAMECHECK u(rdso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No Slot entered to Initialize.;@assert regmatchi(%0,^\\w+$)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Slots may only use letters, numbers, and underscores. (case insensitive.);@assert valid(attrname,D`RADIO`%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Slot name is too long.

&INC`CHECKSLOT u(rdso)=@assert strlen(%0)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No Slot entered to use.;@include u(ccs)/INC`PARTIAL=%0,iter(lattr(%#/D`RADIO`*),last(%i0,`),%b,|),|,v(VAR`MSGHEAD),found,Radio Slot;@assert hasattr(%#/D`RADIO`%q<found>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: No slot by that name.;th setq(slot,D`RADIO`%q<found>);th setq(slotname,default(%#/D`RADIO`%q<found>`NAME,ucstr(%q<found>)));th setq(freq,get(%#/%q<slot>))

&INC`FREQ u(rdso)=@include u(rdso)/INC`CHECKSLOT;@include u(rdso)/INC`FREQCHECK=%1;&D`RADIO`%0 %#=%1;&D`RADIO`%0`ON %#=1;@nspemit %#=u(RFN`MSGHEAD) You tune Radio Slot [ucstr(%0)] to %1.

&INC`RENAME u(rdso)=@include u(rdso)/INC`SLOTNAMECHECK;@include u(rdso)/INC`SLOTNAMECHECK=%1;@switch/inline strmatch(%0,%1)=0,{@include u(ccs)/INC`MVTREE=%#,D`RADIO`%0,%#,D`RADIO`%1};&D`RADIO`%1`NAME %#=%1;@nspemit %#=u(RFN`MSGHEAD) You rename Slot '%0' to '%1'

&INC`CODENAME u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline strlen(%1)=0,{@nspemit %#=u(RFN`MSGHEAD) Radio Slot %q<slotname>'s Codename has been Cleared!;&%q<slot>`CODENAME %#},{@break charin(%1,%r %t)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Codenames may not contain linebreaks or tabs.;@break gt(strlen(%1),config(player_name_len))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Codename is beyond the allowed [config(player_name_len)] characters.;@break nsearch(all,eplayer,\[strlen(wildgrepi(##,D`RADIO`*`CODENAME,%1))\])=@nspemit %#=u(RFN`MSGHEAD) ERROR: Another player is already using that Codename.;@break pmatch(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Codenames may not match any player's name or alias.;@nspemit %#=u(RFN`MSGHEAD) Your Codename on Radio Slot %q<slotname> is now: %1;&%q<slot>`CODENAME %#=%1}

&INC`TITLE u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline strlen(%1)=0,{@nspemit %#=u(RFN`MSGHEAD) Radio Slot %q<slotname>'s Title has been Cleared!;&%q<slot>`TITLE %#},{@break charin(%1,%r %t)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Titles may not contain linebreaks or tabs.;@nspemit %#=u(RFN`MSGHEAD) Your Title on Radio Slot %q<slotname> is now: %1;&%q<slot>`TITLE %#=%1}

&INC`KEY u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline strlen(%1)=0,{@nspemit %#=u(RFN`MSGHEAD) Radio Slot %q<slotname>'s Encryption Key has been Cleared!;&%q<slot> %#},{@nspemit %#=u(RFN`MSGHEAD) Radio Slot %q<slotname>'s Encryption Key is now: %1;&%q<slot>`KEY %#=%1}

&INC`TOGGLE u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline default(%#/%q<slot>`ON,1)=1,{@nspemit %#=u(RFN`MSGHEAD) You switch off %q<slotname>.;&%q<slot>`ON %#=0;@include u(rdso)/INC`DISABLE=%:,%q<freq>},0,{@nspemit %#=u(RFN`MSGHEAD) You switch on %q<slotname>.;&%q<slot>`ON %#=1;@include u(rdso)/INC`ENABLE=%:,%q<freq>}

&INC`MONITOR u(rdso)=@switch/inline t(getstat(%#/D`RADIO,Monitor))=1,{@nspemit %#=u(RFN`MSGHEAD) You switch off Monitoring.;th setstat(%#/D`RADIO,Monitor,0)},0,{@nspemit %#=u(RFN`MSGHEAD) You switch on Monitoring.;th setstat(%#/D`RADIO,Monitor,1)}

&INC`NOSPOOF u(rdso)=@switch/inline t(getstat(%#/D`RADIO,Nospoof))=1,{@nspemit %#=u(RFN`MSGHEAD) You switch off Nospoof mode.;th setstat(%#/D`RADIO,Nospoof,0)},0,{@nspemit %#=u(RFN`MSGHEAD) You switch on Nospoof.;th setstat(%#/D`RADIO,Nospoof,1)}

&INC`WIPE u(rdso)=@include u(rdso)/INC`CHECKSLOT;@include u(ccs)/INC`VERIFY={WARNING: This will clean all data from Radio Slot %q<slotname>. This action cannot be undone. Type the same command again within ten seconds to verify.},RADIO WIPE %q<slot>;@wipe %#/%q<slot>;@nspemit %#=u(RFN`MSGHEAD) Radio Slot %q<slotname> wiped!

&INC`EMIT u(rdso)=@switch/inline regmatchi(%0,^\\d+\.\\d+$)=0,{@include u(rdso)/INC`CHECKSLOT},1,{th setq(freq,%0)};@include u(rdso)/INC`BROADCAST=%0,%1,1

&INC`ENABLE u(rdso)=@switch/inline isdbref(setr(log,locate(u(rdso),%1,TXxi)))=0,{@tel setr(log,create(%1))=u(rdso);@power %q<log>=many_attribs};&MEMBERS %q<log>=setunion(get(%q<log>/MEMBERS),%0)
&INC`DISABLE u(rdso)=@switch/inline isdbref(setr(log,locate(u(rdso),%1,TXxi)))=0,{@tel setr(log,create(%1))=u(rdso);@power %q<log>=many_attribs};&MEMBERS %q<log>=setdiff(get(%q<log>/MEMBERS),%0)

&INC`BROADCAST u(rdso)=@assert strlen(%1)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Nothing entered to say!;@assert strlen(%q<freq>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: Frequency invalid.;@switch/inline isdbref(setr(log,locate(u(rdso),%q<freq>,TXxi)))=0,{@tel setr(log,create(%q<freq>))=u(rdso);@power %q<log>=many_attribs};@message/spoof setdiff(setinter(setr(who,lwhoid()),get(%q<log>/MEMBERS)),setr(monitor,filterbool(#lambda/getstat(\%0/D`RADIO,Monitor),%q<who>)))=<unset>,u(rdso)/FUN`FORMATBROADCAST,%#,##,%q<freq>,%1,get(%#/%q<slot>`KEY),get(%#/%q<slot>`CODENAME),get(%#/%q<slot>`TITLE),%2;@message/spoof setunion(%q<monitor>,if(%2,%#))=<unset>,u(rdso)/FUN`FORMATMONITOR,%#,##,%q<freq>,%1,get(%#/%q<slot>`KEY),get(%#/%q<slot>`CODENAME),get(%#/%q<slot>`TITLE),%2;@include u(rdso)/INC`LOGRADIO=%#,%q<freq>,%1,get(%#/%q<slot>`KEY),get(%#/%q<slot>`CODENAME),get(%#/%q<slot>`TITLE),%2;@switch/inline cand(%2,not(match(%q<monitor>,%#)))=1,{@nspemit %#=u(RFN`MSGHEAD) WARNING: Your Emit was sent to %q<freq>, but you must either set a slot to that frequency or toggle [pueblize(+radio/monitor,+radio/monitor)] to hear replies!}
@@ %0 - Enactor, %1 - recipient, %2 - frequency, %3 - message, %4 - key, %5 - codename, %6 - title, %7 -  emit mode

&INC`WHO u(rdso)=@include u(rdso)/INC`CHECKSLOT;@switch/inline isdbref(setr(log,locate(u(rdso),%q<freq>,TXxi)))=0,{@tel setr(log,create(%q<freq>))=u(rdso);@power %q<log>=many_attribs};@assert words(setr(listen,setdiff(setinter(setr(who,lwhoid()),get(%q<log>/MEMBERS)),setr(monitor,filterbool(#lambda/getstat(\%0/D`RADIO,Monitor),%q<who>)),,namei)))=@nspemit %#=u(RFN`MSGHEAD) Nobody is listening to %q<freq>.;@nspemit %#=u(RFN`MSGHEAD) Listeners for %q<slotname> are: [itemize(iter(%q<listen>,name(%i0),,|),|,and,\,)]

&FUN`FORMATBROADCAST u(rdso)=ansi(custcolor(%1,RADIO`EDGE),-<)[ansi(custcolor(%1,RADIO`FREQ),RADIO: [u(u(rdso)/FUN`FREQNAME,%1,%2)])][ansi(custcolor(%1,RADIO`EDGE),>-)]%B[if(%7,colornames(%3,%1,lwho(%1),RADIO),if(strlen(%6),ansi(custcolor(%1,RADIO`TITLE),trim(%6))%B)[speak(&[ansi(custcolor(%1,RADIO`NAME),colornames(if(cand(strlen(%5),cor(getstat(%1/D`RADIO,NoSpoof),%8)),\([accname(%0)]\) %5,strfirstof(%5,accname(%0))),%1,lwho(%1),RADIO))],decrypt(encrypt(colornames(%3,%1,lwho(%1),RADIO),%4),get(%1/[first(grepi(%1,D`RADIO`*,%2))]`KEY)),ansi(custcolor(%1,RADIO`SAYS),says\,),#lambda/ansi(custcolor(%1,RADIO`SPEECH),"\%0"))])]

&FUN`FORMATMONITOR u(rdso)=ansi(custcolor(%1,RADIO`EDGE),-<)[ansi(custcolor(%1,RADIO`FREQ),RADIO MONITOR: %2)][ansi(custcolor(%1,RADIO`EDGE),>-)]%B[if(%7,ansi(h,name(%0)) EMIT: [colornames(%3,%1,lwho(%1),RADIO)],if(strlen(%6),ansi(custcolor(%1,RADIO`TITLE),trim(%6))%B)[speak(&[ansi(custcolor(%1,RADIO`NAME),colornames(if(strlen(%5),\([accname(%0)]\) %5,accname(%0)),%1,lwho(%1),RADIO))],colornames(%3,%1,lwho(%1),RADIO),ansi(custcolor(%1,RADIO`SAYS),says\,),#lambda/ansi(custcolor(%1,RADIO`SPEECH),"\%0"))])]

&INC`LOGRADIO u(rdso)=@switch/inline isdbref(setr(log,locate(u(rdso),%1,TXxi)))=0,{@tel setr(log,create(%1))=u(rdso);@power %q<log>=many_attribs};&[setr(attr,nextslot(%q<log>))] %q<log>=%2;&%q<attr>`ON %q<log>=secs();&%q<attr>`KEY %q<log>=%3;&%q<attr>`CODENAME %q<log>=%4;&%q<attr>`AS %q<log>=name(%0);&%q<attr>`BY %q<log>=objid(%0);&%q<attr>`EMIT %q<log>=%6;&%q<attr>`TITLE %q<log>=%5;@switch/inline gt(setr(count,regnattr(%q<log>/^\\d+$)),800)=1,{@dolist/inline elements(sortkey(#lambda/last(\%0,`),reglattr(%q<log>/^\\d+$),n),lnum(1,sub(%q<count>,600)))=@wipe %q<log>/%i0}

&INC`LISTFREQ u(rdso)=@assert words(setr(freqs,sort(lthings(u(rdso)),namei)))=@nspemit %#=u(RFN`MSGHEAD) No Freqs are in use.;@nspemit %#=header(Active Radio Frequencies);@nspemit %#=ansi(firstcolor(%#,RADIO`COLNAME,DEFAULT`COLNAME),align(10 40 20,Freq,Players,Keys))%R[separator()];@dolist %q<freqs>={@nspemit %#=align(10 40 20,setr(freq,name(%i0)),itemize(iter(setunion(iter(reglattr(%i0/^\\d+$),get(%i1/%i0`BY)),,,namei),name(%i0)\([switch(t(strlen(first(setr(radattr,wildgrepi(%i0,D`RADIO`*,%q<freq>)))))[hasattrval(%i0/%q<radattr>`ON)][t(get(%i0/%q<radattr>`ON))],0*,Off,10*,On,110,Off,111,On)]\),%b,|),|,and,\,),itemize(setunion(iter(wildgrepi(%i0,*`KEY,?*),get(%i1/%i0),%B,|),,|,|),|,and,\,));@switch/inline eq(inum(0),words(%q<freqs>))=1,{@nspemit %#=header()}}

&FUN`FREQNAME u(rdso)=strfirstof(get(%0/[first(wildgrepi(%0,D`RADIO`*,%1))]`NAME),%1)

&INC`NSRECALL u(rdso)=@include u(rdso)/INC`RECALL=%0,%1,1

&INC`RECALL u(rdso)=@switch/inline regmatchi(%0,^\\d+\\.\\d+$)=1,{th setq(freq,%0)},0,{@include u(rdso)/INC`CHECKSLOT;@assert strlen(%q<freq>)=@nspemit %#=u(RFN`MSGHEAD) ERROR: That Radio Slot has no Frequency set.};@assert setr(log,locate(u(rdso),%q<freq>,TXxi))=@nspemit %#=u(RFN`MSGHEAD) Nothing has been Logged.;@assert words(setr(list,sortkey(#lambda/last(\%0,`),reglattr(%q<log>/^\\d+$))))=@nspemit %#=u(RFN`MSGHEAD) Nothing to Recall.;@switch/inline %1=0,{th setq(max,ALL)},{@switch/inline strlen(%1)=0,{th setq(max,0)},{@assert cand(gt(%1,-1),isint(setr(max,%1)))=@nspemit %#=u(RFN`MSGHEAD) ERROR: Line Recall must be an integer 0 or greater.}};@nspemit %#=header(Frequency: %q<slotname> - %q<freq>);@dolist/inline setr(showlist,switch(%q<max>,ALL,%q<list>,0,revwords(elements(revwords(%q<list>),lnum(1,15))),revwords(elements(revwords(%q<list>),lnum(1,%q<max>)))))={@nspemit %#=(On [convsecs(get(%q<log>/%i0`ON))])%B[u(FUN`FORMAT[if(getstat(%#/D`RADIO,Monitor),MONITOR,BROADCAST)],get(%q<log>/%i0`BY),%#,%q<freq>,get(%q<log>/%i0),get(%q<log>/%i0`KEY),get(%q<log>/%i0`CODENAME),get(%q<log>/%i0`TITLE),get(%q<log>/%i0`EMIT),%2)];@switch/inline eq(inum(0),words(%q<showlist>))=1,{@nspemit %#=header()}}

@@ %0 - Enactor, %1 - recipient, %2 - frequency, %3 - message, %4 - key, %5 - alias

&STARTUP u(rdso)=@trigger u(rdso)/TRG`CLEANLOGS

&TRG`CLEANLOGS u(rdso)=@dolist filterbool(#lambda/strmatch(name(\%0),*.*),lthings(u(rdso)))={@dolist/inline filterbool(#lambda/gt(sub(secs(),get(%i0/\%0`ON)),mul(60,60,24,14)),reglattr(%i0/^\\d+$))={@wipe %i1/%i0};@switch/inline regnattr(%i0/^\\d+$)=0,{@set %i0=!SAFE;@nuke %i0;@nuke %i0}};@wait mul(60,60,24)=@trigger me/TRG`CLEANLOGS

th attrib_set(u(cco-db)/VAR`CATEGORIES,setunion(get(u(cco-db)/VAR`CATEGORIES),RADIO,|,|))
&VAR`CATEGORIES`RADIO u(cco-db)=EDGE|SAYS|NAME|SPEECH|FREQ
&COLOR`RADIO`EDGE u(pco)=hr
&COLOR`RADIO`FREQ u(pco)=hw

@@ COMMUNICATIONS - +RADIO
+help/addmain Communications/+radio=[u(rdso)]/HLP`+RADIO
&HLP`+RADIO u(rdso)=The Radio System is a customizable series of soft-channels meant to represent in-character radio frequencies, IC chat rooms, and other venues of instant communication.%R[ansi(hc,Aliases:)] +freq, freq, radio%R%R%R[ansi(hc,Radio Concepts)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,slots)] - A radio slot is a collection of settings used to broadcast and receive messages. Slots are identified by unique words (only alphanumeric characters and hyphens allowed).%R[ansi(h,encryption keys)] - An encryption key is a password used to scramble (and unscramble) radio messages. They are case-sensitive and must match on both ends if set at all!%R[ansi(h,codename)] - A codename is an alternate name others will see you as for that radio slot. Codenames must be unique to a player and can't match player names.%R[ansi(h,frequency)] - a frequency. Must be <number>.<number> format such as 99.5 or 101.1})]%R%R[ansi(hc,Basic Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+radio)] - Display your configured channels.%R[ansi(h,+radio/init <slot>=<frequency>)] - Creates a new Radio Slot and sets it to <frequency>.%R[ansi(h,+radio/freq <slot>=<frequency>)] - set a slot to a frequency.%R[ansi(h,+radio/key <slot>=<encryption key>)] - Sets an encryption key for a radio slot.%R[ansi(h,+radio/rename <slot>=<new name>)] - Assigns a new name to a slot.%R[ansi(h,+radio/codename <slot>=<new codename>)] - Sets your Codename on a Slot. Set to nothing to clear it.%R[ansi(h,+radio/toggle <slot>)] - Turns a slot on or off. Disabled slots can't send or receive messages.%R[ansi(h,+radio/wipe <slot>)] - Erases all of a slot's settings.%R[ansi(h,+radio/title <slot>=<title>)] - Set a title to appear before your name. Keep it short and sweet!%R[ansi(h,+radio/nospoof)] - Toggle whether real names are shown next to codenames if a codename's in use.%R[ansi(h,+radio/who <slot>)] - See who's listening to a frequency.%R[ansi(h,.<slot>/<switch> <entry>)] - Equivalent to +radio/<switch> <slot>=<entry> - useful for .<slot>/toggle, etc})]%R%R[ansi(hc,Sending Messages)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+radio <slot>=<speech>)] - Send a message over <slot>'s Frequency.%R[ansi(h,.<slot> <speech>)] - Shortcut for sending messages. Inspired by hardcoded channels. Example: [ansi(h,.broadband hello!)]})]%R%R[ansi(hc,Misc)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+radio/recall <slot or freq>=<#>)] - recalls <#> of lines from <slot>'s frequency. Encryption keys needed. If <#> is blank, defaults to 10 lines. If 0, shows ALL recorded messages.%R[ansi(h,+radio/nsrecall <slot or freq>=<#>)] - Like /recall, but as though nospoof were turned on.})]

+shelp/addmain Communications/+radio=[u(rdso)]/SHLP`+RADIO
&SHLP`+RADIO u(rdso)=[ansi(hc,Staff Commands)]%R[align(5 [sub(width(%#),6)],,{[ansi(h,+radio/listfreq)] - Analyzes logged messages to show all frequencies in use and who is using them. Also shows what encryption keys are in use for those frequencies. It cannot determine what Key is the 'legit' one though.%R[ansi(h,+radio/monitor)] - toggles Monitor mode. While in Monitor mode, you will receive ALL messages from ALL frequencies, automatically decrypted.%R[ansi(h,+radio/emit <slot or freq>=<message>)] - Send a sourceless message over a channel. All players will understand it regardless of encryption keys.%R%RMonitor mode will apply when using +radio/recall})]