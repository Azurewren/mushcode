@@ COMMUNICATIONS - @MAIL
+help/addmain Communications/@mail=[u(cobj,help-dynamic)]/HLP`@MAIL
&HLP`@MAIL [u(cobj,help-dynamic)]=@mail invokes PennMUSH's hardcoded mail system. It's kind of like email but far simpler.%R[ansi(hc,See Also:)] [u(pueblize,help @mail,help @mail)]%R%R[ansi(hc,Reading Mail)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,@mail)] - list your Inbox.%R[ansi(h,@mail <#>)] - Show a message.)]%R%R[ansi(hc,Sending Mail)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,@mail <recipient>=<subject>/<message>)] - Sends <recipient> a message.%R[ansi(h,@mail/fwd <#>=<recipient>)] - Forward a message to <recipient>)]%R%R[ansi(hc,Deleting Mail)]%R[align(5 [sub(u(width,%#),6)],,[ansi(h,@mail/clear <#>)] - Marks a message for deletion. Will be processed on disconnect.%R[ansi(h,@mail/unclear <#>)] - Unmarks a message mistakenly marked for deletion.%R[ansi(h,@mail/purge)] - Force delection of cleared mail NOW instead of at logout.)]%R%RPennMUSH supports a great many features with its @mail system, such as sending to many recipients simultaneously or mass-reading/deleting many messages at once. Check its related hardcoded helpfile at [u(pueblize,ansi(h,help @mail),help @mail)] for more information!

@@ COMMUNICATIONS - BASIC
+help/addmain Communications/Basic=These are basic communications methods that show only to the local room.%R%R[ansi(hc,Concepts)]%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,speech)] - <speech> is always text. By default, it's considered. 'spoken.' Also note that Speech beginning with a " will always be interpreted as 'spoken,' speech beginning with a : is 'posed' and will show as '<yourname> <speech>', and speech beginning with a ; is 'semiposed' and will show as '<yourname><speech>'. use \%R to make a LINEBREAK and \%T to do a TAB/INDENT.%R[ansi(h,IC)] - In-character. Part of roleplay. The actions of your character.%R[ansi(h,OOC)] - Out of character. Not part of the game's story or actions of your character.})]%R%R[ansi(hc,Basic Commands)]%RThese are IC in most rooms!%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,say <text>)] - Sends a message to the local room.%R[ansi(h,:<text>)] - Poses/emotes to the room.%R[ansi(h,;<text>)] - Semiposes to the room.%R[ansi(h,@emit <text>)] - Emits text to the room without a beginning name. Mostly used for roleplay.})]%R%R[ansi(hc,OOC Commands)]%RThese are ALWAYS considered Out-of-character communications.%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,osay <speech>)] - Equivalent to say.%R[ansi(h,+ooc <speech>)] - alias of osay%R[ansi(h,+ooc <speech>)] - Alias of Osay.%R[ansi(h,think <text>)] - Only you see this text. A personal 'echo.' Useful for testing formatting and colors, etc.})]%R%RInterested in coloring your text? Check out [u(pueblize,ansi(h,help ansi\(\)),help ansi\(\))]. You must enclose uses of ansi() in brackets, such as \[ansi()\]. It's also helpful to enclose your actual text in curly braces \{\} if you're going to include commas in it. An example: \[ansi(hr,\{behold, this text is red\})\] results in [ansi(hr,{behold, this text is red})]%R%RLooking for more advanced formatting tricks? You might be interested in [u(pueblize,ansi(h,help center()),help center())], [u(pueblize,ansi(h,help ljust()),help ljust())], [u(pueblize,ansi(h,help rjust()),help rjust())], [u(pueblize,ansi(h,help space()),help space())], and [u(pueblize,ansi(h,help repeat()))]

@@ CHARACTEr - @SEX
+help/addmain Character/@sex=[ansi(h,@sex me=<gender>)]%R%RThis command is used to set your gender. Setting it to Male or Female (or at least M or F) will make some commands use gender-based pronouns.

@@ SHELP - BUILDING
+shelp/addmain Building/+builder=[u(cobj,help-dynamic)]/SHLP`+BUILDER
&SHLP`+BUILDER [u(cobj,help-dynamic)]=Builder Characters are special characters used to enlarge the grid. They may use @dig, @open, @link, and similar commands freely.%R%R[ansi(hc,Builder Powers)]%RThese are granted to a builder by the +builder command:%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,builder)] - enables the @dig, @open, @link, and similar commands.%R[ansi(h,link_anywhere\, open_anywhere)] - allows builders to manage exit destinations and link them to the grid.%R[ansi(h,no_quota)] - Builders may create unlimited objects.%R[ansi(h,no_pay)] - Builders can create objects without needing the hardcoded CPU currency.%R[ansi(h,pick_dbref)] - Builders may recycle old DBREF numbers for new objects.})]%R%RWIZARDS enjoy these powers automatically except for no_pay which is rarely needed except for code-heavy projects.%R%R[ansi(hc,Commands)]%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,+builder)] - Lists all current Builder characters by DBREF, name, granted powers, and number of objects owned.%R[ansi(h,+builder <player>)] - Shows everything <player> has made - whether they are or are not a Builder.%R[ansi(h,+builder/add <name>)] - Promotes a PC to Builder status.%R[ansi(h,+builder/rem <name>)] - Revokes a Builder's priveleges.})]%R%RNote that rooms, exits, objects, and other things created by (owned by) a character are DESTROYED if that character is deleted. For this reason it is best to simply @newpass unused builders, or alternatively @chown their objects to a buildstaffer character or similar 'safe' location. @chowning can be done easily and conveniently using the following method from a WIZARD character meant to hold the code:%R%R[ansi(h,lit(@dolist lsearch(*buildername)=@chown/preserve %i0=me))]%R%RIf the player is suspected of shenanigans, use the following instead:%R[ansi(h,lit(@dolist lsearch(*buildername)={@halt %i0;@chown %i0=me;@wipe %i0=STARTUP;@wipe %i0=ACONNECT;@set %i0=NO_COMMAND;@restart %i0}))]

+shelp/addmain Building/Room Features=[u(cobj,help-dynamic)]/SHLP`ROOMFEATURES
&SHLP`ROOMFEATURES [u(cobj,help-dynamic)]=Exits with an alias that consists of part of its name will have that part displayed in colored <>. For example, making an exit named North with the alias n will result in a <N>orth. The alias shortcut color is stored in the attribute VAR`ALIASCOLOR on the ancestor room. Setting one on a local room overrides it.%R%RExits sort and display alphabetically. They can have an 'ORDER' attribute that has a number in it which overrides this sorting based on the number, however if ANY Exit in the room has such an attribute then ALL must have it.

@@ TECHNICAL - +COLOR
+help/addmain Technical/+color=[u(cobj,help-dynamic)]/HLP`+COLOR
&HLP`+COLOR [u(cobj,help-dynamic)]=The [ansi(hc,+color)] system allows players to set their own private color scheme for many features on this game, such as the BBS display or custom colors that they see in place of defaults for many things.%R[ansi(hc,See Also:)] [u(pueblize,help ansi(),help ansi())]%R%R[ansi(hc,Manging Color Schemes)]%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,+color)] - List all Available scheme categories.%R[ansi(h,+color <category>)] - List all options within a category and your current settings. Options in parentheses are inherited from account. +color ALL lists EVERYTHING.%R[ansi(h,+color <category>/<option>=<code>)] - Set a new color setting. Use /account switch to set to your account instead.%R[ansi(h,+color <category>/<option>=)] - Clear a color option, restoring defaults. Accepts the /account switch!%R[ansi(h,+color/group <group>/<option>=<color>)] - Fine control of group channel colors. Works just like normal +color. Use /gaccount switch to account set, and set <color> empty to clear.%R[ansi(h,+color/off <category>)] - disable custom colors for a category. reverse with /on.%R[ansi(h,+color/names <options>)] - Toggle use of coloring names in a code system. Options: [itemize(get(u(cco)/VAR`NAMES),|,and,\,)]})]%R%R[ansi(hc,Miscellaneous)]%R[align(5 [sub(u(width,%#),6)],,{[ansi(h,+color/inherit)] - Toggle whether your character inherits color options from your account or not.%R[ansi(h,+colordemo)] - Shows all color names for 256-bit ANSI features. The /long switch is spammy but has more options. Also responds to colors.%R[ansi(h,+color/reset)] - Restores all of your Color settings to default.%r[ansi(h,+color/accreset)] - Resets the color settings on your account.})]%R%R[ansi(hc,Examples)]%R[ansi(hw,Setting your incoming pages to appear green on all characters)]%R+color/account page/page=hg%R[ansi(h,Make the Public channel appear red for one character.)]%R+color channel/Public=hr%R%RIn order to see Colors you must have the ANSI, COLOR, and ideally COLOR256 (also known as XTERM256) flags enabled on your character. Most, but not all clients support 256-bit colors. To set these flags if they are not already set:%R%R[u(pueblize,@set me=ANSI COLOR COLOR256)]

@@ TECHNICAL - Extra
+help/add Pueblo=[u(cobj,help-dynamic)]/HLP`PUEBLO
+help/category Pueblo=Technical
&HLP`PUEBLO [u(cobj,help-dynamic)]=Pueblo is an extra feature that lets Pueblo-compatible clients support special text features. Namely, clicking on text that shows up on your screen.%R%R[mudname()] is a Pueblo-enhanced world. While it is hardly necessary, it is nevertheless handy.%R%RPueblo-enabled clients are rare, however. For Windows, there is MUSHclient and the old original Pueblo.%R%RMUSHclient enables Pueblo by default. It can be turned off or otherwise modified by going to your client's configuration. In MUSHclient, that's Game > Configure > MXP/Pueblo (also accessible via ctrl+alt+U).%R%RWe highly recommend turning off local echo text and custom link colors as we use our own colors and otherwise all you will see is hyperlink blue.%R%RPueblo is detected and enabled upon connection to the MUSH. If you change whether it is on or off in your client, you will not see the results until you disconnect and reconnect that character.

+help/add Room Objects=[u(cobj,help-dynamic)]/HLP`ROOMOBJ
+help/category Room Objects=Technical
&HLP`ROOMOBJ [u(cobj,help-dynamic)]=Players are allowed - and encouraged - to create their own rooms. Most rooms on the game were created using @dig, making them full-fledged Rooms. @dig however, requires admin powers to use, because of how easily it can mess up the game's rooms if misused. However, there is another way to create what are essentially 'rooms.'%R%RPlayers may make Objects, place these in a room, give them a room description and allow others to enter them. They work in almost all ways like a true Room, save that they can be personalized, restricted, and so on. The following is a basic tutorial on how these work.%R%RCONCEPT EXPLANATION: Targeting objects and DBrefs. All things - rooms, players, exits, and so on - have a DBREF, or 'Database Reference.' It is like an ID code. When you use commands such as 'look <name>' PennMUSH checks to see if there is anything of that name in the same location as you. You could, in theory, also use look #800 to look at object #800. Such things are interchangeable for code purposes. Some words can be used to substitute things-- such as 'me' or 'here.' 'me' will always be YOUR dbref, which is why &short-desc me=<your short desc> works. here will refer to your current location. For the purposes of this tutorial, <target> will refer to the object's name or DBREF (if you are outside it or have it in your inventory) or using here (if you are inside it.)%R%R[ansi(h,@create <name>)] - this will make an object and place it in your inventory.%R[ansi(h,@nuke <name or DBREF>)] - this will destroy an object. Using just once will mark it for destruction, which can be undone with [ansi(h,@undestroy <name or dbref>)] if it is typed quickly. Using twice will annihilate object. This cannot be undone.%R%R[ansi(h,@set <target>=ENTER_OK)] - this will set a flag on the object that will allow other people to enter it. Using !ENTER_OK instead will remove the flag. (You may always enter your own objects.)%R%R[ansi(h,inventory)] - this will show what's in your inventory.%R[ansi(h,drop <target>)] - this will remove an object from your inventory and place it in the room.%R[ansi(h,get <target>)] - this will retrieve an object, if you have permission.%R[ansi(h,@lock/Basic <target>=me)] - this will prevent other players from picking up and walking off with your object.%R[ansi(h,\(\IMPORTANT: see +help +key for more advanced tricks!))]%R%R[ansi(h,@desc <target>=<text here>)] - the same as @describe'ing yourself. This will be what others see if they look at or are inside the object. You may also use @idesc for 'internal description,' in which case @desc will be seen by those looking at the object, rather than being both the external description and a room description.%R%R[ansi(h,&IC <target>=1)] - this will enable +pot to work in an object.%R%RYou may only have a few objects in existence at once. If you have lost track of them:%R[ansi(h,@search)] - this will show all objects you own and their DBREFs.%R[ansi(h,@tel <target>=me)] - this will retrieve an object.%R%RUsing them:%R[ansi(h,enter <target>)] - this will enter an object as though it were a room.%R[ansi(h,leave <target>)] - This will leave the object.

+help/addmain Technical/Connection Troubles=[u(cobj,help-dynamic)]/HLP`CONNECTIONTROUBLES
&HLP`CONNECTIONTROUBLES [u(cobj,help-dynamic)]=Every now and then, someone joins the game who might have problems staying connected. The following advice will help you if that problem matches this symptom: you type nothing for a minute or two, and the game stops sending you text-- when you type something, it suddenly says you're disconnected.%r%rThis is a problem typical of those behind NAT (Network Address Translation)... in other words, routers and large networks.%r%rTo solve this problem:%r%r[ansi(h,@set me=KEEPALIVE)]%rThis will tell the game to work harder to keep the connection to your character open. There is also the option of setting a timer in your client (check your client's Help files for instructions on doing so) that sends IDLE (all capitals! iDLE or idle will not work) to the game every minute or two.%r%rThis will only solve problems related to a lack of activity causing the hardware to invisibly disconnect you. There are some problems it cannot solve.

+help/addmain Roleplaying/+summary=Usage: +summary <message>%R%RDisplays <message> in highlights along with your name and a note that it's a summary. This is to summarize long poses for use by both your fellow players as well as your game master (if the scene has a game master), in order to better help have an idea of what's going on. It's use in large scenes is STRONGLY encouraged. It's also used to keep track of who's posed in a given pose round, if a scene is using pose rounds.%R%RNote that <message> is meant to be short and very to the point. It shouldn't be more than two or three lines. The command will refuse to display messages that are over a certain limit.

+help/addmain Roleplaying/+done=Usage: +done%R%RDisplays a highlighted message that you are 'done'. This is usually used to keep track of who's posed in large scenes, for the convenience of the game master (if applicable) as well as other players. This is especially useful when pose rounds are being used.