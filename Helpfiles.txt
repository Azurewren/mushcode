@@ ANCESTORS

+shelp/addmain Building/Room Features=Exits with an alias that consists of part of its name will have that part displayed in colored <>. For example, making an exit named North with the alias n will result in a <N>orth. The alias shortcut color is stored in the attribute VAR`ALIASCOLOR on the ancestor room. Setting one on a local room overrides it.%R%RExits sort and display alphabetically. They can have an 'ORDER' attribute that has a number in it which overrides this sorting based on the number, however if ANY Exit in the room has such an attribute then ALL must have it.

@@ CHANNEL MANAGEMENT OBJECT - CMO

+help/addmain Communications/+channel=The [ansi(hc,+channel)] system is an addon for Penn's built-in @channel system.%R[ansi(hc,Aliases:)] chan, +chan, channel%R[ansi(hc,See Also:)] [pueblize(help @channel,help @channel)], [pueblize(help @chat,help @chat)]%R%R[ansi(hc,General Commands)]%R[align(10 67,,{[ansi(h,+channel)] - Lists visible channels.%R[ansi(h,+channel <channel>)] - Shows info about a channel.%R[ansi(h,+channel/alias <channel>=<alias>)] - Sets your alias on <channel> for those that use it.})]%R%R[ansi(hc,Moderator Commands)]%RThese commands may only used by Storytellers or players approved to moderate channels.%R[align(10 67,,{[ansi(h,+channel/muzzle <player>/<channel>=<duration>)] - Restrict <player> from speaking on <channel> for <duration>. Duration uses stringsecs() ([pueblize(help stringsecs(),help stringsecs())]) - Example duration: 5h 30m or 10d 2h.%R[ansi(hw,+channel/muzzle)] - Show active Muzzles on channels you moderate.%R[ansi(h,+channel/unmuzzle <player>/<channel>)] - Releases a Muzzle before it's expired.})]

+help/addsub +channel/Locks=The [ansi(hc,+clock)] command handles channel locks.%R[ansi(hc,See Also:)] [pueblize(+help +key,+help +key)], [pueblize(help @clock,help @clock)]%RLocktypes are covered in [pueblize(help @clock,help @clock)]%R%R[ansi(hc,General Commands)]%R[align(10 67,,{[ansi(h,+clock)] - Shows locks for visible channels.})]%R%R[ansi(hc,Storyteller Commands)]%RThese commands may only be used by Storytellers or players approved to moderate channels.%R[align(10 67,,{[ansi(h,+clock/<locktype> <channel>=<Key Types>)] - Sets <channel>'s <locktype> to <Key Types> using the +key system. Setting to nothing unlocks.%RLocktype can be SEE, SPEAK, JOIN, HIDE, or MOD. Leaving <locktype> blank sets the SEE, SPEAK, and JOIN locks.})]

+shelp/addsub +channel/Administration=[ansi(hc,See Also:)] [pueblize(help ansi(),help ansi())], [pueblize(help @channel admin,help @channel admin)]%R%R[ansi(hc,Storyteller Commands)]%RThese commands may only be used by Storytellers.%R[align(10 67,,{[ansi(h,+channel/add <name>)] - Creates a channel. Supports ANSI colors! Be sure to put ansi functions in brackets. Example: +channel/add \[ansi(hc,Example)\].%R[ansi(h,+channel/del <channel>)] - Deletes a channel.%R[ansi(h,+channel/rename <channel>=<newname>)] - Renames a channel. Change color by renaming to itself.})]%R%R[ansi(hc,Configuration Commands)]%RThese commands can only be used by Storytellers or players with channel moderation priveleges.%R[align(10 67,,{[ansi(h,+channel/config <channel>/<option>=<value>)] - Changes an option for a Channel. Blank values clear the option. Options include:})][align(15 62,,{[ansi(h,alias)] - Set to 1 means channels will use Aliases instead of names and require an /alias to be set to use it.})]

@@ CHARACTER ACCOUNTS OBJECT - CAO

+shelp/addmain Characters/+account=The Account System tracks Players through the SQL database, tracking the status of their PCs. The system attempts to match newly created characters to existing accounts by comparing the IP address to existing login records, but it cannot do so if it is a new character or connecting from an IP address that has no account (or conflicting account information.)%R%R[ansi(h,+account)]%RThis lists all accounts. Beware: it can be very spammy.%R%R[ansi(h,+account/bind  <player>=<account>)]%RThis attempts to link <player> to <account.> <account> may be one of three things: the number of an existing account, the name of a PC with an existing account, or the word NEW (which will create a new account.)%R%R[ansi(h,+account/unbound)]%RThis will list all PCs not bound to an account.%R%R[ansi(h,+account/giveid <player>)]%RThis will give a player an ID if they are not in the database. Which shouldn't normally happen.%R%R[ansi(h,+account/all <account or player>)]%RThis should attempt to show all characters linked to the account that have ever been in the SQL database, using old records of names and the like. May not be accurate all the time.

+help/addmain General OOC/+account=The Account System links Player Characters together to track their status. The game attempts to intelligently assign newly created characters to existing accounts by comparing IP address records if it can, but if it cannot do so then an Administrator must set it manually.%R%R[ansi(h,+account)]%RThis will show you the status of your Player Account, if the character is a part of one.%R%R[ansi(h,+account/email <email>)]%RThis will set your email to <text.> Blank text will remove a set email. Email Addresses are used as contact information for emergency situations.%R%RUse the CODE category for +request to have an account setup for you! Be sure to list your alts in the text of the request, even if they aren't currently active.

+shelp/addmain Characters/Player Management=Characters can be created with the @pcreate command%R[ansi(h,@pcreate <name>=<password>)]%R%RWizards may change the passwords of players with the @newpass command%R[ansi(h,@newpass *<player>=<newpassword>)]%R%RBanning players is handled through the @sitelock command (help @sitelock)%R%RThe simplest way to ban a player is to just [ansi(h,lit(@sitelock/ban/player <name>))]%R%RDeleting characters (WARNING: DESTROYS ALL OBJECTS THEY OWN UNLESS THE OBJECT IS SET SAFE) requires @nuke%R[ansi(h,@nuke *<playername>)]%RRun @nuke this way twice to ensure it happens instantly instead of taking a few minutes.

@@ IP
+shelp/addmain Administration/+ip=[ansi(h,+ip <player>)]%R[ansi(h,+ip/guests <player>)]%R%RThis command shows the most recent login data for <player> and all players with matching IP addresses to that character. By default, it will exclude Guests, but the /guests switch will include them. The /ip switch will allow you to search by raw IP.

+help/addmain General OOC/+ip=[ansi(h,+ip)]%R%RThis command displays the most recent login data for you and any characters with IPs matching yours, excluding Guests. Spot a suspicions login attempt? Please report it to admin for investigation.

@@ APPROVAL
+help/addmain General OOC/+approve=[ansi(h,+approval)]%RThis will show your approval status - if you are approved or unapproved.

+shelp/addmain Characters/+approve=[ansi(h,+approve <name>)]%RThis will approve <name>%R%R[ansi(h,+unapprove <name>)]%RThis will unapprove <name>

@@ STAFF
+shelp/addmain Administration/+staff=Staff are characters able to use Admin commands.%R%RThe Game considers anyone whose dbref returns a 1 on the global function isadmin() to be staff for the purposes of running special softcode commands, accessing channels, etc. At the time of this writing, that would be anyone who has a WIZARD, ROYALTY, or JUDGE flag, or anyone added to the staff list (wizlist.)%R%RPennMUSH itself has FOUR tiers of Staff.%R%RThe [ansi(hr,GOD)] (#1) character, known as One by default, is a special WIZARD character (see below) that nobody can control (set attributes on, tell to run commands, override, etc) but itself. It is the ONLY character able to create player WIZARDS.%R%R[ansi(h,WIZARD)]s are those with the WIZARD flag (set by @set *<name>=WIZARD, on GOD - @set *<name>=!WIZARD to remove) with the power to control ([pueblize(help control,help control)]) any object in the game and use many restricted commands such as @shutdown and @hook and @config/set (only God may use /save). Wizards can see and manipulate virtually anything and everything. The WIZARD flag is dangerous and should not be handed out to anyone but the most trustworthy of staff members who truly need it and, perhaps more importantly, know how to use it.%R%R[ansi(hy,ROYALTY)] Flagged characters have similar power to WIZARDS, but they lack the ability to run dangerous commands like @shutdown or @hook to impact the game. They may not change anything owned by a wizard, so all code objects cannot be touched for instance. (viewed yes, changed no.)%R%RThe [ansi(hy,JUDGE)] Flag confers no special powers inherent to PennMUSH on its own, but the Softcode for this game recognizes it as Staff. This flag exists to be used this way.%R%RLastly, anyone who is on the Staff list can use Staff softcoded commands to edit characters, view sheets, see jobs, and etc.%R%R[ansi(h,+staff)]%RBy itself, lists staff. Identical to wizlist.%R%R[ansi(h,+staff/add <name>\[=<order>\])] and [ansi(h,+Staff/rem <name>)]%RAdds or Removes people from the Staff list. Note that this does NOT revoke WIZARD, ROYALTY, or JUDGE flags. An optional Order is a number in which the staff member will be listed (see below.)%R%R[ansi(h,+staff/order <name>=<order>)]%RChanges the order of a staffer on the list. The order list is low at the top, high at the bottom. Staffers with equal numbers will be sorted within that number by the number of their DBREFs instead.%R%RAliases for [ansi(h,+staff)] include [ansi(h,wizlist)], [ansi(h,+wizlist)], [ansi(h,staff)], [ansi(h,+admin)] and [ansi(h,admin)]

+help/addmain General OOC/+staff=[ansi(h,+staff)]%RShows all Staff and their status.%R%RAliases for [ansi(h,+staff)] include [ansi(h,wizlist)], [ansi(h,+wizlist)], [ansi(h,staff)], [ansi(h,+admin)] and [ansi(h,admin)]

@@ BUILDER
+shelp/addmain Building/+builder=Builder Characters are special characters used to enlarge the grid. They may use @dig, @open, @link, and similar commands freely. Builders are given the following powers (help powers):%R%Rbuilder - enables the @dig, @open, @link, and similar commands.%Rlink_anywhere, open_anywhere - allows builders to manage exit destinations and link them to the grid.%Rno_quota - Builders may create unlimited objects.%Rno_pay - Builders can create objects without needing the hardcoded CPU currency.%Rpick_dbref - Builders may recycle old DBREF numbers for new objects.%R%RBuilders CAN be, but are not automatically considered to be, Staff characters. A WIZARD has no need of this status however - they have most of these powers implicitly.%R%R[ansi(h,+builder)]%RLists all current Builder characters by DBREF, name, and granted powers.%R%R[ansi(h,+builder/add <name>)]%RPromotes a PC to Builder status.%R%R[ansi(h,+builder/rem <name>)]%RRevokes a Builder's priveleges.%R%RNote that rooms, exits, objects, and other things created by (owned by) a character are DESTROYED if that character is deleted. For this reason it is best to simply @newpass unused builders, or alternatively @chown their objects to a buildstaffer character or similar 'safe' location. @chowning can be done easily and conveniently using the following method from a WIZARD character meant to hold the code:%R%R[ansi(h,lit(@dolist lsearch(*buildername)=@chown/preserve %i0=me))]%RIf the player is suspected of shenanigans, use the following instead: [ansi(h,lit(@dolist lsearch(*buildername)={@chown %i0=me;@set %i0=!HALT}))]

@@ CODE OBJECT INDEX - COI
+shelp/addmain Administration/Softcode Readme=*** CODE INDEXING ***%RAll Code Objects are stored in the master room. (help master room)%R%RMost works off of the Code Object Indexer, or COI. This object uses the locate() function to find the other code objects. Almost all other code objects such as that handling accounts and the help system have it as a parent (help @parent) so they can reference and pull code from one another.%R%R*** GOD PLAYER ***%RThe #1 object (God) is also parented to the COI, and is responsible for searching every object referenced on the COI for attributes matching the GFN`* pattern. These are global functions which will always be added!%R%R*** ATTRIBUTE NAMING CONVENTIONS ***%RVAR - Variable. Often used for options like changing settings.%R%RPOT - used exclusively by the Pose Order Tracker to store poses and settings on rooms.%R%RFUN - local functions to be used with u() or similar.%R%RCMD - Softcoded command attributes.%R%RINC - Extensions of softcoded command used for doing most of the code legwork, grabbed using @include.%R%RTRG - Code sections meant to be used with @trigger. Most often these are for automated cleanups started by an object's STARTUP, or similar.%R%R*** EVENT HANDLER ***%RThe Event Handler (help event handler) hunts down all attribute leafs of that type of event and @triggers them, using the list of objects on the COI. For instance, it discovers the attribute PLAYER`CONNECT`WATCH on the Watch System Object <WSO> and triggers it, and the SOCKET`LOGINFAIL`IPLOG attribute on the Account System Object.%R%R*** DATA STORAGE ***%RAll code uses the D attribute - marked WIZARD and MORTAL_DARK - to store player data such as INFO files and stats.

@@ CUSTOM COLORS OBJECT - CCO
+help/addmain General OOC/+color=The Color System allows players to set their own custom colors that they see in place of defaults for many things.%R%R[ansi(h,+color \[<category>\[/<option>=<colorcode>\])]%RUsed as just +color, shows a full list of categories available to +color. Used as +color <category>/<option>=<colorcode>, sets a colorcode. Set a colorcode to NOTHING (example: +color Main/Header1=) to clear it and restore defaults.%R%R[ansi(h,+color/list <category>)]%RShows the current settings in a Category.%R%R[ansi(h,+color/defaults)]%RThis restores ALL default colors.%R%RThis command also responds to [ansi(h,color)] instead of [ansi(h,+color)]%R%RSee [pueblize(help ansi(),help ansi())] for information on color codes.%R%R[ansi(h,pueblize(colordemo,colordemo))] will list all colorname shortcuts.%R%RIn order to see Colors you must have the ANSI, COLOR, and ideally COLOR256 (also known as XTERM256) flags enabled on your character. Most, but not all clients support 256-bit colors. To set these flags if they are not already set:%R%R[pueblize(@set me=ANSI COLOR COLOR256,@set me=ANSI COLOR COLOR256)]%R%RTo use the color system in softcode, the relevant function is [ansi(h,lit(color()))]%RThe first argument must be the person it's pulling color from. The second argument is the text to color. The third argument is the CATEGORY`OPTION, and the fourth is the default color if no custom is found. An example: [ansi(h,lit(color(%#,Blargh,MAIN`HEADER1,hm)))]

@@ GROUP SYSTEM OBJECT -- GSO
+help/addmain General OOC/Groups=The Group System is used to provide a suite of tools to aide PC groups in organization and membership management. Each Group is self-contained, with separate settings, rank structures, and rosters, though a Group may be assigned to another as a 'Division.'%R%R[ansi(h,+groups)]%RThis will list all Groups in the game.%R%RIndividual Groups are used by using [ansi(h,+group <alias>)]. Nearly all Group Commands target the last group you sed [ansi(h,+group <alias>)] on so be aware of this!%R%RAs in the PennMUSH help files, anything contained in brackets \[\] is an optional part of the syntax, such as an argument. one does not type the brackets as part of the command!

+help/addsub Groups/Admin=[ansi(h,+gcreate <ALIAS>=<Name>)]%R%RThis command creates a new Group. Aliases must be unique.%R%R[ansi(h,+galias <newalias>)]%RChanges the Alias of a Group.%R%R[ansi(h,+grename <newname>)]%RRenames a Group.%R%R[ansi(h,+gdiv <alias>)]%RMakes a Group a Division of the targeted one.%R%R[ansi(h,+gundiv)]%RReturns a Group to standalone status.%R%ROnly those with WRITE Admin permissions can use these commands. Additionally, those with READ permissions are considered to be members of any group, able to enable the channels and use viewing commands as normal. Those with WRITE Permissions are able to administrate any Group completely as though they were a member. Additionally, they may use +gset and +gauth to set non-standard <types>. These show up in the set and auth displays as red words instead of white.

+help/addsub Groups/Rank=NOTE: Rank in this system works in reverse. Rank 0 is the highest and considered the Leader position, though a group may have multiple people of this Rank. Mathematically greater numbers are actually of LESSER rank, not greater. This is done so that a Group may define its hierarchy as deep as its management wishes.%R%R[ansi(h,+grank <player>=<target>)]%RUsed to change the rank of a member. You must pass the RANK Auth to use this command, and cannot promote others to your own Rank. Thus, while a Group may have multiple Rank 0s, Admin must set them.%R%R[ansi(h,+gauth \[<option>=<newvalue>\])]%R%RUsed without an argument, this displays all available authorization permission types and their current values. One must possess that rank or higher in order to pass the authorization check. Options showing -1 are restricted by admin policy.%R%RUsed with an argument, changes the option. One must pass the AUTH Authority to use this, and ranks cannot be set higher than your own. Changes can only be be made by one of equal or greater rank to the one to last make the change.

+help/addsub Groups/Channels=[ansi(h,+gicon)] or [ansi(h,+goocon)]%RThis will add you to the group's OOC or IC channel. Use [ansi(h,+gicoff)] and [ansi(h,+goocoff)] to leave it again.%R%R[ansi(h,+gooc <text>)] or [ansi(h,+gic <text>)]%RThis will broadcast to the channel.%R%R[ansi(h,+ggag \[<player>\])]%R%RThis Gags <player> from the Group's Channels. You must pass the GAG Authorization to use this command. A player may not Gag someone of equal or higher rank.%R%RUsed without an argument, displays who has been gagged.%R%R[ansi(h,+gungag <player>)]%RThis will ungag a player. Only those of equal or greater rank to the one who issued a gag can undo it.%R%R[ansi(h,=<alias> <text>)] is a shortcut for a group's OOC channels, while [ansi(h,-<alias> <text>)] reaches the IC channels. This ignores the management system, so you do not have to use +group <alias> to change to that one first. This is handy if you're in multiple groups or are managing divisions!

+help/addsub Groups/Titles=[ansi(h,+gooctitle \[<text or player>\]\[=<text>\])] or [ansi(h,+gictitle \[<text or player>\]\[=<text>\])]%R%RSets your own, or a Target's IC or OOC title to <text>.%R%RYou must pass the IC/OOCTITLEOTHER Auth to use it on others, and must pass IC/OOCTITLE to use it on yourself.%R%RICTITLES show in /who and prefix one's IC channel use, but OOC titles only show on the OOC channel.

+help/addsub Groups/Membership=[ansi(h,+group \[<name>\])]%RDisplays all members of the Group and their current status. With an argument, shows a specific group and switches commands to manage it instead if permissions allow.%R%R[ansi(h,+ginvite \[<player>\])]%R[ansi(h,+gunvinite \[<player>\])]%RUsed with an argument, extends or revokes an invitation for <player> to join the Group. Used without arguments, these will show all standing invites to join a Group.%R%R[ansi(h,+gjoin <name>)] or [ansi(h,+grefuse <name>)]%R is used by said player in response.%R%R[ansi(h,+ginvites)]%RDisplays all invitations extended to you.%R%ROne must pass the INV Auth to send or revoke Invitations.%R%R[ansi(h,+gleave)]%RLeaves the Group.%R%R[ansi(h,+gkick <player>)]%RRemoves <player> from the Group. You must pass the KICK Auth to use this. It may not be used on those of equal or higher Rank.

+help/addsub Groups/Options=[ansi(h,+gset \[<option>=<value>\])]%R%RUsed without an argument, displays the current Group's Options. Used with an argument, changes <option> to <value.> Most options are self explanatory. 0 means disabled, while 1 is enabled, although some options accept text or a number instead of a binary value. You must pass the SET Auth to use this.%R%RSRANK is Start Rank.%RIC and OOC enable or disable the Channels.%RCOLOR is a normal ansi code (see help ansi())%R%ROptions in Red are unique and can only be set or removed by admin.

+help/addsub Groups/Divisions=Divisions are sub-Groups. Codedly these work exactly the same as any other Group, save that they do not show up in the main +groups list but are instead shown when checking an individual group's details with +group.%R%RDivisions are used to further delineate and break up large groups into task forces, branches, departments, member nations, whatever the group's supposed to represent. A few important things to note are:%R%RAnyone who passes the DIV auth in a parent group at any point higher in the chain is considered to have Rank 0 in any child group regardless of the DIV auth levels of the lower groups.%R%RAnyone who passes the DIV auth is able to join and listen to channels as if they were a group member.

@@ INFO FILES OBJECT - IFO
+help/addmain General OOC/+info=The Info system allows Players to store notes about their character. These notes can be used for a number of things, such as tracking details of resources, backgrounds, cheat sheets, or other notes that might be several paragraphs in length.%R%RVIEWING INFOS:%R[ansi(h,+info \[<player>\])]%RThis will show you your own +info files or those of another, provided they are visible to you. Staff may view all files, published or not.%R%R[ansi(h,+info \[<player>/\]<file>)]%RThis will display the contents of a file.%R%R[ansi(h,+info/get \[<player>/\]<file>)]%RShows an unformatted text for easy editing of an +info file.%R%R[ansi(h,+info/published)]%RShows all players who have published Info files.%R%RMANAGING INFOS:%R[ansi(h,+info\[/set\] \[<player>/\]<file>=<contents>)]%RCreates a new file, or overwrites an existing one with new contents. Use /set if another player's name conflicts with the filename.%R%R[ansi(h,+info/delete \[<player>/\]<list|of|files>)]%RDeletes one or more files. Seperate each name with a pipe symbol!%R%R[ansi(h,+info/publish \[<player>/\]<list|of|files>)] or [ansi(h,+info/unpublish \[<player>/\]<list|of|files>)]%RUsed to publish or hide info files. Multiple files can be published at once by seperating their names with the pipe symbol.%R%R[ansi(h,+info/approve \[<player>/\]<list|of|files>)] or [ansi(h,+info/unapprove \[<player>/\]<list|of|files>)]%RApproves or unapproves files on a player. Only staff may use this. As with publish, it can be used to target multiple files if they are seperated by pipes.%R%ROTHER:%R[ansi(h,+info/categories)]%RDisplays a list of common or suggested filenames for the game. Using these names for the appropriate topics will make it easier on staff.%R%RInfo Files may not have more than 18 characters in their name, and they may not contain the Pipe symbol (|) or a slash (/). For everything but setting an info file, partial matches are acceptable - but it will key off of the first possible match. Be wary.

@@ JOB SYSTEM OBJECT - JSO
+help/addmain General OOC/+job=+job is used to contact the Storytellers with things you need.%R%R[ansi(h,+job \[<category>\]\[=<#>\])]%RBy itself, shows all categories you may submit jobs to. Giving a Category name displays the latest page of Jobs for that Category. With a page number, shows that page instead. Pages are grouped by 30 jobs. Example usage: [ansi(h,+job XP=3)] would show the third page of your XP +jobs. Note: Categories can be partial matched - using X for XP, or B for BUGS, etc.%R%R[ansi(h,+job/all <category>\[=<page>\])]%RLike above, but shows finished jobs too.%R%R[ansi(h,+job <category>/<#>)]%RShows details of specific Job and all comments and vote information.%R%R[ansi(h,+job/add <category>/<text>)] or [ansi(h,+job/add <category>/<title>=<text>)]%RCreates a new +job to the Storytellers. It will display to them live that you have done so, and you will receive updates as they work on it.%R%R[ansi(h,+job/comment <category>/<#>=<text>)]%RAppends a comment to a job, used to add or revise new information to it. Warning: To prevent shenanigans, comments may never be edited or deleted in any fashion.%R%R[ansi(h,+job/vote <category>/<#>=<vote>)]%RPlayers may vote on any job they can see, aside from their own. This only occurs if a player is made handler of another person's job or a category. <vote> may be Yes, No, or Undecided.%R%R[ansi(h,+job/log <category>/<#>)]%RShows a log of events that happened to a Job.%R%R* Legend for +job display-%R* - Updates or changes made since you last checked the job.%RP - Job is pending.%RA - job was approved.%RD - job was denied.%RC - job was canceled.%R%RNote: Command can also be used with [ansi(h,++job)], [ansi(h,job)], or [ansi(h,+job)] interchangeably.

+shelp/addmain Administration/+job=Note: [ansi(h,+job)] also responds to [ansi(h,job)], [ansi(h,request)], and [ansi(h,+request)]%R%R[ansi(h,+job/approve <category>/<#>=<text>)]%R[ansi(h,+job/deny <category>/<#>=<text>)]%R[ansi(h,+job/cancel <category>/<#>=<text>)]%RApproves, Denies, or Cancels a Job for a given reason.%R%R[ansi(h,+job/claim <category>/\[<#>\]\[=<name>\])]%R[ansi(h,+job/unclaim <category>/\[<#>\]\[=<name>\])]%RAssigns or Unassigns a Handler to a job or category. Without a name, Assigns yourself. Non-staff assigned to a category or job may see it even if it is not theirs, comment, and vote on it. Adding to category lets them do this with everything on it.%R%R[ansi(h,+job/priority <category>\[/<#>\]=<#>)]%RChanges Category or Job's color priority. 1 - lowest, 4 - highest.%R%R[ansi(h,+job/revive <category>/<#>=<text>)]%RReturns a Job to the Pending status, essentially undoing Approve, Deny, or Cancel. Must give a reason.%R%R[ansi(h,+job/vote <category>/<#>=<yes/no/undecided>)]%RPlaces a vote on a Job.%R%RStaff may use all the same commands players do as well, but they see all jobs and can use their commands on jobs of any <#>.%R%R[ansi(h,+job/delete <category>/<#>)]%RDeletes a job. Permanently. Not necessary or ideal unless the Category has over 1500 of them.%R%R*** WIZARD ONLY ***%R[ansi(h,+job/catmake <text>)]%RCreates a new Category. It's set visible by default.%R%R[ansi(h,+job/catdelete <name>)]%RDeletes a category and ALL JOBS related to it. BAD, DO NOT TOUCH.%R%R[ansi(h,+job/catrename <text>=<text>)]%RRenames a Category.%R%R[ansi(h,+job/catvisible <category>=<bool>)]%RSets whether a category's visible to players or not. <bool> must be 1 (true) or 0 (false)

@@ KEY LOCK SYSTEM - KLS
+help/addmain General OOC/+key=The +key command is used to manage PC permissions for various IC and OOC purposes. It is used to enhance the hardcoded @lock system and make it manageable for everyday purposes. Note that admin pass any locks using these Keys implicitly, and are also considered to 'own' any Key Type in addition to actual owners.%R%R[ansi(h,+key/make <keyname>)] and [ansi(h,+key/destroy <keyname>)]%RCreates a new Key Type. Or deletes one. The creator becomes the OWNER of the Key Type.%R%R[ansi(h,+key/chown <key>=<name>)]%RReassigns ownership of a Key Type to <player.> Must be Owner or staff to do this.%R%R[ansi(h,+key/auth <key>=<name>)] and [ansi(h,+key/revoke <key>=<name)]%RAuthorizes or revokes a player's authorization to handle a Key's Holders. Must be Owner or Staff.%R%R[ansi(h,+key)]%RThe Key command will list all Key Types in the game and which you possess/pass.%R%R[ansi(h,+key/add <key>=<name>)] and [ansi(h,+key/rem <key>=<name>)]%RIf you are authorized to handle a Key's Holders (who pass it), this adds or removes players to that list.%R%R[ansi(h,+lock\[/<locktype>\] <target>=<list of key names>)] and [ansi(h,+unlock\[/<locktype>\] <target>)]%RSets a Lock via @lock on <target> to use the specified Key types. See [pueblize(help locktypes,help locktypes)] for more information. User: locks are acceptable. If a <locktype> is not specified it will set a Basic lock. As an example: +lock Exit=WEREWOLF VAMPIRE MAGE would make the exit passable by anyone with a WEREWOLF, VAMPIRE, or MAGE key.%R%R[ansi(h,+key/config <name>/<option>\[=<value>\])]%RChanges an option for a Key Type. Options include:%R%T[ansi(h,builder)] - Set to 1 means Builders always pass this lock.%R%T[ansi(h,approved)] - Set to 1 means you must be approved to MAYBE pass the lock (you must still pass one of the other checks.) Note: Admin and Builders are always considered 'approved for play'.%R%T[ansi(h,SPLAT)] - Set this to a list of Splat names (Exalted games only) and anyone who is one of them will pass the lock.%R%T[ansi(h,SPHERE)] - Set this to a list of Shere names (WoD games only) and anyone who is one of them will pass the lock.%R%T[ansi(h,GROUP)] - Set to a list of group names (entered by a space seperated list of group aliases) and anyone who's a member of any group and passes their LOCK auth will pass the lock.%R%T[ansi(h,KEY)] - Set to a list of other key names, anyone who passes one will pass the lock.%R%TSetting an option to an empty value will clear it.%R%RAN EXPLANATION OF KEY TYPE NAMES:%REach Key Type is actually three seperate key names. When you +key/make Whatever, this creates the Whatever group, but when using +lock or similar commands you may also use WHATEVER-HANDLER and WHATEVER-OWNER for finer control. Note that Staff pass both, and the respective OWNER also passes any locks set using -HANDLER Keys. This setup may be useful for, example, a player-owned channel with its own Key Type, setting the +clock/mod to WHATEVER-HANDLER and the basic +clock to WHATEVER.

@@ MEET CODE OBJECT - MCO
+help/addmain General OOC/Join and Summon=[ansi(h,join <name>)]%RSends a Join request to <name>, or if you have received a Summon request, travels to <name>.%R%R[ansi(h,summon <name>)]%RSends a Summon request to <name>, or if you have received a Join request, brings <name> to your location.%R%RThese commands also respond to +join and +summon.

+shelp/addmain Configuration/Join and Summon=Join and Summon can be tweaked through use of the VAR attribute leafs on the Meet Code Object ([u(mco)])-%R%RADMINNEEDINVITES - if 0 (default), admin can Join and Summon anyone anywhere without needing to go through the invite process. If 1, even they need to do invites.%R%RNOINVITES - if 1, invites are not used, and joining and summoning is done instantly.

@@ POSE ORDER TRACKER - POT
+help/addmain General OOC/+pot=+pot, or [ansi(h,Po)]se [ansi(h,T)]racker, is a system that stores poses within the room for easy retrieval for review. Sometimes, poses are lost in spam or scroll, or a player enters late and needs to see what's going on, or was disconnected when someone else posed, and that's what this system's here to aid with. To use it:%R%R'[ansi(h,+pot)]' will show you the last (maximum, or 15 by default) poses in the room.%R%R'[ansi(h,+pot/brief)]' is like +pot, but shows only about one line of the pose.%R%R'[ansi(h,+pot/private <1/0>)]' Set to 0 (default) to make your poses public, or 1 to render them private. It also accepts Yes or No. Poses made while set private will be revealed if you go public!%R%R'[ansi(h,+pot/max <#>)]' To set your maximum shown poses. It accepts only whole, positive numbers!%R%R+pot only functions normally when one is in a room that has its IC attribute set to 1. It will also work in any player-created objects, provided their IC attribute is set to 1. To do this, &IC here=1 WHILE WITHIN THE OBJECT. Please note that Pot stores an arbitrarily massive amount of attributes under the &pot attribute tree, and the system will periodically clean them as long as it's set IC 1.

@@ TEL CODE OBJECT - TCO

+help/addmain General OOC/tel=The Tel System allows players and admin to easily navigate the grid.%R%R[ansi(h,tel \[<destination>\])]%RBy itself, lists all available destinations. Given a destination, sends you there. <destination> must be a dbref, such as #100.

+shelp/addmain Building/tel=[ansi(h,tel/add)] and [ansi(h,tel/del <destination>)]%RAdds and removes destinations to the tel list. Note that all destinations should have a &district attribute on that DBREF, used for sorting. It should match the category they appear in.%R%R[ansi(h,tel/lock)] and [ansi(h,tel/unlock <destination>)] admin lock destinations so that players cannot see or use them.

@@ WATCH SYSTEM OBJECT - WSO
+help/addmain General OOC/Watch=The Watch system alerts you as friends connect and disconnect.%R%R[ansi(h,+watch)]%RWill display all friends on your list and their status.%R%R[ansi(h,+watch/add <name>)] and [ansi(h,+watch/del <name>)]%RAdds and removes players to your friends list.


@@ NEWBIE GUIDE

+help/addmain PennMUSH/Basic Commands=[ansi(h,say <text>)]%RSends a message to the local room, considered IC in IC locations and OOC in others.%R%R[ansi(h,:<text>)]%RUsed to emote to the room.%R%R[ansi(h,;<text>)]%RLike above, but without the space.%R%R[ansi(h,ooc <speak>)]%RSends a message to the local room, considered OOC in all places but unnecessary in OOC locations. Admin OOC will show with ADM instead of OOC but is the same command.%R%RWherever <speak> is called for, this may be text, or text following a colon (:) or semicolon (;), as an example ooc :dances would emote the action instead of 'say' it. : inserts a space after your name, ; does not and is useful for using an apostrophe for, say, ooc ;'s not sure what to think of that! and similar expressions.%R%R\%R and \%T are used wherever most text can be entered to insert linebreaks and indents.%R%R[ansi(h,look)]%RShows the room you are in, and lists all of its contents. It can be targeted at other things by name.%R%R[ansi(h,@desc me=<text>)]%RSets the text that will show if someone else looks at you.%R%RTo use an exit, simply type the aliased 'letters in red' or its name, and most exits also respond to partial matches. Pueblo users can also click on them.%R%R[ansi(h,@emit <text>)]%RSends an unmarked message to the room. Usually used for creating poses in roleplay. @emit does not by default show your name or have any formatting beyond what you give it. It is generally considered rude to use @emit without identifying who it came from somehow. \\ is an alias for @emit.%R%R[ansi(h,&short-desc me=<text>)]%RThis sets your short-desc. It can only store a handful of characters-- not even quite a full line. Be succint.

+help/addmain General OOC/BBS=We have a pretty standard (for Mushes and Muxes at least) bulletin board system set up here on the ExaltedMush. For those unfamiliar with it, here's some basic commands:%r%r%t[ansi(h,+bbread)]%bshows you all the boards you have access to.%r%t[ansi(h,+bbread <#>)]%bshows you all the messages in a the board with that number.%r%t[ansi(h,+bbread <#>/<#>)]%bshows you the text of a message, the board number comes before the slash, message number after.%r%t[ansi(h,+bbpost <#>/<Subject>=<message>)]%blets you post a message of your own.%r%t[ansi(h,+bbscan)]%bshows you all the messages posted that you have not read by their number and board.%r%t[ansi(h,+bbnext)]%bshows you the next post you have not read yet, by post date.%r%t[ansi(h,+bbremove <#>/<#>)]%blet's you remove a post that /you/ have made.

+help/addmain PennMUSH/Channels=[ansi(h,@chan/list)]%rThis shows you all available channels.%r%r[ansi(h,@chan/on <channel>)]%rThis adds <channel> to your list of active channels. use%b[ansi(h,@chan/off <channel>)]%bto disable it.%r%r[ansi(h,@chan/gag <channel>)]%rTemporarily cease receiving messages on <channel.> This is undone with%b[ansi(h,@chan/ungag <channel>)]%r%rTo speak on a channel: + followed by the channel name. This takes partial matches, for instance%b[ansi(h,+p)]%bwill default to Public. Example:%b[ansi(h,+p hi everyone!)]%r%r[ansi(h,@chan/recall <channel>=<#>)]%rThis will display previous messages on <channel.> It defaults to 10 if no number is provided, and 0 will show everything in the buffer-- WARNING, SPAMMY.%r%rFor more information on the built-in channel system, use%b[ansi(h,help @channel)]%band%b[ansi(h,help @chat)]

+help/addmain PennMUSH/Pueblo=Pueblo is an extra feature that lets Pueblo-compatible clients support special text features. Namely, clicking on text that shows up on your screen.%R%RExalted MUSH is a Pueblo-enhanced world. While it is hardly necessary, it is nevertheless handy.%R%RPueblo-enabled clients are rare, however. For Windows, there is MUSHclient and the old original Pueblo.%R%RMUSHclient enables Pueblo by default. It can be turned off or otherwise modified by going to your client's configuration. In MUSHclient, that's Game > Configure > MXP/Pueblo (also accessible via ctrl+alt+U).%R%RWe highly recommend turning off local echo text and custom link colors as we use our own colors and otherwise all you will see is hyperlink blue.%R%RPueblo is detected and enabled upon connection to the MUSH. If you change whether it is on or off in your client, you will not see the results until you disconnect and reconnect that character.

+help/addmain PennMUSH/Room Objects=Players are allowed - and encouraged - to create their own rooms. Most rooms on the game were created using @dig, making them full-fledged Rooms. @dig however, requires admin powers to use, because of how easily it can mess up the game's rooms if misused. However, there is another way to create what are essentially 'rooms.'%R%RPlayers may make Objects, place these in a room, give them a room description and allow others to enter them. They work in almost all ways like a true Room, save that they can be personalized, restricted, and so on. The following is a basic tutorial on how these work.%R%RCONCEPT EXPLANATION: Targeting objects and DBrefs. All things - rooms, players, exits, and so on - have a DBREF, or 'Database Reference.' It is like an ID code. When you use commands such as 'look <name>' PennMUSH checks to see if there is anything of that name in the same location as you. You could, in theory, also use look #800 to look at object #800. Such things are interchangeable for code purposes. Some words can be used to substitute things-- such as 'me' or 'here.' 'me' will always be YOUR dbref, which is why &short-desc me=<your short desc> works. here will refer to your current location. For the purposes of this tutorial, <target> will refer to the object's name or DBREF (if you are outside it or have it in your inventory) or using here (if you are inside it.)%R%R[ansi(h,@create <name>)] - this will make an object and place it in your inventory.%R[ansi(h,@nuke <name or DBREF>)] - this will destroy an object. Using just once will mark it for destruction, which can be undone with [ansi(h,@undestroy <name or dbref>)] if it is typed quickly. Using twice will annihilate object. This cannot be undone.%R%R[ansi(h,@set <target>=ENTER_OK)] - this will set a flag on the object that will allow other people to enter it. Using !ENTER_OK instead will remove the flag. (You may always enter your own objects.)%R%R[ansi(h,inventory)] - this will show what's in your inventory.%R[ansi(h,drop <target>)] - this will remove an object from your inventory and place it in the room.%R[ansi(h,get <target>)] - this will retrieve an object, if you have permission.%R[ansi(h,@lock/Basic <target>=me)] - this will prevent other players from picking up and walking off with your object.%R[ansi(h,\(\IMPORTANT: see +help +key for more advanced tricks!))]%R%R[ansi(h,@desc <target>=<text here>)] - the same as @describe'ing yourself. This will be what others see if they look at or are inside the object. You may also use @idesc for 'internal description,' in which case @desc will be seen by those looking at the object, rather than being both the external description and a room description.%R%R[ansi(h,&IC <target>=1)] - this will enable +pot to work in an object.%R%RYou may only have a few objects in existence at once. If you have lost track of them:%R[ansi(h,@search)] - this will show all objects you own and their DBREFs.%R[ansi(h,@tel <target>=me)] - this will retrieve an object.%R%RUsing them:%R[ansi(h,enter <target>)] - this will enter an object as though it were a room.%R[ansi(h,leave <target>)] - This will leave the object.

+help/addmain PennMUSH/@mail=We use the built-in PennMUSH @mail system here at Exalted MUSH. These are the basics.%r%r[ansi(h,@mail)]%rDisplays your inbox.%r%r[ansi(h,@mail <#>)]%rDisplay a specified message.%r%r[ansi(h,@mail <player>=<Subject>/<Message>)]%rSends a message to <player.>%r%rFor more information, please use%b[ansi(h,help @mail)]

+help/addmain PennMUSH/Connection Troubles=Every now and then, someone joins the game who might have problems staying connected. The following advice will help you if that problem matches this symptom: you type nothing for a minute or two, and the game stops sending you text-- when you type something, it suddenly says you're disconnected.%r%rThis is a problem typical of those behind NAT (Network Address Translation)... in other words, routers and large networks.%r%rTo solve this problem:%r%r[ansi(h,@set me=KEEPALIVE)]%rThis will tell the game to work harder to keep the connection to your character open. There is also the option of setting a timer in your client (check your client's Help files for instructions on doing so) that sends IDLE (all capitals! iDLE or idle will not work) to the game every minute or two.%r%rThis will only solve problems related to a lack of activity causing the hardware to invisibly disconnect you. There are some problems it cannot solve.

@@ BBS

+help/addmain General OOC/BBS=The BBS is a global, multi-threaded board with a rich set of features that grew from a rewrite of Myrddin's classical BBS. It shares almost identical command syntax and appearance. All of its commands begin with +bb, such as +bbread! Note that an identical system exists for groups, using +gb instead of +bb - so, +gbread and +gbpost, etc. (this will only work for your current group focus! See groups helpfile for more information.)%R%R[align(28 48,ansi(h,+bbread),Scans joined bulletin board groups.)]%R[align(28 48,ansi(h,+bbread <#>),Scans messages in group <#>.)]%R[align(28 48,ansi(h,+bbread <#>/<list>),Reads message(s). <list> is comma-seperated\, with entries able to be: a single number\, a number range (ie. 1-6)\, or the letter u (for unread message) in any combination or order. Duplicates will be ignored.)]%R[align(28 48,ansi(h,+bbcatchup <#>),Marks all messages in group <#> as read. You can use multiple group #'s/names or may use the word 'all' to catchup on all messages on all boards.)]%R[align(28 48,ansi(h,+bbscan),Totals unread postings (if any) in each joined group. You can place this command in your @aconnect\, and it's recommended you do so.)]%R[align(28 48,ansi(h,+bbpost <#>/<title>=<text>),This posts to group <#>.)]%R[align(28 48,ansi(h,+bbpost <#>/<title>),This starts a post to group <#>.)]%R[align(28 48,ansi(h,+bbwrite <text>) or [ansi(h,+bb <text>)],This adds text to an already started post.)]%R[align(28 48,ansi(h,+bbedit <area>=<old>/<new>),Edits your post in progress. Valid areas are: text\, title)]%R[align(28 48,ansi(h,+bbproof),Displays your current post in progress.)]%R[align(28 48,ansi(h,+bbread),Scans joined bulletin board groups.)]%R[align(28 48,ansi(h,+bbedit <#>/<#>=<old>/<new>),Edits one of your posted messages.)]

+help/addsub BBS/misc=[align(28 48,ansi(h,+bbremove <#>/<list>),Removes a message by you. <list> works like with +bbread)]%R[align(28 48,ansi(h,+bbmove <#>/<#>=<#>),Moves one of your messages to a different board.)]%R[align(28 48,ansi(h,+bbleave <#>),Unsubscribe from group <#>.)]%R[align(28 48,ansi(h,+bbjoin <#>),Joins a group you've previously 'left'.)]%R[align(28 48,ansi(h,+bblist),Listing of all groups available to you along with their timeout values.)]%R[align(28 48,ansi(h,+bbsearch <#>=<name>),Shows you a list of <name>'s postings on group <#>.)]%R

+help/addsub BBS/admin=[align(28 48,ansi(h,+bbnewgroup <title>),Creates a new group.)]%R[align(28 48,ansi(h,+bbcleargroup <#>),Clears group <#> and all it's messages.)]%R[align(28 48,ansi(h,+bblock <#>/<lock>=<key types>),Locks group <#>. <lock> can be read or write. <key type> uses the +Key system's Key Type names. Examples: +bblock 4/write=admin)]%R[align(28 48,ansi(h,+bbunlock <#>/<lock>),Undoes a lock.)]%R[align(28 48,ansi(h,+bbconfig),Shows values of all config parameters.)]%R%RThere are three types of configuration parameters: global, group, and post. Global configuration parameters affect the BB system as a whole - including Group Boards, while group configuration parameters affect a single Group.%R%RTo set a global parameter:%R%R[align(28 48,ansi(h,+bbconfig <param>=<value>),Sets global config parameter.)]%R%RGlobal Parameters:%R%R[align(28 48,timeout,This sets the default timeout (in days) for any new groups created. This uses a format acceptable by stringsecs - help stringsecs() - and a timeout of '0' means messages won't timeout. (ex. +bbconfig timeout=30d))]%R%R[align(28 48,autotimeout,Setting this to '1' enables timeouts to be checked periodically. Setting it to 0 disables timeout checking across the board)]%R%R[align(28 48,interval,This is how often the board will check for timeout processing. Uses stringsecs like timeout for calculation.)]%R%RTo set a Group parameter:%R%R[align(28 48,ansi(h,+bbconfig <#>/<param>=<value>),Sets config parameter for board <#>.)]%R%RGroup Parameters:%R%R[align(28 48,anonymous,Setting this value turns the Group 'anonymous'.  This means that any future posting's 'Author' field will have the value of this param instead of the name of the author. Wizards will also see the actual name of author.  (examples: +bbconfig newspaper/anonymous=NewsPaper Staff\, +bbconfig house rules/anonymous=The Staff))]%R%R[align(28 48,timeout,Sets the default timeout value for the Group. Any new messages will have this new value. A value of '0' means messages won't timeout. Uses stringsecs)]%R%RPosts can be handled the same way. The only available parameter is 'timeout.' A post with no timeout will not expire. Example: +bbconfig 1/4/timeout=0.%R%RSet a parameter to nothing to clear it. Example: +bbconfig 1/timeout%R%R[ansi(h,+bborder <list>)]%RChange the order boards are displayed in. Must specify the location of all boards. Example: if you had 5 boards and wanted to make the fifth one the first: +bborder 5 1 2 3 4%R%R* SPECIAL TOOLS - WIZ ONLY *%R[ansi(h,+bbimport <dbref>)]%RConverts an entire Myrddin's BBS to this. <dbref> must be the dbref of the bbpocket object it used. Note that boards are added, so to do a perfect conversion one must start with a clean install of this system! (or clear all groups.) Board locks and read/unread data is not converted.%R%R[ansi(h,+bbconvert <#>=<dbref>)]%RConvert a single board from Myrddin's style. Adds posts in order.